		//0x0100		VoC_code_section_1
		//0x0100		L3_compress
0x6C05DFE9,	//0x0100		VoC_bez16_d(LABLE_AFTER_MP3INIT,0x4001)(lo)	|	VoC_push16(RA,DEFAULT)
0xFFC04001,	//0x0102		VoC_NAD	|	VoC_bez16_d(LABLE_AFTER_MP3INIT,0x4001)(hi)
0x02462B80,	//0x0104		VoC_jal(MP3_reset)
		//0x0106		LABLE_AFTER_MP3INIT
0x402A6C12,	//0x0106		VoC_bez16_d(L3_compress_L0,0x402a)
0x00000AC7,	//0x0108		VoC_lw16i(REG7,0x8000)
0xE0157C83,	//0x010a		VoC_lw16i_short(REG5,0x1,IN_PARALLEL)	|	VoC_shru32_ri(REG67,0x10,DEFAULT)
0x402A0B9B,	//0x010c		VoC_sub32_dr(REG67,0x402a,REG67)
0x40286433,	//0x010e		VoC_bnlt32_rd(L3_compress_L1,REG67,0x4028)
0x402A1483,	//0x0110		VoC_lw32_d(REG67,0x402a)
0xFFC07005,	//0x0112		VoC_NAD(IN_PARALLEL)	|	VoC_lw16i_short(REG5,0x0,DEFAULT)
		//0x0114		L3_compress_L1
0x40280B9B,	//0x0114		VoC_sub32_dr(REG67,0x4028,REG67)
0x403E1505,	//0x0116		VoC_sw16_d(REG5,0x403e)
		//0x0118		L3_compress_L0
0x442AF042,	//0x0118		VoC_bne16_rd(LABLE_MP3_MONO,REG2,0x400c)(lo)	|	VoC_lw16i_short(REG2,0x2,DEFAULT)
0x2B00400C,	//0x011a		VoC_jump_lg(LABLE_MP3_STERO)(lo)	|	VoC_bne16_rd(LABLE_MP3_MONO,REG2,0x400c)(hi)
0xFFC0014E,	//0x011c		VoC_NAD	|	VoC_jump_lg(LABLE_MP3_STERO)(hi)
		//0x011e		LABLE_MP3_MONO
0x40021485,	//0x011e		VoC_lw32_d(ACC1,0x4002)
0x01200A82,	//0x0120		VoC_lw16i(REG2,0x120)
0x04000A83,	//0x0122		VoC_lw16i(REG3,0x400)
0x15C1FF46,	//0x0124		VoC_sw32_d(REG23,0xffc2)(lo)	|	VoC_lw32z(RL6,DEFAULT)
0x15C57FC2,	//0x0126		VoC_sw32_d(ACC1,0xffc4)(lo)	|	VoC_sw32_d(REG23,0xffc2)(hi)
0xDE807FC4,	//0x0128		VoC_cfg(0x0)	|	VoC_sw32_d(ACC1,0xffc4)(hi)
0x1794FFC0,	//0x012a		VoC_cfg_lg(0x8,)(lo)	|	VoC_NOP
0xC0D30008,	//0x012c		VoC_add16_rr(REG3,REG3,REG2,DEFAULT)	|	VoC_cfg_lg(0x8,)(hi)
0x04800A8C,	//0x012e		VoC_lw16i(RL6_LO,0x480)
0x7FC215C1,	//0x0130		VoC_sw32_d(REG23,0xffc2)
0x7FC415C5,	//0x0132		VoC_sw32_d(ACC1,0xffc4)
0xFFC0DE80,	//0x0134		VoC_NOP	|	VoC_cfg(0x0)
0x00081794,	//0x0136		VoC_cfg_lg(0x8,)
0xC975C0D3,	//0x0138		VoC_add32_rr(ACC1,ACC1,RL6,DEFAULT)	|	VoC_add16_rr(REG3,REG3,REG2,DEFAULT)
0x7FC215C1,	//0x013a		VoC_sw32_d(REG23,0xffc2)
0x7FC415C5,	//0x013c		VoC_sw32_d(ACC1,0xffc4)
0xFFC0DE80,	//0x013e		VoC_NOP	|	VoC_cfg(0x0)
0x00081794,	//0x0140		VoC_cfg_lg(0x8,)
0xFFC0C0D3,	//0x0142		VoC_NOP	|	VoC_add16_rr(REG3,REG3,REG2,DEFAULT)
0x7FC215C1,	//0x0144		VoC_sw32_d(REG23,0xffc2)
0x7FC415C5,	//0x0146		VoC_sw32_d(ACC1,0xffc4)
0xFFC0DE80,	//0x0148		VoC_NOP	|	VoC_cfg(0x0)
0x00081794,	//0x014a		VoC_cfg_lg(0x8,)
0x01922B00,	//0x014c		VoC_jump_lg(LABLE_MP3_ENC_BEGIN)
		//0x014e		LABLE_MP3_STERO
0x40021485,	//0x014e		VoC_lw32_d(ACC1,0x4002)
0x02400A84,	//0x0150		VoC_lw16i(REG4,0x240)
0x2C160A85,	//0x0152		VoC_lw16i(REG5,0x2c16)
0x15C2FF46,	//0x0154		VoC_sw32_d(REG45,0xffc2)(lo)	|	VoC_lw32z(RL6,DEFAULT)
0x15C57FC2,	//0x0156		VoC_sw32_d(ACC1,0xffc4)(lo)	|	VoC_sw32_d(REG45,0xffc2)(hi)
0xDE807FC4,	//0x0158		VoC_cfg(0x0)	|	VoC_sw32_d(ACC1,0xffc4)(hi)
0x09000A8C,	//0x015a		VoC_lw16i(RL6_LO,0x900)
0x00081794,	//0x015c		VoC_cfg_lg(0x8,)
0x582C1808,	//0x015e		VoC_lw16i_set_inc(REG0,0x582c,0x2)
0x08001805,	//0x0160		VoC_lw16i_set_inc(REG1,0x800,0x1)
0xFF1759C2,	//0x0162		VoC_movreg32(RL7,REG45,IN_PARALLEL)	|	VoC_lw32inc_p(REG45,REG0,DEFAULT)
0x0A401806,	//0x0164		VoC_lw16i_set_inc(REG2,0xa40,0x1)
0xFFC04975,	//0x0166		VoC_NAD(IN_PARALLEL)	|	VoC_add32_rr(ACC1,ACC1,RL6,DEFAULT)
0x01752D20,	//0x0168		VoC_loop_i(0x0,0x90)
0xDC9459C3,	//0x016a		VoC_sw16inc_p(REG4,REG1,IN_PARALLEL)	|	VoC_lw32inc_p(REG67,REG0,DEFAULT)
0xD9C25CA5,	//0x016c		VoC_lw32inc_p(REG45,REG0,IN_PARALLEL)	|	VoC_sw16inc_p(REG5,REG2,DEFAULT)
0xD9C35C96,	//0x016e		VoC_lw32inc_p(REG67,REG0,IN_PARALLEL)	|	VoC_sw16inc_p(REG6,REG1,DEFAULT)
0x5C94DCA7,	//0x0170		VoC_sw16inc_p(REG4,REG1,DEFAULT)	|	VoC_sw16inc_p(REG7,REG2,DEFAULT)
0xDCA5D9C2,	//0x0172		VoC_sw16inc_p(REG5,REG2,DEFAULT)	|	VoC_lw32inc_p(REG45,REG0,IN_PARALLEL)
0xDCA7DC96,	//0x0174		VoC_sw16inc_p(REG7,REG2,DEFAULT)	|	VoC_sw16inc_p(REG6,REG1,DEFAULT)
		//0x0175		VoC_endloop0
0x7FC215C7,	//0x0176		VoC_sw32_d(RL7,0xffc2)
0x7FC415C5,	//0x0178		VoC_sw32_d(ACC1,0xffc4)
0x1808DE80,	//0x017a		VoC_lw16i_set_inc(REG0,0x582c,0x2)(lo)	|	VoC_cfg(0x0)
0x1794582C,	//0x017c		VoC_cfg_lg(0x8,)(lo)	|	VoC_lw16i_set_inc(REG0,0x582c,0x2)(hi)
0x18050008,	//0x017e		VoC_lw16i_set_inc(REG1,0xc80,0x1)(lo)	|	VoC_cfg_lg(0x8,)(hi)
0xD9C20C80,	//0x0180		VoC_lw32inc_p(REG45,REG0,DEFAULT)	|	VoC_lw16i_set_inc(REG1,0xc80,0x1)(hi)
0x0EC01806,	//0x0182		VoC_lw16i_set_inc(REG2,0xec0,0x1)
0x01912D20,	//0x0184		VoC_loop_i(0x0,0x90)
0xDC9459C3,	//0x0186		VoC_sw16inc_p(REG4,REG1,IN_PARALLEL)	|	VoC_lw32inc_p(REG67,REG0,DEFAULT)
0xD9C25CA5,	//0x0188		VoC_lw32inc_p(REG45,REG0,IN_PARALLEL)	|	VoC_sw16inc_p(REG5,REG2,DEFAULT)
0xD9C35C96,	//0x018a		VoC_lw32inc_p(REG67,REG0,IN_PARALLEL)	|	VoC_sw16inc_p(REG6,REG1,DEFAULT)
0x5C94DCA7,	//0x018c		VoC_sw16inc_p(REG4,REG1,DEFAULT)	|	VoC_sw16inc_p(REG7,REG2,DEFAULT)
0xDCA5D9C2,	//0x018e		VoC_sw16inc_p(REG5,REG2,DEFAULT)	|	VoC_lw32inc_p(REG45,REG0,IN_PARALLEL)
0xDCA7DC96,	//0x0190		VoC_sw16inc_p(REG7,REG2,DEFAULT)	|	VoC_sw16inc_p(REG6,REG1,DEFAULT)
		//0x0191		VoC_endloop0
		//0x0192		LABLE_MP3_ENC_BEGIN
0x402C1404,	//0x0192		VoC_lw16_d(REG4,0x402c)
0x403E0724,	//0x0194		VoC_add16_rd(REG4,REG4,0x403e)
0xE00078EC,	//0x0196		VoC_lw16i_short(REG0,0x0,IN_PARALLEL)	|	VoC_shr16_ri(REG4,0xfffffffd,DEFAULT)
0x01200A82,	//0x0198		VoC_lw16i(REG2,0x120)
0x780EC316,	//0x019a		VoC_shr16_ri(REG6,0x1,DEFAULT)	|	VoC_sub16_rr(REG6,REG4,REG2,DEFAULT)
0x1504E004,	//0x019c		VoC_sw16_d(REG4,0x1116)(lo)	|	VoC_lw16i_short(REG4,0x0,IN_PARALLEL)
0x15001116,	//0x019e		VoC_sw16_d(REG0,0x1102)(lo)	|	VoC_sw16_d(REG4,0x1116)(hi)
0x0A821102,	//0x01a0		VoC_lw16i(REG2,0x4620)(lo)	|	VoC_sw16_d(REG0,0x1102)(hi)
0x0A834620,	//0x01a2		VoC_lw16i(REG3,0x4f20)(lo)	|	VoC_lw16i(REG2,0x4620)(hi)
0x0A874F20,	//0x01a4		VoC_lw16i(REG7,0x15b6)(lo)	|	VoC_lw16i(REG3,0x4f20)(hi)
0x180415B6,	//0x01a6		VoC_lw16i_set_inc(REG0,0x800,0x1)(lo)	|	VoC_lw16i(REG7,0x15b6)(hi)
0x5FC70800,	//0x01a8		VoC_push16(REG7,DEFAULT)	|	VoC_lw16i_set_inc(REG0,0x800,0x1)(hi)
0xDFC6E015,	//0x01aa		VoC_push16(REG6,DEFAULT)	|	VoC_lw16i_short(REG5,0x1,IN_PARALLEL)
0xDFC45F41,	//0x01ac		VoC_push16(REG4,IN_PARALLEL)	|	VoC_push32(REG23,DEFAULT)
0xDFC55F42,	//0x01ae		VoC_push16(REG5,IN_PARALLEL)	|	VoC_push32(REG45,DEFAULT)
0xFFC05FC3,	//0x01b0		VoC_NAD(IN_PARALLEL)	|	VoC_push16(REG3,DEFAULT)
		//0x01b2		LABEL_L3_compress_LOOP2
0xFF445FC0,	//0x01b2		VoC_lw32z(ACC0,IN_PARALLEL)	|	VoC_push16(REG0,DEFAULT)
0x112A1809,	//0x01b4		VoC_lw16i_set_inc(REG1,0x112a,0x2)
0x01BB2C05,	//0x01b6		VoC_loop_i(0x1,0x2)
0xDA6768E2,	//0x01b8		VoC_sw16_sd(REG7,0x5,IN_PARALLEL)	|	VoC_loop_i_short(0x7,DEFAULT)
		//0x01ba		VoC_endloop0
0x1FB9DDCC,	//0x01ba		VoC_lw16i_set_inc(REG1,0x1528,0xfffffffe)(lo)	|	VoC_sw32inc_p(ACC0,REG1,DEFAULT)
		//0x01bb		VoC_endloop1
0x56351528,	//0x01bc		VoC_lw16_sd(REG5,0x2,DEFAULT)	|	VoC_lw16i_set_inc(REG1,0x1528,0xfffffffe)(hi)
0x5A44DD11,	//0x01be		VoC_sw16_sd(REG4,0x3,DEFAULT)	|	VoC_sw32_sd(REG23,0x1,IN_PARALLEL)
0xFFC0E004,	//0x01c0		VoC_NAD	|	VoC_lw16i_short(REG4,0x0,IN_PARALLEL)
		//0x01c2		LABEL_L3_compress_LOOP1
0xF0085A23,	//0x01c2		VoC_lw16i_short(INC0,0x2,IN_PARALLEL)	|	VoC_sw16_sd(REG3,0x1,DEFAULT)
0xDA105D0A,	//0x01c4		VoC_sw16_sd(REG0,0x0,IN_PARALLEL)	|	VoC_sw32_sd(REG45,0x0,DEFAULT)
0x031E2B80,	//0x01c6		VoC_jal(L3_window_filter_subband)
0xD623590A,	//0x01c8		VoC_lw16_sd(REG3,0x1,IN_PARALLEL)	|	VoC_lw32_sd(REG45,0x0,DEFAULT)
0x272F0724,	//0x01ca		VoC_add16_rd(REG4,REG4,0x272f)
0x209C071B,	//0x01cc		VoC_add16_rd(REG3,REG3,0x209c)
0x0700D610,	//0x01ce		VoC_add16_rd(REG0,REG0,0x2738)(lo)	|	VoC_lw16_sd(REG0,0x0,DEFAULT)
0x4B0C2738,	//0x01d0		VoC_blt16_rd(LABEL_L3_compress_LOOP1,REG4,0x273a)(lo)	|	VoC_add16_rd(REG0,REG0,0x2738)(hi)
0x07AD273A,	//0x01d2		VoC_sub16_rd(REG5,REG5,0x272f)(lo)	|	VoC_blt16_rd(LABEL_L3_compress_LOOP1,REG4,0x273a)(hi)
0xD911272F,	//0x01d4		VoC_lw32_sd(REG23,0x1,DEFAULT)	|	VoC_sub16_rd(REG5,REG5,0x272f)(hi)
0xF6437004,	//0x01d6		VoC_movreg16(REG3,REG2,IN_PARALLEL)	|	VoC_lw16i_short(REG4,0x0,DEFAULT)
0x01C23245,	//0x01d8		VoC_bnltz16_r(LABEL_L3_compress_LOOP1,REG5)
0xFFC05911,	//0x01da		VoC_NAD(IN_PARALLEL)	|	VoC_lw32_sd(REG23,0x1,DEFAULT)
0x05342B80,	//0x01dc		VoC_jal(L3_mdct_sub)
0xE0065647,	//0x01de		VoC_lw16i_short(REG6,0x0,IN_PARALLEL)	|	VoC_lw16_sd(REG7,0x3,DEFAULT)
0x066C2B80,	//0x01e0		VoC_jal(L3_iteration_loop)
0xE0165647,	//0x01e2		VoC_lw16i_short(REG6,0x1,IN_PARALLEL)	|	VoC_lw16_sd(REG7,0x3,DEFAULT)
0x066C2B80,	//0x01e4		VoC_jal(L3_iteration_loop)
0xF0085660,	//0x01e6		VoC_lw16i_short(INC0,0x2,IN_PARALLEL)	|	VoC_lw16_sd(REG0,0x5,DEFAULT)
0x277C0701,	//0x01e8		VoC_add16_rd(REG1,REG0,0x277c)
0x180AF053,	//0x01ea		VoC_lw16i_set_inc(REG2,0x112a,0x2)(lo)	|	VoC_lw16i_short(INC3,0x2,DEFAULT)
0x180B112A,	//0x01ec		VoC_lw16i_set_inc(REG3,0x53a0,0x2)(lo)	|	VoC_lw16i_set_inc(REG2,0x112a,0x2)(hi)
0xFFC053A0,	//0x01ee		VoC_NAD	|	VoC_lw16i_set_inc(REG3,0x53a0,0x2)(hi)
0x02092C25,	//0x01f0		VoC_loop_i(0x1,0x12)
0xFF026C16,	//0x01f2		VoC_movreg32(REG45,REG01,IN_PARALLEL)	|	VoC_loop_i_short(0x20,DEFAULT)
0x59C5D9D4,	//0x01f4		VoC_lw32inc_p(ACC1,REG0,DEFAULT)	|	VoC_lw32inc_p(ACC0,REG2,DEFAULT)
0xD9CFD9DE,	//0x01f6		VoC_lw32inc_p(RL7,REG1,DEFAULT)	|	VoC_lw32inc_p(RL6,REG3,IN_PARALLEL)
0x020033C4,	//0x01f8		VoC_bnltz32_r(LABEL_L3_compress_OPP,ACC0)
0x020032C5,	//0x01fa		VoC_bngtz32_r(LABEL_L3_compress_OPP,ACC1)
0x253A0BAD,	//0x01fc		VoC_sub32_dr(ACC1,0x253a,ACC1)
0xDDA5FFC0,	//0x01fe		VoC_sw32_p(ACC1,REG4,DEFAULT)	|	VoC_NOP
		//0x0200		LABEL_L3_compress_OPP
0x020833C6,	//0x0200		VoC_bnltz32_r(LABEL_L3_compress_OPP1,RL6)
0x020832C7,	//0x0202		VoC_bngtz32_r(LABEL_L3_compress_OPP1,RL7)
0x253A0BBF,	//0x0204		VoC_sub32_dr(RL7,0x253a,RL7)
0xDDAFFFC0,	//0x0206		VoC_sw32_p(RL7,REG5,DEFAULT)	|	VoC_NOP
		//0x0208		LABEL_L3_compress_OPP1
		//0x0208		VoC_endloop0
0xF025FF02,	//0x0208		VoC_lw16i_short(REG5,0x1,DEFAULT)	|	VoC_movreg32(REG45,REG01,DEFAULT)
		//0x0209		VoC_endloop1
0x0C800A80,	//0x020a		VoC_lw16i(REG0,0xc80)
0x0A87D644,	//0x020c		VoC_lw16i(REG7,0x800)(lo)	|	VoC_lw16_sd(REG4,0x3,DEFAULT)
0x0A820800,	//0x020e		VoC_lw16i(REG2,0x41a0)(lo)	|	VoC_lw16i(REG7,0x800)(hi)
0x0A8341A0,	//0x0210		VoC_lw16i(REG3,0x4aa0)(lo)	|	VoC_lw16i(REG2,0x41a0)(hi)
0x5F854AA0,	//0x0212		VoC_pop16(REG5,DEFAULT)	|	VoC_lw16i(REG3,0x4aa0)(hi)
0x4C2CC12C,	//0x0214		VoC_bnlt16_rd(LABLE_COMPILE_10,REG4,0x2733)(lo)	|	VoC_add16_rr(REG4,REG4,REG5,IN_PARALLEL)
0x2B002733,	//0x0216		VoC_jump_lg(LABEL_L3_compress_LOOP2)(lo)	|	VoC_bnlt16_rd(LABLE_COMPILE_10,REG4,0x2733)(hi)
0xFFC001B2,	//0x0218		VoC_NAD	|	VoC_jump_lg(LABEL_L3_compress_LOOP2)(hi)
		//0x021a		LABLE_COMPILE_10
0xDF865F02,	//0x021a		VoC_pop16(REG6,IN_PARALLEL)	|	VoC_pop32(REG45,DEFAULT)
0xDF865F01,	//0x021c		VoC_pop16(REG6,IN_PARALLEL)	|	VoC_pop32(REG23,DEFAULT)
0xDF86DF86,	//0x021e		VoC_pop16(REG6,DEFAULT)	|	VoC_pop16(REG6,DEFAULT)
0xFFC05F87,	//0x0220		VoC_NAD(IN_PARALLEL)	|	VoC_pop16(REG7,DEFAULT)
0x0A592B80,	//0x0222		VoC_jal(CS_L3_format_bitstream)
0x11021406,	//0x0224		VoC_lw16_d(REG6,0x1102)
0xE00378FE,	//0x0226		VoC_lw16i_short(REG3,0x0,IN_PARALLEL)	|	VoC_shr16_ri(REG6,0xffffffff,DEFAULT)
0x27580732,	//0x0228		VoC_add16_rd(REG2,REG6,0x2758)
0xF8F2F822,	//0x022a		VoC_shr16_ri(REG2,0xfffffffe,DEFAULT)	|	VoC_shr16_ri(REG2,0x4,DEFAULT)
0x1485F007,	//0x022c		VoC_lw32_d(ACC1,0x4004)(lo)	|	VoC_lw16i_short(REG7,0x0,DEFAULT)
0x15C14004,	//0x022e		VoC_sw32_d(REG23,0xffc2)(lo)	|	VoC_lw32_d(ACC1,0x4004)(hi)
0x15C57FC2,	//0x0230		VoC_sw32_d(ACC1,0xffc4)(lo)	|	VoC_sw32_d(REG23,0xffc2)(hi)
0xDE807FC4,	//0x0232		VoC_cfg(0x0)	|	VoC_sw32_d(ACC1,0xffc4)(hi)
0x09000A84,	//0x0234		VoC_lw16i(REG4,0x900)
0x00081794,	//0x0236		VoC_cfg_lg(0x8,)
0xE0055FA9,	//0x0238		VoC_lw16i_short(REG5,0x0,IN_PARALLEL)	|	VoC_pop16(RA,DEFAULT)
0x441AF042,	//0x023a		VoC_bne16_rd(LABLE_CONSUME_LEN,REG2,0x400c)(lo)	|	VoC_lw16i_short(REG2,0x2,DEFAULT)
0xFDFA400C,	//0x023c		VoC_shru32_ri(REG45,0xffffffff,DEFAULT)	|	VoC_bne16_rd(LABLE_CONSUME_LEN,REG2,0x400c)(hi)
		//0x023e		LABLE_CONSUME_LEN
0x40101583,	//0x023e		VoC_sw32_d(REG67,0x4010)
0x400E1503,	//0x0240		VoC_sw16_d(REG3,0x400e)
0x40121582,	//0x0242		VoC_sw32_d(REG45,0x4012)
0xE580FFC0,	//0x0244		VoC_return	|	VoC_NOP
		//0x0246		MP3_reset
0xF01CF000,	//0x0246		VoC_lw16i_short(WRAP0,0x0,DEFAULT)	|	VoC_lw16i_short(REG0,0x0,DEFAULT)
0xF01EF01D,	//0x0248		VoC_lw16i_short(WRAP2,0x0,DEFAULT)	|	VoC_lw16i_short(WRAP1,0x0,DEFAULT)
0x1540F01F,	//0x024a		VoC_sw16_d(REG0,0xffc1)(lo)	|	VoC_lw16i_short(WRAP3,0x0,DEFAULT)
0x0A967FC1,	//0x024c		VoC_lw16i(STATUS,0x3f)(lo)	|	VoC_sw16_d(REG0,0xffc1)(hi)
0x0AC9003F,	//0x024e		VoC_lw16i(ACC0_HI,0xac44)(lo)	|	VoC_lw16i(STATUS,0x3f)(hi)
0x7C842C44,	//0x0250		VoC_shru32_ri(ACC0,0x10,DEFAULT)	|	VoC_lw16i(ACC0_HI,0xac44)(hi)
0xF01BE002,	//0x0252		VoC_lw16i_short(BITCACHE,0x0,DEFAULT)	|	VoC_lw16i_short(REG2,0x0,IN_PARALLEL)
0x403E1502,	//0x0254		VoC_sw16_d(REG2,0x403e)
0x40065D34,	//0x0256		VoC_bne32_rd(MP3_reset_L0,ACC0,0x4006)
0x0A83F002,	//0x0258		VoC_lw16i(REG3,0x1a1)(lo)	|	VoC_lw16i_short(REG2,0x0,DEFAULT)
0x0A8701A1,	//0x025a		VoC_lw16i(REG7,0x7ac7)(lo)	|	VoC_lw16i(REG3,0x1a1)(hi)
0x0AC57AC7,	//0x025c		VoC_lw16i(REG5,0xffff8539)(lo)	|	VoC_lw16i(REG7,0x7ac7)(hi)
0x7C830539,	//0x025e		VoC_shru32_ri(REG67,0x10,DEFAULT)	|	VoC_lw16i(REG5,0xffff8539)(hi)
0x1502FA82,	//0x0260		VoC_sw16_d(REG2,0x403d)(lo)	|	VoC_shr32_ri(REG45,0x10,IN_PARALLEL)
0x1503403D,	//0x0262		VoC_sw16_d(REG3,0x402c)(lo)	|	VoC_sw16_d(REG2,0x403d)(hi)
0x1583402C,	//0x0264		VoC_sw32_d(REG67,0x402a)(lo)	|	VoC_sw16_d(REG3,0x402c)(hi)
0x1582402A,	//0x0266		VoC_sw32_d(REG45,0x4028)(lo)	|	VoC_sw32_d(REG67,0x402a)(hi)
0x2B004028,	//0x0268		VoC_jump_lg(MP3_reset_L2)(lo)	|	VoC_sw32_d(REG45,0x4028)(hi)
0xFFC00292,	//0x026a		VoC_NAD	|	VoC_jump_lg(MP3_reset_L2)(hi)
		//0x026c		MP3_reset_L0
0x7D000A89,	//0x026c		VoC_lw16i(ACC0_HI,0x7d00)
0x3B800ACB,	//0x026e		VoC_lw16i(ACC1_HI,0xbb80)
0xFC857C84,	//0x0270		VoC_shru32_ri(ACC1,0x10,IN_PARALLEL)	|	VoC_shru32_ri(ACC0,0x10,DEFAULT)
0x40065D05,	//0x0272		VoC_bne32_rd(MP3_reset_L1,ACC1,0x4006)
0x1406F021,	//0x0274		VoC_lw16_d(REG6,0x4008)(lo)	|	VoC_lw16i_short(REG1,0x1,DEFAULT)
0x781E4008,	//0x0276		VoC_shr16_ri(REG6,0x3,DEFAULT)	|	VoC_lw16_d(REG6,0x4008)(hi)
0x7F42E183,	//0x0278		VoC_lw32z(REG45,DEFAULT)	|	VoC_lw16i_short(REG3,0x18,IN_PARALLEL)
0x1501C4F3,	//0x027a		VoC_sw16_d(REG1,0x403d)(lo)	|	VoC_mult16_rr(REG3,REG3,REG6,IN_PARALLEL)
0x1582403D,	//0x027c		VoC_sw32_d(REG45,0x402a)(lo)	|	VoC_sw16_d(REG1,0x403d)(hi)
0x1503402A,	//0x027e		VoC_sw16_d(REG3,0x402c)(lo)	|	VoC_sw32_d(REG45,0x402a)(hi)
0xE5D1402C,	//0x0280		VoC_jump(MP3_reset_L2)	|	VoC_sw16_d(REG3,0x402c)(hi)
		//0x0282		MP3_reset_L1
0x40065D04,	//0x0282		VoC_bne32_rd(MP3_reset_L2,ACC0,0x4006)
0x1406F041,	//0x0284		VoC_lw16_d(REG6,0x4008)(lo)	|	VoC_lw16i_short(REG1,0x2,DEFAULT)
0x781E4008,	//0x0286		VoC_shr16_ri(REG6,0x3,DEFAULT)	|	VoC_lw16_d(REG6,0x4008)(hi)
0x7F42E243,	//0x0288		VoC_lw32z(REG45,DEFAULT)	|	VoC_lw16i_short(REG3,0x24,IN_PARALLEL)
0x1501C4F3,	//0x028a		VoC_sw16_d(REG1,0x403d)(lo)	|	VoC_mult16_rr(REG3,REG3,REG6,IN_PARALLEL)
0x1582403D,	//0x028c		VoC_sw32_d(REG45,0x402a)(lo)	|	VoC_sw16_d(REG1,0x403d)(hi)
0x1503402A,	//0x028e		VoC_sw16_d(REG3,0x402c)(lo)	|	VoC_sw32_d(REG45,0x402a)(hi)
0xFFC0402C,	//0x0290		VoC_NAD	|	VoC_sw16_d(REG3,0x402c)(hi)
		//0x0292		MP3_reset_L2
0x402D1804,	//0x0292		VoC_lw16i_set_inc(REG0,0x402d,0x1)
0x00000A81,	//0x0294		VoC_lw16i(REG1,0x0)
0x00200A82,	//0x0296		VoC_lw16i(REG2,0x20)
0x00280A83,	//0x0298		VoC_lw16i(REG3,0x28)
0x00300A84,	//0x029a		VoC_lw16i(REG4,0x30)
0x00380A85,	//0x029c		VoC_lw16i(REG5,0x38)
0x00400A86,	//0x029e		VoC_lw16i(REG6,0x40)
0x00500A87,	//0x02a0		VoC_lw16i(REG7,0x50)
0xDC82DC81,	//0x02a2		VoC_sw16inc_p(REG2,REG0,DEFAULT)	|	VoC_sw16inc_p(REG1,REG0,DEFAULT)
0xDC84DC83,	//0x02a4		VoC_sw16inc_p(REG4,REG0,DEFAULT)	|	VoC_sw16inc_p(REG3,REG0,DEFAULT)
0xDC86DC85,	//0x02a6		VoC_sw16inc_p(REG6,REG0,DEFAULT)	|	VoC_sw16inc_p(REG5,REG0,DEFAULT)
0x0A81DC87,	//0x02a8		VoC_lw16i(REG1,0x60)(lo)	|	VoC_sw16inc_p(REG7,REG0,DEFAULT)
0x0A820060,	//0x02aa		VoC_lw16i(REG2,0x70)(lo)	|	VoC_lw16i(REG1,0x60)(hi)
0x0A830070,	//0x02ac		VoC_lw16i(REG3,0x80)(lo)	|	VoC_lw16i(REG2,0x70)(hi)
0x0A840080,	//0x02ae		VoC_lw16i(REG4,0xa0)(lo)	|	VoC_lw16i(REG3,0x80)(hi)
0x0A8500A0,	//0x02b0		VoC_lw16i(REG5,0xc0)(lo)	|	VoC_lw16i(REG4,0xa0)(hi)
0x0A8600C0,	//0x02b2		VoC_lw16i(REG6,0xe0)(lo)	|	VoC_lw16i(REG5,0xc0)(hi)
0x0A8700E0,	//0x02b4		VoC_lw16i(REG7,0x100)(lo)	|	VoC_lw16i(REG6,0xe0)(hi)
0x0A880100,	//0x02b6		VoC_lw16i(ACC0_LO,0x140)(lo)	|	VoC_lw16i(REG7,0x100)(hi)
0xDC810140,	//0x02b8		VoC_sw16inc_p(REG1,REG0,DEFAULT)	|	VoC_lw16i(ACC0_LO,0x140)(hi)
0xDC83DC82,	//0x02ba		VoC_sw16inc_p(REG3,REG0,DEFAULT)	|	VoC_sw16inc_p(REG2,REG0,DEFAULT)
0xDC85DC84,	//0x02bc		VoC_sw16inc_p(REG5,REG0,DEFAULT)	|	VoC_sw16inc_p(REG4,REG0,DEFAULT)
0xDC87DC86,	//0x02be		VoC_sw16inc_p(REG7,REG0,DEFAULT)	|	VoC_sw16inc_p(REG6,REG0,DEFAULT)
0x1804DC88,	//0x02c0		VoC_lw16i_set_inc(REG0,0x402d,0x1)(lo)	|	VoC_sw16inc_p(ACC0_LO,REG0,DEFAULT)
0x1401402D,	//0x02c2		VoC_lw16_d(REG1,0x4008)(lo)	|	VoC_lw16i_set_inc(REG0,0x402d,0x1)(hi)
0xE9E44008,	//0x02c4		VoC_loop_i_short(0xf,DEFAULT)	|	VoC_lw16_d(REG1,0x4008)(hi)
0x350AD882,	//0x02c6		VoC_be16_rr(MP3_reset_L3,REG1,REG2)(lo)	|	VoC_lw16inc_p(REG2,REG0,DEFAULT)
0xFFC002CA,	//0x02c8		VoC_NAD	|	VoC_be16_rr(MP3_reset_L3,REG1,REG2)(hi)
		//0x02c9		VoC_endloop0
		//0x02ca		MP3_reset_L3
0x402D0A82,	//0x02ca		VoC_lw16i(REG2,0x402d)
0x0780C210,	//0x02cc		VoC_sub16_rd(REG0,REG0,0x272f)(lo)	|	VoC_sub16_rr(REG0,REG0,REG2,DEFAULT)
0xFFC0272F,	//0x02ce		VoC_NOP	|	VoC_sub16_rd(REG0,REG0,0x272f)(hi)
0x403C1500,	//0x02d0		VoC_sw16_d(REG0,0x403c)
0x11001808,	//0x02d2		VoC_lw16i_set_inc(REG0,0x1100,0x2)
0xFF447004,	//0x02d4		VoC_lw32z(ACC0,IN_PARALLEL)	|	VoC_lw16i_short(REG4,0x0,DEFAULT)
0x7B800AC7,	//0x02d6		VoC_lw16i(REG7,0xfffffb80)
0xDDC4EAA1,	//0x02d8		VoC_sw32inc_p(ACC0,REG0,DEFAULT)	|	VoC_loop_i_short(0x15,DEFAULT)
		//0x02d9		VoC_endloop0
0x11141507,	//0x02da		VoC_sw16_d(REG7,0x1114)
0xE0237022,	//0x02dc		VoC_lw16i_short(REG3,0x2,IN_PARALLEL)	|	VoC_lw16i_short(REG2,0x1,DEFAULT)
0x40011504,	//0x02de		VoC_sw16_d(REG4,0x4001)
0x40421504,	//0x02e0		VoC_sw16_d(REG4,0x4042)
0x40401504,	//0x02e2		VoC_sw16_d(REG4,0x4040)
0x40431504,	//0x02e4		VoC_sw16_d(REG4,0x4043)
0x40451504,	//0x02e6		VoC_sw16_d(REG4,0x4045)
0x403F1502,	//0x02e8		VoC_sw16_d(REG2,0x403f)
0x40411502,	//0x02ea		VoC_sw16_d(REG2,0x4041)
0x40461502,	//0x02ec		VoC_sw16_d(REG2,0x4046)
0x40441503,	//0x02ee		VoC_sw16_d(REG3,0x4044)
0x11151503,	//0x02f0		VoC_sw16_d(REG3,0x1115)
0x04001808,	//0x02f2		VoC_lw16i_set_inc(REG0,0x400,0x2)
0x06001809,	//0x02f4		VoC_lw16i_set_inc(REG1,0x600,0x2)
0x02FC2C05,	//0x02f6		VoC_loop_i(0x1,0x2)
0x02FB2D00,	//0x02f8		VoC_loop_i(0x0,0x80)
0xDDCCDDC4,	//0x02fa		VoC_sw32inc_p(ACC0,REG1,DEFAULT)	|	VoC_sw32inc_p(ACC0,REG0,DEFAULT)
		//0x02fb		VoC_endloop0
		//0x02fc		VoC_endloop1
0x110C1584,	//0x02fc		VoC_sw32_d(ACC0,0x110c)
0x40481808,	//0x02fe		VoC_lw16i_set_inc(REG0,0x4048,0x2)
0x03022CCE,	//0x0300		VoC_loop_i(0x0,0x67)
		//0x0302		VoC_endloop0
0xF101DDC4,	//0x0302		VoC_lw16i_short(REG1,0x8,DEFAULT)	|	VoC_sw32inc_p(ACC0,REG0,DEFAULT)
0x11061584,	//0x0304		VoC_sw32_d(ACC0,0x1106)
0x11081584,	//0x0306		VoC_sw32_d(ACC0,0x1108)
0x110A1584,	//0x0308		VoC_sw32_d(ACC0,0x110a)
0x11031508,	//0x030a		VoC_sw16_d(ACC0_LO,0x1103)
0x11011501,	//0x030c		VoC_sw16_d(REG1,0x1101)
0x11041584,	//0x030e		VoC_sw32_d(ACC0,0x1104)
0x41A01808,	//0x0310		VoC_lw16i_set_inc(REG0,0x41a0,0x2)
0x4AA01809,	//0x0312		VoC_lw16i_set_inc(REG1,0x4aa0,0x2)
0x031A2C09,	//0x0314		VoC_loop_i(0x1,0x4)
0x03192D20,	//0x0316		VoC_loop_i(0x0,0x90)
0xDDCCDDC4,	//0x0318		VoC_sw32inc_p(ACC0,REG1,DEFAULT)	|	VoC_sw32inc_p(ACC0,REG0,DEFAULT)
		//0x0319		VoC_endloop0
		//0x031a		VoC_endloop1
0x11121508,	//0x031a		VoC_sw16_d(ACC0_LO,0x1112)
0xFFC06580,	//0x031c		VoC_NAD(IN_PARALLEL)	|	VoC_return
		//0x031e		L3_window_filter_subband
0x110C0A84,	//0x031e		VoC_lw16i(REG4,0x110c)
0xDFC3412C,	//0x0320		VoC_push16(REG3,IN_PARALLEL)	|	VoC_add16_rr(REG4,REG4,REG5,DEFAULT)
0x04001FB9,	//0x0322		VoC_lw16i_set_inc(REG1,0x400,0xfffffffe)
0xD84778BD,	//0x0324		VoC_lw16_p(REG7,REG4,IN_PARALLEL)	|	VoC_shr16_ri(REG5,0xfffffff7,DEFAULT)
0xDFC44069,	//0x0326		VoC_push16(REG4,IN_PARALLEL)	|	VoC_add16_rr(REG1,REG1,REG5,DEFAULT)
0x275A073D,	//0x0328		VoC_add16_rd(REG5,REG7,0x275a)
0xF6224149,	//0x032a		VoC_movreg16(REG2,REG1,IN_PARALLEL)	|	VoC_add16_rr(REG1,REG5,REG1,DEFAULT)
0xF5E16909,	//0x032c		VoC_lw16i_short(FORMAT32,0xfffffffc,IN_PARALLEL)	|	VoC_loop_i_short(0x8,DEFAULT)
0xD9C4D9C2,	//0x032e		VoC_lw32inc_p(ACC0,REG0,DEFAULT)	|	VoC_lw32inc_p(REG45,REG0,DEFAULT)
0xF68560A4,	//0x0330		VoC_movreg16(REG5,REG4,IN_PARALLEL)	|	VoC_movreg16(REG4,REG5,DEFAULT)
0xF7286109,	//0x0332		VoC_movreg16(ACC0_LO,ACC0_HI,IN_PARALLEL)	|	VoC_movreg16(ACC0_HI,ACC0_LO,DEFAULT)
0xDDCCDDCA,	//0x0334		VoC_sw32inc_p(ACC0,REG1,DEFAULT)	|	VoC_sw32inc_p(REG45,REG1,DEFAULT)
		//0x0335		VoC_endloop0
0x112A1808,	//0x0336		VoC_lw16i_set_inc(REG0,0x112a,0x2)
0x274B0700,	//0x0338		VoC_add16_rd(REG0,REG0,0x274b)
0x608C1809,	//0x033a		VoC_lw16i_set_inc(REG1,0x608c,0x2)
0xF44E7032,	//0x033c		VoC_lw16i_short(WRAP2,0x9,IN_PARALLEL)	|	VoC_lw16i_short(INC2,0x1,DEFAULT)
0x25CD0713,	//0x033e		VoC_add16_rd(REG3,REG2,0x25cd)
0xF3FF713F,	//0x0340		VoC_lw16i_short(INC3,0xffffffff,IN_PARALLEL)	|	VoC_lw16i_short(WRAP3,0x9,DEFAULT)
0x01F90A84,	//0x0342		VoC_lw16i(REG4,0x1f9)
0xFF46413B,	//0x0344		VoC_lw32z(RL6,IN_PARALLEL)	|	VoC_add16_rr(REG3,REG4,REG7,DEFAULT)
0x01FF1603,	//0x0346		VoC_and16_ri(REG3,0x1ff)
0xE39540D3,	//0x0348		VoC_lw16i_short(REG5,0x39,IN_PARALLEL)	|	VoC_add16_rr(REG3,REG3,REG2,DEFAULT)
0x03E40A84,	//0x034a		VoC_lw16i(REG4,0x3e4)
0xDFC74106,	//0x034c		VoC_push16(REG7,IN_PARALLEL)	|	VoC_add16_rr(REG6,REG4,REG0,DEFAULT)
0x274A0712,	//0x034e		VoC_add16_rd(REG2,REG2,0x274a)
0xC0BA717A,	//0x0350		VoC_add16_rr(REG2,REG2,REG7,IN_PARALLEL)	|	VoC_lw16i_short(FORMATX,0xb,DEFAULT)
0x03702C09,	//0x0352		VoC_loop_i(0x1,0x4)
0x03622E28,	//0x0354		VoC_loop_r(0,REG5)
0xD8A7598A,	//0x0356		VoC_lw16inc_p(REG7,REG2,IN_PARALLEL)	|	VoC_lw32_p(REG45,REG1,DEFAULT)
0xCDED790C,	//0x0358		VoC_multf32_rr(ACC1,REG7,REG5,IN_PARALLEL)	|	VoC_shru16_ri(REG4,0x1,DEFAULT)
0xCEA758B7,	//0x035a		VoC_macX_rr(REG4,REG7,IN_PARALLEL)	|	VoC_lw16inc_p(REG7,REG3,DEFAULT)
0x790C978A,	//0x035c		VoC_shru16_ri(REG4,0x1,DEFAULT)	|	VoC_sub32inc_rp(REG45,RL6,REG1,DEFAULT)
0xCE67CDEC,	//0x035e		VoC_macX_rr(REG4,REG7,DEFAULT)	|	VoC_multf32_rr(ACC0,REG7,REG5,IN_PARALLEL)
0xF044DDC5,	//0x0360		VoC_lw16i_short(REG4,0x2,DEFAULT)	|	VoC_sw32inc_p(ACC1,REG0,DEFAULT)
		//0x0362		VoC_endloop0
0xC3A65DB4,	//0x0362		VoC_sub16_rr(REG6,REG6,REG4,IN_PARALLEL)	|	VoC_sw32_p(ACC0,REG6,DEFAULT)
0xD8A7598A,	//0x0364		VoC_lw16inc_p(REG7,REG2,IN_PARALLEL)	|	VoC_lw32_p(REG45,REG1,DEFAULT)
0xCDED790C,	//0x0366		VoC_multf32_rr(ACC1,REG7,REG5,IN_PARALLEL)	|	VoC_shru16_ri(REG4,0x1,DEFAULT)
0xCEA758B7,	//0x0368		VoC_macX_rr(REG4,REG7,IN_PARALLEL)	|	VoC_lw16inc_p(REG7,REG3,DEFAULT)
0xCDEC5E08,	//0x036a		VoC_multf32_rr(ACC0,REG7,REG5,IN_PARALLEL)	|	VoC_inc_p(REG1,DEFAULT)
0xDDC5CE67,	//0x036c		VoC_sw32inc_p(ACC1,REG0,DEFAULT)	|	VoC_macX_rr(REG4,REG7,DEFAULT)
0xE3F57044,	//0x036e		VoC_lw16i_short(REG5,0x3f,IN_PARALLEL)	|	VoC_lw16i_short(REG4,0x2,DEFAULT)
		//0x0370		VoC_endloop1
0xC3A65DB4,	//0x0370		VoC_sub16_rr(REG6,REG6,REG4,IN_PARALLEL)	|	VoC_sw32_p(ACC0,REG6,DEFAULT)
0x01E00A84,	//0x0372		VoC_lw16i(REG4,0x1e0)
0xF4065F83,	//0x0374		VoC_lw16i_short(WRAP2,0x0,IN_PARALLEL)	|	VoC_pop16(REG3,DEFAULT)
0xDF86411C,	//0x0376		VoC_pop16(REG6,IN_PARALLEL)	|	VoC_add16_rr(REG4,REG4,REG3,DEFAULT)
0x25CD2804,	//0x0378		VoC_and16_rd(REG4,0x25cd)
0x112A1A00,	//0x037a		VoC_lw16i_set_inc(REG0,0x112a,0x40)
0x152A1809,	//0x037c		VoC_lw16i_set_inc(REG1,0x152a,0x2)
0xF6035C64,	//0x037e		VoC_movreg16(REG3,REG0,IN_PARALLEL)	|	VoC_sw16_p(REG4,REG6,DEFAULT)
0x0000180A,	//0x0380		VoC_lw16i_set_inc(REG2,0x0,0x2)
0x038A2C81,	//0x0382		VoC_loop_i(0x1,0x40)
0xFF446903,	//0x0384		VoC_lw32z(ACC0,IN_PARALLEL)	|	VoC_loop_i_short(0x8,DEFAULT)
0xDE009304,	//0x0386		VoC_inc_p(REG0,DEFAULT)	|	VoC_add32inc_rp(ACC0,ACC0,REG0,DEFAULT)
		//0x0387		VoC_endloop0
0xF6605E10,	//0x0388		VoC_movreg16(REG0,REG3,IN_PARALLEL)	|	VoC_inc_p(REG2,DEFAULT)
		//0x038a		VoC_endloop1
0xC0105DCC,	//0x038a		VoC_add16_rr(REG0,REG0,REG2,IN_PARALLEL)	|	VoC_sw32inc_p(ACC0,REG1,DEFAULT)
0x08000A87,	//0x038c		VoC_lw16i(REG7,0x800)
0xF45A5F83,	//0x038e		VoC_lw16i_short(FORMATX,0xb,IN_PARALLEL)	|	VoC_pop16(REG3,DEFAULT)
0x152A1808,	//0x0390		VoC_lw16i_set_inc(REG0,0x152a,0x2)
0x5CAC1809,	//0x0392		VoC_lw16i_set_inc(REG1,0x5cac,0x2)
0x209C0702,	//0x0394		VoC_add16_rd(REG2,REG0,0x209c)
0x276C071C,	//0x0396		VoC_add16_rd(REG4,REG3,0x276c)
0xF68C77D2,	//0x0398		VoC_movreg16(RL6_LO,REG4,IN_PARALLEL)	|	VoC_lw16i_short(INC2,0xfffffffe,DEFAULT)
0xF4075FC7,	//0x039a		VoC_lw16i_short(WRAP3,0x0,IN_PARALLEL)	|	VoC_push16(REG7,DEFAULT)
0x03D82C21,	//0x039c		VoC_loop_i(0x1,0x10)
0xFF447F45,	//0x039e		VoC_lw32z(ACC0,IN_PARALLEL)	|	VoC_lw32z(ACC1,DEFAULT)
0xF5E159C3,	//0x03a0		VoC_lw16i_short(FORMAT32,0xfffffffc,IN_PARALLEL)	|	VoC_lw32inc_p(REG67,REG0,DEFAULT)
0xF00B6910,	//0x03a2		VoC_lw16i_short(INC3,0x2,IN_PARALLEL)	|	VoC_loop_i_short(0x8,DEFAULT)
0xD9CA12D3,	//0x03a4		VoC_lw32inc_p(REG45,REG1,IN_PARALLEL)	|	VoC_add32inc_rp(REG67,REG67,REG2,DEFAULT)
0xCE2F790C,	//0x03a6		VoC_mac32_rr(REG5,REG7,IN_PARALLEL)	|	VoC_shru16_ri(REG4,0x1,DEFAULT)
0xCEA7790E,	//0x03a8		VoC_macX_rr(REG4,REG7,IN_PARALLEL)	|	VoC_shru16_ri(REG6,0x1,DEFAULT)
0xCEAE59C3,	//0x03aa		VoC_macX_rr(REG5,REG6,IN_PARALLEL)	|	VoC_lw32inc_p(REG67,REG0,DEFAULT)
0xD9CA12D3,	//0x03ac		VoC_lw32inc_p(REG45,REG1,IN_PARALLEL)	|	VoC_add32inc_rp(REG67,REG67,REG2,DEFAULT)
0xF90C4E2F,	//0x03ae		VoC_shru16_ri(REG4,0x1,IN_PARALLEL)	|	VoC_mac32_rr(REG5,REG7,DEFAULT)
0xF90E4E67,	//0x03b0		VoC_shru16_ri(REG6,0x1,IN_PARALLEL)	|	VoC_macX_rr(REG4,REG7,DEFAULT)
		//0x03b2		VoC_endloop0
0xD9C34E6E,	//0x03b2		VoC_lw32inc_p(REG67,REG0,IN_PARALLEL)	|	VoC_macX_rr(REG5,REG6,DEFAULT)
0x790ED615,	//0x03b4		VoC_shru16_ri(REG6,0x1,DEFAULT)	|	VoC_lw16_sd(REG5,0x0,DEFAULT)
0x0700CE3D,	//0x03b6		VoC_add16_rd(REG0,REG0,0x2738)(lo)	|	VoC_mac32_rr(REG7,REG5,IN_PARALLEL)
0x07022738,	//0x03b8		VoC_add16_rd(REG2,REG0,0x2767)(lo)	|	VoC_add16_rd(REG0,REG0,0x2738)(hi)
0x69112767,	//0x03ba		VoC_loop_i_short(0x8,DEFAULT)	|	VoC_add16_rd(REG2,REG0,0x2767)(hi)
0xD9C3CEB5,	//0x03bc		VoC_lw32inc_p(REG67,REG0,DEFAULT)	|	VoC_macX_rr(REG6,REG5,IN_PARALLEL)
0xD9CA16D3,	//0x03be		VoC_lw32inc_p(REG45,REG1,IN_PARALLEL)	|	VoC_sub32inc_rp(REG67,REG67,REG2,DEFAULT)
0xF90C4E2F,	//0x03c0		VoC_shru16_ri(REG4,0x1,IN_PARALLEL)	|	VoC_mac32_rr(REG5,REG7,DEFAULT)
0xF90E4E67,	//0x03c2		VoC_shru16_ri(REG6,0x1,IN_PARALLEL)	|	VoC_macX_rr(REG4,REG7,DEFAULT)
0xD9C34E6E,	//0x03c4		VoC_lw32inc_p(REG67,REG0,IN_PARALLEL)	|	VoC_macX_rr(REG5,REG6,DEFAULT)
0xD9CA16D3,	//0x03c6		VoC_lw32inc_p(REG45,REG1,IN_PARALLEL)	|	VoC_sub32inc_rp(REG67,REG67,REG2,DEFAULT)
0xCE2F790C,	//0x03c8		VoC_mac32_rr(REG5,REG7,IN_PARALLEL)	|	VoC_shru16_ri(REG4,0x1,DEFAULT)
0xCEA7790E,	//0x03ca		VoC_macX_rr(REG4,REG7,IN_PARALLEL)	|	VoC_shru16_ri(REG6,0x1,DEFAULT)
		//0x03cc		VoC_endloop0
0xCEAE7007,	//0x03cc		VoC_macX_rr(REG5,REG6,IN_PARALLEL)	|	VoC_lw16i_short(REG7,0x0,DEFAULT)
0x152A1808,	//0x03ce		VoC_lw16i_set_inc(REG0,0x152a,0x2)
0xCB654964,	//0x03d0		VoC_sub32_rr(ACC1,ACC1,ACC0,IN_PARALLEL)	|	VoC_add32_rr(ACC0,ACC1,ACC0,DEFAULT)
0xF7827044,	//0x03d2		VoC_movreg16(REG2,RL6_LO,IN_PARALLEL)	|	VoC_lw16i_short(REG4,0x2,DEFAULT)
0xE4074261,	//0x03d4		VoC_lw16i_short(REG7,0x40,IN_PARALLEL)	|	VoC_sub16_rr(REG1,REG1,REG4,DEFAULT)
0xF64C5DD5,	//0x03d6		VoC_movreg16(RL6_LO,REG2,IN_PARALLEL)	|	VoC_sw32inc_p(ACC1,REG2,DEFAULT)
		//0x03d8		VoC_endloop1
0xDDDC403A,	//0x03d8		VoC_sw32inc_p(ACC0,REG3,IN_PARALLEL)	|	VoC_add16_rr(REG2,REG0,REG7,DEFAULT)
0xE580DF87,	//0x03da		VoC_return	|	VoC_pop16(REG7,DEFAULT)
		//0x03dc		cii_mdct18
0xFF445FC3,	//0x03dc		VoC_lw32z(ACC0,IN_PARALLEL)	|	VoC_push16(REG3,DEFAULT)
0x62800A80,	//0x03de		VoC_lw16i(REG0,0x6280)
0x15720A81,	//0x03e0		VoC_lw16i(REG1,0x1572)
0x62A40A82,	//0x03e2		VoC_lw16i(REG2,0x62a4)
0xF45A7799,	//0x03e4		VoC_lw16i_short(FORMATX,0xb,IN_PARALLEL)	|	VoC_lw16i_short(FORMAT32,0xfffffffc,DEFAULT)
0x15A81584,	//0x03e6		VoC_sw32_d(ACC0,0x15a8)
0x41281584,	//0x03e8		VoC_sw32_d(ACC0,0x4128)
0x2C0AF003,	//0x03ea		VoC_loop_i(0x0,0x5)(lo)	|	VoC_lw16i_short(REG3,0x0,DEFAULT)
0xC01C0446,	//0x03ec		VoC_add16_rr(REG4,REG0,REG3,DEFAULT)	|	VoC_loop_i(0x0,0x5)(hi)
0xD9A2C05E,	//0x03ee		VoC_lw32_p(REG45,REG4,DEFAULT)	|	VoC_add16_rr(REG6,REG1,REG3,DEFAULT)
0xF90C59B3,	//0x03f0		VoC_shru16_ri(REG4,0x1,IN_PARALLEL)	|	VoC_lw32_p(REG67,REG6,DEFAULT)
0xCD7C790E,	//0x03f2		VoC_multf32_rr(ACC0,REG5,REG7,IN_PARALLEL)	|	VoC_shru16_ri(REG6,0x1,DEFAULT)
0xE2274E67,	//0x03f4		VoC_lw16i_short(REG7,0x22,IN_PARALLEL)	|	VoC_macX_rr(REG4,REG7,DEFAULT)
0xC3DC4E6E,	//0x03f6		VoC_sub16_rr(REG4,REG7,REG3,IN_PARALLEL)	|	VoC_macX_rr(REG5,REG6,DEFAULT)
0xC0664024,	//0x03f8		VoC_add16_rr(REG6,REG1,REG4,IN_PARALLEL)	|	VoC_add16_rr(REG4,REG0,REG4,DEFAULT)
0xD9A2FF26,	//0x03fa		VoC_lw32_p(REG45,REG4,DEFAULT)	|	VoC_movreg32(RL6,ACC0,DEFAULT)
0xF90C59B3,	//0x03fc		VoC_shru16_ri(REG4,0x1,IN_PARALLEL)	|	VoC_lw32_p(REG67,REG6,DEFAULT)
0xCD7C790E,	//0x03fe		VoC_multf32_rr(ACC0,REG5,REG7,IN_PARALLEL)	|	VoC_shru16_ri(REG6,0x1,DEFAULT)
0xC09C4E67,	//0x0400		VoC_add16_rr(REG4,REG2,REG3,IN_PARALLEL)	|	VoC_macX_rr(REG4,REG7,DEFAULT)
0xD9A2CE6E,	//0x0402		VoC_lw32_p(REG45,REG4,DEFAULT)	|	VoC_macX_rr(REG5,REG6,DEFAULT)
0xCBA349A6,	//0x0404		VoC_sub32_rr(REG67,RL6,ACC0,IN_PARALLEL)	|	VoC_add32_rr(RL6,RL6,ACC0,DEFAULT)
0xF90C4D7C,	//0x0406		VoC_shru16_ri(REG4,0x1,IN_PARALLEL)	|	VoC_multf32_rr(ACC0,REG5,REG7,DEFAULT)
0xF90E4E67,	//0x0408		VoC_shru16_ri(REG6,0x1,IN_PARALLEL)	|	VoC_macX_rr(REG4,REG7,DEFAULT)
0x442BCE6E,	//0x040a		VoC_bne16_rd(LABLE_COMPILE_1,REG3,0x2730)(lo)	|	VoC_macX_rr(REG5,REG6,DEFAULT)
0x2B002730,	//0x040c		VoC_jump_lg(LABEL_MDCT)(lo)	|	VoC_bne16_rd(LABLE_COMPILE_1,REG3,0x2730)(hi)
0xFFC00448,	//0x040e		VoC_NAD	|	VoC_jump_lg(LABEL_MDCT)(hi)
		//0x0410		LABLE_COMPILE_1
0x27310B1C,	//0x0410		VoC_sub16_dr(REG4,0x2731,REG3)
0xC0664024,	//0x0412		VoC_add16_rr(REG6,REG1,REG4,IN_PARALLEL)	|	VoC_add16_rr(REG4,REG0,REG4,DEFAULT)
0xD9A2FF27,	//0x0414		VoC_lw32_p(REG45,REG4,DEFAULT)	|	VoC_movreg32(RL7,ACC0,DEFAULT)
0xF90C59B3,	//0x0416		VoC_shru16_ri(REG4,0x1,IN_PARALLEL)	|	VoC_lw32_p(REG67,REG6,DEFAULT)
0xCD7C790E,	//0x0418		VoC_multf32_rr(ACC0,REG5,REG7,IN_PARALLEL)	|	VoC_shru16_ri(REG6,0x1,DEFAULT)
0xE1274E67,	//0x041a		VoC_lw16i_short(REG7,0x12,IN_PARALLEL)	|	VoC_macX_rr(REG4,REG7,DEFAULT)
0xC0FC4E6E,	//0x041c		VoC_add16_rr(REG4,REG3,REG7,IN_PARALLEL)	|	VoC_macX_rr(REG5,REG6,DEFAULT)
0xC0664024,	//0x041e		VoC_add16_rr(REG6,REG1,REG4,IN_PARALLEL)	|	VoC_add16_rr(REG4,REG0,REG4,DEFAULT)
0xD9A2FF25,	//0x0420		VoC_lw32_p(REG45,REG4,DEFAULT)	|	VoC_movreg32(ACC1,ACC0,DEFAULT)
0xF90C59B3,	//0x0422		VoC_shru16_ri(REG4,0x1,IN_PARALLEL)	|	VoC_lw32_p(REG67,REG6,DEFAULT)
0xCD7C790E,	//0x0424		VoC_multf32_rr(ACC0,REG5,REG7,IN_PARALLEL)	|	VoC_shru16_ri(REG6,0x1,DEFAULT)
0xE1074E67,	//0x0426		VoC_lw16i_short(REG7,0x10,IN_PARALLEL)	|	VoC_macX_rr(REG4,REG7,DEFAULT)
0xC3DC4E6E,	//0x0428		VoC_sub16_rr(REG4,REG7,REG3,IN_PARALLEL)	|	VoC_macX_rr(REG5,REG6,DEFAULT)
0x4965C0A4,	//0x042a		VoC_add32_rr(ACC1,ACC1,ACC0,DEFAULT)	|	VoC_add16_rr(REG4,REG2,REG4,DEFAULT)
0x59A2CB63,	//0x042c		VoC_lw32_p(REG45,REG4,DEFAULT)	|	VoC_sub32_rr(REG67,ACC1,ACC0,IN_PARALLEL)
0x790CF90E,	//0x042e		VoC_shru16_ri(REG4,0x1,DEFAULT)	|	VoC_shru16_ri(REG6,0x1,IN_PARALLEL)
0xCE67CD7C,	//0x0430		VoC_macX_rr(REG4,REG7,DEFAULT)	|	VoC_multf32_rr(ACC0,REG5,REG7,IN_PARALLEL)
0x0A87CE6E,	//0x0432		VoC_lw16i(REG7,0x1596)(lo)	|	VoC_macX_rr(REG5,REG6,DEFAULT)
0x49AA1596,	//0x0434		VoC_add32_rr(REG45,RL6,ACC1,DEFAULT)	|	VoC_lw16i(REG7,0x1596)(hi)
0xF146C1DF,	//0x0436		VoC_lw16i_short(REG6,0xa,DEFAULT)	|	VoC_add16_rr(REG7,REG7,REG3,IN_PARALLEL)
0xC1F75DBA,	//0x0438		VoC_add16_rr(REG7,REG7,REG6,IN_PARALLEL)	|	VoC_sw32_p(REG45,REG7,DEFAULT)
0x0A86CBAA,	//0x043a		VoC_lw16i(REG6,0x4116)(lo)	|	VoC_sub32_rr(REG45,RL6,ACC1,DEFAULT)
0x5DBA4116,	//0x043c		VoC_sw32_p(REG45,REG7,DEFAULT)	|	VoC_lw16i(REG6,0x4116)(hi)
0x49E2E0A7,	//0x043e		VoC_add32_rr(REG45,RL7,ACC0,DEFAULT)	|	VoC_lw16i_short(REG7,0xa,IN_PARALLEL)
0x4BE5C19E,	//0x0440		VoC_sub32_rr(ACC1,RL7,ACC0,DEFAULT)	|	VoC_add16_rr(REG6,REG6,REG3,IN_PARALLEL)
0xDDB2C1BF,	//0x0442		VoC_sw32_p(REG45,REG6,DEFAULT)	|	VoC_add16_rr(REG7,REG6,REG7,IN_PARALLEL)
0x2733071B,	//0x0444		VoC_add16_rd(REG3,REG3,0x2733)
		//0x0446		VoC_endloop0
0xFFC05DBD,	//0x0446		VoC_NAD(IN_PARALLEL)	|	VoC_sw32_p(ACC1,REG7,DEFAULT)
		//0x0448		LABEL_MDCT
0x15961808,	//0x0448		VoC_lw16i_set_inc(REG0,0x1596,0x2)
0x41161809,	//0x044a		VoC_lw16i_set_inc(REG1,0x4116,0x2)
0xC05D401C,	//0x044c		VoC_add16_rr(REG5,REG1,REG3,IN_PARALLEL)	|	VoC_add16_rr(REG4,REG0,REG3,DEFAULT)
0x26DA180A,	//0x044e		VoC_lw16i_set_inc(REG2,0x26da,0x2)
0xFF455DA6,	//0x0450		VoC_lw32z(ACC1,IN_PARALLEL)	|	VoC_sw32_p(RL6,REG4,DEFAULT)
0xFF445DAC,	//0x0452		VoC_lw32z(ACC0,IN_PARALLEL)	|	VoC_sw32_p(ACC0,REG5,DEFAULT)
0xF00B5F83,	//0x0454		VoC_lw16i_short(INC3,0x2,IN_PARALLEL)	|	VoC_pop16(REG3,DEFAULT)
0xE8A1FFC0,	//0x0456		VoC_loop_i_short(0x5,DEFAULT)	|	VoC_NAD
		//0x0458		VoC_endloop0
0x934D1304,	//0x0458		VoC_add32inc_rp(ACC1,ACC1,REG1,IN_PARALLEL)	|	VoC_add32inc_rp(ACC0,ACC0,REG0,DEFAULT)
0xE0847A0C,	//0x045a		VoC_lw16i_short(REG4,0x8,IN_PARALLEL)	|	VoC_shr32_ri(ACC0,0x1,DEFAULT)
0xC0A27A0D,	//0x045c		VoC_add16_rr(REG2,REG2,REG4,IN_PARALLEL)	|	VoC_shr32_ri(ACC1,0x1,DEFAULT)
0xDD9DDDDC,	//0x045e		VoC_sw32_p(ACC1,REG3,DEFAULT)	|	VoC_sw32inc_p(ACC0,REG3,DEFAULT)
0x04822C05,	//0x0460		VoC_loop_i(0x1,0x2)
0xFF457F46,	//0x0462		VoC_lw32z(ACC1,IN_PARALLEL)	|	VoC_lw32z(RL6,DEFAULT)
0xE88FFFC0,	//0x0464		VoC_loop_i_short(0x4,DEFAULT)	|	VoC_NAD
0xD9CB59D2,	//0x0466		VoC_lw32inc_p(REG67,REG1,IN_PARALLEL)	|	VoC_lw32inc_p(REG45,REG2,DEFAULT)
0xF90C4D7C,	//0x0468		VoC_shru16_ri(REG4,0x1,IN_PARALLEL)	|	VoC_multf32_rr(ACC0,REG5,REG7,DEFAULT)
0xF90E4E67,	//0x046a		VoC_shru16_ri(REG6,0x1,IN_PARALLEL)	|	VoC_macX_rr(REG4,REG7,DEFAULT)
0xD9C34E6E,	//0x046c		VoC_lw32inc_p(REG67,REG0,IN_PARALLEL)	|	VoC_macX_rr(REG5,REG6,DEFAULT)
0x49A6F90E,	//0x046e		VoC_add32_rr(RL6,RL6,ACC0,DEFAULT)	|	VoC_shru16_ri(REG6,0x1,DEFAULT)
0xCE67CD7C,	//0x0470		VoC_macX_rr(REG4,REG7,DEFAULT)	|	VoC_multf32_rr(ACC0,REG5,REG7,IN_PARALLEL)
0xFFC0CE6E,	//0x0472		VoC_NOP	|	VoC_macX_rr(REG5,REG6,DEFAULT)
		//0x0474		VoC_endloop0
0x079CC965,	//0x0474		VoC_sub16_rd(REG4,REG3,0x2733)(lo)	|	VoC_add32_rr(ACC1,ACC1,ACC0,DEFAULT)
0xD99C2733,	//0x0476		VoC_lw32_p(ACC0,REG3,DEFAULT)	|	VoC_sub16_rd(REG4,REG3,0x2733)(hi)
0x95244BA6,	//0x0478		VoC_sub32_rp(ACC0,ACC0,REG4,IN_PARALLEL)	|	VoC_sub32_rr(RL6,RL6,ACC0,DEFAULT)
0xDDDCCB65,	//0x047a		VoC_sw32inc_p(ACC0,REG3,DEFAULT)	|	VoC_sub32_rr(ACC1,ACC1,ACC0,DEFAULT)
0x958E9545,	//0x047c		VoC_sub32_rp(RL6,RL6,REG1,DEFAULT)	|	VoC_sub32_rp(ACC1,ACC1,REG0,DEFAULT)
0xDD9EDDDD,	//0x047e		VoC_sw32_p(RL6,REG3,DEFAULT)	|	VoC_sw32inc_p(ACC1,REG3,DEFAULT)
0x15960A80,	//0x0480		VoC_lw16i(REG0,0x1596)
		//0x0482		VoC_endloop1
0x41160A81,	//0x0482		VoC_lw16i(REG1,0x4116)
0x27350700,	//0x0484		VoC_add16_rd(REG0,REG0,0x2735)
0x27350709,	//0x0486		VoC_add16_rd(REG1,REG1,0x2735)
0x59C6D992,	//0x0488		VoC_lw32inc_p(RL6,REG0,DEFAULT)	|	VoC_lw32_p(REG45,REG2,DEFAULT)
0x5E00D9CF,	//0x048a		VoC_inc_p(REG0,DEFAULT)	|	VoC_lw32inc_p(RL7,REG1,IN_PARALLEL)
0x1786DE08,	//0x048c		VoC_sub32inc_rp(RL6,RL6,REG0,DEFAULT)	|	VoC_inc_p(REG1,IN_PARALLEL)
0x178397CF,	//0x048e		VoC_sub32inc_rp(REG67,RL6,REG0,DEFAULT)	|	VoC_sub32inc_rp(RL7,RL7,REG1,IN_PARALLEL)
0x790C97CF,	//0x0490		VoC_shru16_ri(REG4,0x1,DEFAULT)	|	VoC_sub32inc_rp(RL7,RL7,REG1,IN_PARALLEL)
0x4E67CD7C,	//0x0492		VoC_macX_rr(REG4,REG7,DEFAULT)	|	VoC_multf32_rr(ACC0,REG5,REG7,IN_PARALLEL)
0x4E6EF90E,	//0x0494		VoC_macX_rr(REG5,REG6,DEFAULT)	|	VoC_shru16_ri(REG6,0x1,IN_PARALLEL)
0xF90EFF3B,	//0x0496		VoC_shru16_ri(REG6,0x1,DEFAULT)	|	VoC_movreg32(REG67,RL7,IN_PARALLEL)
0xCD7C7F26,	//0x0498		VoC_multf32_rr(ACC0,REG5,REG7,IN_PARALLEL)	|	VoC_movreg32(RL6,ACC0,DEFAULT)
0xCE6ECE67,	//0x049a		VoC_macX_rr(REG5,REG6,DEFAULT)	|	VoC_macX_rr(REG4,REG7,DEFAULT)
0x2733079C,	//0x049c		VoC_sub16_rd(REG4,REG3,0x2733)
0xD99F951C,	//0x049e		VoC_lw32_p(RL7,REG3,DEFAULT)	|	VoC_sub32_rp(ACC0,ACC0,REG3,DEFAULT)
0xCBBE95E7,	//0x04a0		VoC_sub32_rr(RL6,RL6,RL7,DEFAULT)	|	VoC_sub32_rp(RL7,RL7,REG4,DEFAULT)
0x0712DDDF,	//0x04a2		VoC_add16_rd(REG2,REG2,0x2730)(lo)	|	VoC_sw32inc_p(RL7,REG3,DEFAULT)
0xDDDE2730,	//0x04a4		VoC_sw32inc_p(RL6,REG3,DEFAULT)	|	VoC_add16_rd(REG2,REG2,0x2730)(hi)
0x1808DD9C,	//0x04a6		VoC_lw16i_set_inc(REG0,0x1596,0x2)(lo)	|	VoC_sw32_p(ACC0,REG3,DEFAULT)
0x18091596,	//0x04a8		VoC_lw16i_set_inc(REG1,0x4116,0x2)(lo)	|	VoC_lw16i_set_inc(REG0,0x1596,0x2)(hi)
0xFFC04116,	//0x04aa		VoC_NAD	|	VoC_lw16i_set_inc(REG1,0x4116,0x2)(hi)
0x04CB2C05,	//0x04ac		VoC_loop_i(0x1,0x2)
0xFF457F46,	//0x04ae		VoC_lw32z(ACC1,IN_PARALLEL)	|	VoC_lw32z(RL6,DEFAULT)
0xE88FFFC0,	//0x04b0		VoC_loop_i_short(0x4,DEFAULT)	|	VoC_NAD
0xD9CB59D2,	//0x04b2		VoC_lw32inc_p(REG67,REG1,IN_PARALLEL)	|	VoC_lw32inc_p(REG45,REG2,DEFAULT)
0xCD7C790C,	//0x04b4		VoC_multf32_rr(ACC0,REG5,REG7,IN_PARALLEL)	|	VoC_shru16_ri(REG4,0x1,DEFAULT)
0xF90E4E67,	//0x04b6		VoC_shru16_ri(REG6,0x1,IN_PARALLEL)	|	VoC_macX_rr(REG4,REG7,DEFAULT)
0xD9C34E6E,	//0x04b8		VoC_lw32inc_p(REG67,REG0,IN_PARALLEL)	|	VoC_macX_rr(REG5,REG6,DEFAULT)
0x4D7CF90E,	//0x04ba		VoC_multf32_rr(ACC0,REG5,REG7,DEFAULT)	|	VoC_shru16_ri(REG6,0x1,DEFAULT)
0xCE67C9A6,	//0x04bc		VoC_macX_rr(REG4,REG7,DEFAULT)	|	VoC_add32_rr(RL6,RL6,ACC0,IN_PARALLEL)
0xFFC0CE6E,	//0x04be		VoC_NOP	|	VoC_macX_rr(REG5,REG6,DEFAULT)
		//0x04c0		VoC_endloop0
0x079CC965,	//0x04c0		VoC_sub16_rd(REG4,REG3,0x2733)(lo)	|	VoC_add32_rr(ACC1,ACC1,ACC0,DEFAULT)
0xD99C2733,	//0x04c2		VoC_lw32_p(ACC0,REG3,DEFAULT)	|	VoC_sub16_rd(REG4,REG3,0x2733)(hi)
0x95244BA6,	//0x04c4		VoC_sub32_rp(ACC0,ACC0,REG4,IN_PARALLEL)	|	VoC_sub32_rr(RL6,RL6,ACC0,DEFAULT)
0xDDDCCB65,	//0x04c6		VoC_sw32inc_p(ACC0,REG3,DEFAULT)	|	VoC_sub32_rr(ACC1,ACC1,ACC0,DEFAULT)
0x938E9345,	//0x04c8		VoC_add32inc_rp(RL6,RL6,REG1,DEFAULT)	|	VoC_add32inc_rp(ACC1,ACC1,REG0,DEFAULT)
0xDD9EDDDD,	//0x04ca		VoC_sw32_p(RL6,REG3,DEFAULT)	|	VoC_sw32inc_p(ACC1,REG3,DEFAULT)
		//0x04cb		VoC_endloop1
0x15960A80,	//0x04cc		VoC_lw16i(REG0,0x1596)
0x41160A81,	//0x04ce		VoC_lw16i(REG1,0x4116)
0xD9CDD9C4,	//0x04d0		VoC_lw32inc_p(ACC1,REG1,DEFAULT)	|	VoC_lw32inc_p(ACC0,REG0,DEFAULT)
0xD9CB59C2,	//0x04d2		VoC_lw32inc_p(REG67,REG1,IN_PARALLEL)	|	VoC_lw32inc_p(REG45,REG0,DEFAULT)
0x934D1304,	//0x04d4		VoC_add32inc_rp(ACC1,ACC1,REG1,IN_PARALLEL)	|	VoC_add32inc_rp(ACC0,ACC0,REG0,DEFAULT)
0x934D1304,	//0x04d6		VoC_add32inc_rp(ACC1,ACC1,REG1,IN_PARALLEL)	|	VoC_add32inc_rp(ACC0,ACC0,REG0,DEFAULT)
0xFA0CE102,	//0x04d8		VoC_shr32_ri(ACC0,0x1,DEFAULT)	|	VoC_movreg16(REG2,ACC0_LO,DEFAULT)
0x04E233C4,	//0x04da		VoC_bnltz32_r(LABEL_ADD1,ACC0)
0x00011602,	//0x04dc		VoC_and16_ri(REG2,0x1)
0x04E23182,	//0x04de		VoC_bez16_r(LABEL_ADD1,REG2)
0x277E0924,	//0x04e0		VoC_add32_rd(ACC0,ACC0,0x277e)
		//0x04e2		LABEL_ADD1
0xFA0DE142,	//0x04e2		VoC_shr32_ri(ACC1,0x1,DEFAULT)	|	VoC_movreg16(REG2,ACC1_LO,DEFAULT)
0x04EC33C5,	//0x04e4		VoC_bnltz32_r(LABEL_ADD2,ACC1)
0x00011602,	//0x04e6		VoC_and16_ri(REG2,0x1)
0x04EC3182,	//0x04e8		VoC_bez16_r(LABEL_ADD2,REG2)
0x277E092D,	//0x04ea		VoC_add32_rd(ACC1,ACC1,0x277e)
		//0x04ec		LABEL_ADD2
0x974D1704,	//0x04ec		VoC_sub32inc_rp(ACC1,ACC1,REG1,IN_PARALLEL)	|	VoC_sub32inc_rp(ACC0,ACC0,REG0,DEFAULT)
0xCB5D4B14,	//0x04ee		VoC_sub32_rr(ACC1,ACC1,REG67,IN_PARALLEL)	|	VoC_sub32_rr(ACC0,ACC0,REG45,DEFAULT)
0x079C955D,	//0x04f0		VoC_sub16_rd(REG4,REG3,0x2733)(lo)	|	VoC_sub32_rp(ACC1,ACC1,REG3,DEFAULT)
0xD99E2733,	//0x04f2		VoC_lw32_p(RL6,REG3,DEFAULT)	|	VoC_sub16_rd(REG4,REG3,0x2733)(hi)
0xCB3495A6,	//0x04f4		VoC_sub32_rr(ACC0,ACC0,RL6,DEFAULT)	|	VoC_sub32_rp(RL6,RL6,REG4,DEFAULT)
0xDDDCDDDE,	//0x04f6		VoC_sw32inc_p(ACC0,REG3,DEFAULT)	|	VoC_sw32inc_p(RL6,REG3,DEFAULT)
0x0A82DD9D,	//0x04f8		VoC_lw16i(REG2,0x26da)(lo)	|	VoC_sw32_p(ACC1,REG3,DEFAULT)
0x071226DA,	//0x04fa		VoC_add16_rd(REG2,REG2,0x2751)(lo)	|	VoC_lw16i(REG2,0x26da)(hi)
0xFFC02751,	//0x04fc		VoC_NAD	|	VoC_add16_rd(REG2,REG2,0x2751)(hi)
0x05202C05,	//0x04fe		VoC_loop_i(0x1,0x2)
0xFF457F46,	//0x0500		VoC_lw32z(ACC1,IN_PARALLEL)	|	VoC_lw32z(RL6,DEFAULT)
0xE88FFFC0,	//0x0502		VoC_loop_i_short(0x4,DEFAULT)	|	VoC_NAD
0xD9CB59D2,	//0x0504		VoC_lw32inc_p(REG67,REG1,IN_PARALLEL)	|	VoC_lw32inc_p(REG45,REG2,DEFAULT)
0xCD7C790C,	//0x0506		VoC_multf32_rr(ACC0,REG5,REG7,IN_PARALLEL)	|	VoC_shru16_ri(REG4,0x1,DEFAULT)
0xF90E4E67,	//0x0508		VoC_shru16_ri(REG6,0x1,IN_PARALLEL)	|	VoC_macX_rr(REG4,REG7,DEFAULT)
0xD9C34E6E,	//0x050a		VoC_lw32inc_p(REG67,REG0,IN_PARALLEL)	|	VoC_macX_rr(REG5,REG6,DEFAULT)
0x4D7CF90E,	//0x050c		VoC_multf32_rr(ACC0,REG5,REG7,DEFAULT)	|	VoC_shru16_ri(REG6,0x1,DEFAULT)
0xCE67C9A6,	//0x050e		VoC_macX_rr(REG4,REG7,DEFAULT)	|	VoC_add32_rr(RL6,RL6,ACC0,IN_PARALLEL)
0xFFC0CE6E,	//0x0510		VoC_NOP	|	VoC_macX_rr(REG5,REG6,DEFAULT)
		//0x0512		VoC_endloop0
0x079CC965,	//0x0512		VoC_sub16_rd(REG4,REG3,0x2733)(lo)	|	VoC_add32_rr(ACC1,ACC1,ACC0,DEFAULT)
0xD99C2733,	//0x0514		VoC_lw32_p(ACC0,REG3,DEFAULT)	|	VoC_sub16_rd(REG4,REG3,0x2733)(hi)
0x95244BA6,	//0x0516		VoC_sub32_rp(ACC0,ACC0,REG4,IN_PARALLEL)	|	VoC_sub32_rr(RL6,RL6,ACC0,DEFAULT)
0xDDDCCB65,	//0x0518		VoC_sw32inc_p(ACC0,REG3,DEFAULT)	|	VoC_sub32_rr(ACC1,ACC1,ACC0,DEFAULT)
0x938E9345,	//0x051a		VoC_add32inc_rp(RL6,RL6,REG1,DEFAULT)	|	VoC_add32inc_rp(ACC1,ACC1,REG0,DEFAULT)
0xDD9EDDDD,	//0x051c		VoC_sw32_p(RL6,REG3,DEFAULT)	|	VoC_sw32inc_p(ACC1,REG3,DEFAULT)
0x15960A80,	//0x051e		VoC_lw16i(REG0,0x1596)
		//0x0520		VoC_endloop1
0x41160A81,	//0x0520		VoC_lw16i(REG1,0x4116)
0x7BE6CBAE,	//0x0522		VoC_shr32_ri(RL6,0xfffffffc,DEFAULT)	|	VoC_sub32_rr(RL6,RL6,ACC1,DEFAULT)
0xFFC0F3FB,	//0x0524		VoC_NOP	|	VoC_lw16i_short(INC3,0xfffffffe,IN_PARALLEL)
0xF6625DDE,	//0x0526		VoC_movreg16(REG2,REG3,IN_PARALLEL)	|	VoC_sw32inc_p(RL6,REG3,DEFAULT)
0xD9DE6908,	//0x0528		VoC_lw32inc_p(RL6,REG3,IN_PARALLEL)	|	VoC_loop_i_short(0x8,DEFAULT)
0xD99F7BE6,	//0x052a		VoC_lw32_p(RL7,REG3,IN_PARALLEL)	|	VoC_shr32_ri(RL6,0xfffffffc,DEFAULT)
0xDD96FBE7,	//0x052c		VoC_sw32_p(RL6,REG2,DEFAULT)	|	VoC_shr32_ri(RL7,0xfffffffc,DEFAULT)
0xF6625DDF,	//0x052e		VoC_movreg16(REG2,REG3,IN_PARALLEL)	|	VoC_sw32inc_p(RL7,REG3,DEFAULT)
		//0x0530		VoC_endloop0
0xFBE6D9DE,	//0x0530		VoC_shr32_ri(RL6,0xfffffffc,DEFAULT)	|	VoC_lw32inc_p(RL6,REG3,DEFAULT)
0xFFC06580,	//0x0532		VoC_NAD(IN_PARALLEL)	|	VoC_return
		//0x0534		L3_mdct_sub
0xE0075FE9,	//0x0534		VoC_lw16i_short(REG7,0x0,IN_PARALLEL)	|	VoC_push16(RA,DEFAULT)
0x53A00A85,	//0x0536		VoC_lw16i(REG5,0x53a0)
0xE0145FC7,	//0x0538		VoC_lw16i_short(REG4,0x1,IN_PARALLEL)	|	VoC_push16(REG7,DEFAULT)
0xDF415FC7,	//0x053a		VoC_push32(REG23,IN_PARALLEL)	|	VoC_push16(REG7,DEFAULT)
0xDFC4DFC5,	//0x053c		VoC_push16(REG4,DEFAULT)	|	VoC_push16(REG5,DEFAULT)
		//0x053e		FOR_START1
0xF0135A25,	//0x053e		VoC_lw16i_short(INC3,0x4,IN_PARALLEL)	|	VoC_sw16_sd(REG5,0x1,DEFAULT)
0xDA14DA43,	//0x0540		VoC_sw16_sd(REG4,0x0,DEFAULT)	|	VoC_sw16_sd(REG3,0x3,DEFAULT)
0x20B8071B,	//0x0542		VoC_add16_rd(REG3,REG3,0x20b8)
0xFF446062,	//0x0544		VoC_lw32z(ACC0,IN_PARALLEL)	|	VoC_movreg16(REG2,REG3,DEFAULT)
0x05512C13,	//0x0546		VoC_loop_i(0x1,0x9)
0x971D6906,	//0x0548		VoC_sub32inc_rp(ACC1,ACC0,REG3,IN_PARALLEL)	|	VoC_loop_i_short(0x8,DEFAULT)
0xDD95951E,	//0x054a		VoC_sw32_p(ACC1,REG2,DEFAULT)	|	VoC_sub32_rp(RL6,ACC0,REG3,DEFAULT)
0xF6625DDE,	//0x054c		VoC_movreg16(REG2,REG3,IN_PARALLEL)	|	VoC_sw32inc_p(RL6,REG3,DEFAULT)
		//0x054e		VoC_endloop0
0x0713971D,	//0x054e		VoC_add16_rd(REG3,REG2,0x209c)(lo)	|	VoC_sub32inc_rp(ACC1,ACC0,REG3,DEFAULT)
0xE062209C,	//0x0550		VoC_movreg16(REG2,REG3,DEFAULT)	|	VoC_add16_rd(REG3,REG2,0x209c)(hi)
		//0x0551		VoC_endloop1
		//0x0552		LABEL_BAND
0xF1015647,	//0x0552		VoC_lw16i_short(INC1,0x40,IN_PARALLEL)	|	VoC_lw16_sd(REG7,0x3,DEFAULT)
0x60E0F053,	//0x0554		VoC_movreg16(REG0,REG7,DEFAULT)	|	VoC_lw16i_short(INC3,0x2,DEFAULT)
0x0739F100,	//0x0556		VoC_add16_rd(REG1,REG7,0x1114)(lo)	|	VoC_lw16i_short(INC0,0x40,IN_PARALLEL)
0x180A1114,	//0x0558		VoC_lw16i_set_inc(REG2,0x152a,0x2)(lo)	|	VoC_add16_rd(REG1,REG7,0x1114)(hi)
0x0713152A,	//0x055a		VoC_add16_rd(REG3,REG2,0x2755)(lo)	|	VoC_lw16i_set_inc(REG2,0x152a,0x2)(hi)
0x6A452755,	//0x055c		VoC_loop_i_short(0x12,DEFAULT)	|	VoC_add16_rd(REG3,REG2,0x2755)(hi)
0xD9CCFF0F,	//0x055e		VoC_lw32inc_p(ACC0,REG1,DEFAULT)	|	VoC_movreg32(RL7,REG23,IN_PARALLEL)
0xDDD4D9C5,	//0x0560		VoC_sw32inc_p(ACC0,REG2,DEFAULT)	|	VoC_lw32inc_p(ACC1,REG0,DEFAULT)
		//0x0562		VoC_endloop0
0x073FDDDD,	//0x0562		VoC_add16_rd(REG7,REG7,0x2733)(lo)	|	VoC_sw32inc_p(ACC1,REG3,DEFAULT)
0x18092733,	//0x0564		VoC_lw16i_set_inc(REG1,0x62b6,0x2)(lo)	|	VoC_add16_rd(REG7,REG7,0x2733)(hi)
0x5A4762B6,	//0x0566		VoC_sw16_sd(REG7,0x3,DEFAULT)	|	VoC_lw16i_set_inc(REG1,0x62b6,0x2)(hi)
0x7050FF39,	//0x0568		VoC_lw16i_short(INC0,0x2,DEFAULT)	|	VoC_movreg32(REG23,RL7,IN_PARALLEL)
0x717AE000,	//0x056a		VoC_lw16i_short(FORMATX,0xb,DEFAULT)	|	VoC_lw16i_short(REG0,0x0,IN_PARALLEL)
0xFFC0F5E1,	//0x056c		VoC_NAD	|	VoC_lw16i_short(FORMAT32,0xfffffffc,IN_PARALLEL)
0x05AB2C12,	//0x056e		VoC_loop_i(0x0,0x9)
0x27600B04,	//0x0570		VoC_sub16_dr(REG4,0x2760,REG0)
0x0B06C064,	//0x0572		VoC_sub16_dr(REG6,0x2731,REG0)(lo)	|	VoC_add16_rr(REG4,REG1,REG4,DEFAULT)
0x40F62731,	//0x0574		VoC_add16_rr(REG6,REG3,REG6,DEFAULT)	|	VoC_sub16_dr(REG6,0x2731,REG0)(hi)
0xF90CD9A2,	//0x0576		VoC_shru16_ri(REG4,0x1,DEFAULT)	|	VoC_lw32_p(REG45,REG4,IN_PARALLEL)
0x790ED9B3,	//0x0578		VoC_shru16_ri(REG6,0x1,DEFAULT)	|	VoC_lw32_p(REG67,REG6,DEFAULT)
0x4E67CD7C,	//0x057a		VoC_macX_rr(REG4,REG7,DEFAULT)	|	VoC_multf32_rr(ACC0,REG5,REG7,IN_PARALLEL)
0x4E6EE367,	//0x057c		VoC_macX_rr(REG5,REG6,DEFAULT)	|	VoC_lw16i_short(REG7,0x36,IN_PARALLEL)
0x4064C03C,	//0x057e		VoC_add16_rr(REG4,REG1,REG4,DEFAULT)	|	VoC_add16_rr(REG4,REG0,REG7,IN_PARALLEL)
0x7F26E127,	//0x0580		VoC_movreg32(RL6,ACC0,DEFAULT)	|	VoC_lw16i_short(REG7,0x12,IN_PARALLEL)
0x40F6C03E,	//0x0582		VoC_add16_rr(REG6,REG3,REG6,DEFAULT)	|	VoC_add16_rr(REG6,REG0,REG7,IN_PARALLEL)
0xF90CD9A2,	//0x0584		VoC_shru16_ri(REG4,0x1,DEFAULT)	|	VoC_lw32_p(REG45,REG4,IN_PARALLEL)
0x790ED9B3,	//0x0586		VoC_shru16_ri(REG6,0x1,DEFAULT)	|	VoC_lw32_p(REG67,REG6,DEFAULT)
0x4E67CD7C,	//0x0588		VoC_macX_rr(REG4,REG7,DEFAULT)	|	VoC_multf32_rr(ACC0,REG5,REG7,IN_PARALLEL)
0x4E6EC044,	//0x058a		VoC_macX_rr(REG5,REG6,DEFAULT)	|	VoC_add16_rr(REG4,REG1,REG0,IN_PARALLEL)
0xD9A2C086,	//0x058c		VoC_lw32_p(REG45,REG4,DEFAULT)	|	VoC_add16_rr(REG6,REG2,REG0,IN_PARALLEL)
0x59B3FF27,	//0x058e		VoC_lw32_p(REG67,REG6,DEFAULT)	|	VoC_movreg32(RL7,ACC0,DEFAULT)
0x790EF90C,	//0x0590		VoC_shru16_ri(REG6,0x1,DEFAULT)	|	VoC_shru16_ri(REG4,0x1,IN_PARALLEL)
0x4E67CD7C,	//0x0592		VoC_macX_rr(REG4,REG7,DEFAULT)	|	VoC_multf32_rr(ACC0,REG5,REG7,IN_PARALLEL)
0x4E6EE227,	//0x0594		VoC_macX_rr(REG5,REG6,DEFAULT)	|	VoC_lw16i_short(REG7,0x22,IN_PARALLEL)
0x4064C3C4,	//0x0596		VoC_add16_rr(REG4,REG1,REG4,DEFAULT)	|	VoC_sub16_rr(REG4,REG7,REG0,IN_PARALLEL)
0xFF25C0A6,	//0x0598		VoC_movreg32(ACC1,ACC0,DEFAULT)	|	VoC_add16_rr(REG6,REG2,REG4,IN_PARALLEL)
0x59B3D9A2,	//0x059a		VoC_lw32_p(REG67,REG6,DEFAULT)	|	VoC_lw32_p(REG45,REG4,DEFAULT)
0x790EF90C,	//0x059c		VoC_shru16_ri(REG6,0x1,DEFAULT)	|	VoC_shru16_ri(REG4,0x1,IN_PARALLEL)
0xCE67CD7C,	//0x059e		VoC_macX_rr(REG4,REG7,DEFAULT)	|	VoC_multf32_rr(ACC0,REG5,REG7,IN_PARALLEL)
0xE1274E6E,	//0x05a0		VoC_lw16i_short(REG7,0x12,IN_PARALLEL)	|	VoC_macX_rr(REG5,REG6,DEFAULT)
0x15720A84,	//0x05a2		VoC_lw16i(REG4,0x1572)
0xC10449BE,	//0x05a4		VoC_add16_rr(REG4,REG4,REG0,IN_PARALLEL)	|	VoC_add32_rr(RL6,RL6,RL7,DEFAULT)
0xFA26492C,	//0x05a6		VoC_shr32_ri(RL6,0x4,IN_PARALLEL)	|	VoC_add32_rr(ACC0,ACC0,ACC1,DEFAULT)
0xC13E7A24,	//0x05a8		VoC_add16_rr(REG6,REG4,REG7,IN_PARALLEL)	|	VoC_shr32_ri(ACC0,0x4,DEFAULT)
0x5DB4DDA6,	//0x05aa		VoC_sw32_p(ACC0,REG6,DEFAULT)	|	VoC_sw32_p(RL6,REG4,DEFAULT)
		//0x05ab		VoC_endloop0
0xD623DE00,	//0x05ac		VoC_lw16_sd(REG3,0x1,DEFAULT)	|	VoC_inc_p(REG0,IN_PARALLEL)
0x03DC2B80,	//0x05ae		VoC_jal(cii_mdct18)
0xD635DD96,	//0x05b0		VoC_lw16_sd(REG5,0x2,DEFAULT)	|	VoC_sw32_p(RL6,REG2,DEFAULT)
0x272F072D,	//0x05b2		VoC_add16_rd(REG5,REG5,0x272f)
0x071BD623,	//0x05b4		VoC_add16_rd(REG3,REG3,0x2755)(lo)	|	VoC_lw16_sd(REG3,0x1,DEFAULT)
0xDA352755,	//0x05b6		VoC_sw16_sd(REG5,0x2,DEFAULT)	|	VoC_add16_rd(REG3,REG3,0x2755)(hi)
0x4C25DA23,	//0x05b8		VoC_bnlt16_rd(LABLE_COMPILE_2,REG5,0x2738)(lo)	|	VoC_sw16_sd(REG3,0x1,DEFAULT)
0x2B002738,	//0x05ba		VoC_jump_lg(LABEL_BAND)(lo)	|	VoC_bnlt16_rd(LABLE_COMPILE_2,REG5,0x2738)(hi)
0xF0070552,	//0x05bc		VoC_lw16i_short(REG7,0x0,DEFAULT)	|	VoC_jump_lg(LABEL_BAND)(hi)
		//0x05bd		LABLE_COMPILE_2
0x277C079D,	//0x05be		VoC_sub16_rd(REG5,REG3,0x277c)
0x64201808,	//0x05c0		VoC_lw16i_set_inc(REG0,0x6420,0x2)
0x64301809,	//0x05c2		VoC_lw16i_set_inc(REG1,0x6430,0x2)
0xF3FB5A37,	//0x05c4		VoC_lw16i_short(INC3,0xfffffffe,IN_PARALLEL)	|	VoC_sw16_sd(REG7,0x2,DEFAULT)
0x2755072A,	//0x05c6		VoC_add16_rd(REG2,REG5,0x2755)
0x2745072B,	//0x05c8		VoC_add16_rd(REG3,REG5,0x2745)
0x05F32C3F,	//0x05ca		VoC_loop_i(0x1,0x1f)
0x05EC2C10,	//0x05cc		VoC_loop_i(0x0,0x8)
0xD99AD98B,	//0x05ce		VoC_lw32_p(REG45,REG3,DEFAULT)	|	VoC_lw32_p(REG67,REG1,DEFAULT)
0xF90C4D7C,	//0x05d0		VoC_shru16_ri(REG4,0x1,IN_PARALLEL)	|	VoC_multf32_rr(ACC0,REG5,REG7,DEFAULT)
0xCE6ECE67,	//0x05d2		VoC_macX_rr(REG5,REG6,DEFAULT)	|	VoC_macX_rr(REG4,REG7,DEFAULT)
0x5992D983,	//0x05d4		VoC_lw32_p(REG45,REG2,DEFAULT)	|	VoC_lw32_p(REG67,REG0,DEFAULT)
0x4D7CFF26,	//0x05d6		VoC_multf32_rr(ACC0,REG5,REG7,DEFAULT)	|	VoC_movreg32(RL6,ACC0,IN_PARALLEL)
0xCE67F90C,	//0x05d8		VoC_macX_rr(REG4,REG7,DEFAULT)	|	VoC_shru16_ri(REG4,0x1,IN_PARALLEL)
0xD9CBCE6E,	//0x05da		VoC_lw32inc_p(REG67,REG1,DEFAULT)	|	VoC_macX_rr(REG5,REG6,DEFAULT)
0xC9A65992,	//0x05dc		VoC_add32_rr(RL6,RL6,ACC0,IN_PARALLEL)	|	VoC_lw32_p(REG45,REG2,DEFAULT)
0xF90C4D7C,	//0x05de		VoC_shru16_ri(REG4,0x1,IN_PARALLEL)	|	VoC_multf32_rr(ACC0,REG5,REG7,DEFAULT)
0xCE6ECE67,	//0x05e0		VoC_macX_rr(REG5,REG6,DEFAULT)	|	VoC_macX_rr(REG4,REG7,DEFAULT)
0x599AD9C3,	//0x05e2		VoC_lw32_p(REG45,REG3,DEFAULT)	|	VoC_lw32inc_p(REG67,REG0,DEFAULT)
0x4D7CFF27,	//0x05e4		VoC_multf32_rr(ACC0,REG5,REG7,DEFAULT)	|	VoC_movreg32(RL7,ACC0,IN_PARALLEL)
0xCE67F90C,	//0x05e6		VoC_macX_rr(REG4,REG7,DEFAULT)	|	VoC_shru16_ri(REG4,0x1,IN_PARALLEL)
0xDDDECE6E,	//0x05e8		VoC_sw32inc_p(RL6,REG3,DEFAULT)	|	VoC_macX_rr(REG5,REG6,DEFAULT)
0xF799CBE7,	//0x05ea		VoC_lw16i_short(FORMAT32,0xfffffffc,DEFAULT)	|	VoC_sub32_rr(RL7,RL7,ACC0,DEFAULT)
		//0x05ec		VoC_endloop0
0x1808DDD7,	//0x05ec		VoC_lw16i_set_inc(REG0,0x6420,0x2)(lo)	|	VoC_sw32inc_p(RL7,REG2,DEFAULT)
0x18096420,	//0x05ee		VoC_lw16i_set_inc(REG1,0x6430,0x2)(lo)	|	VoC_lw16i_set_inc(REG0,0x6420,0x2)(hi)
0x071B6430,	//0x05f0		VoC_add16_rd(REG3,REG3,0x2760)(lo)	|	VoC_lw16i_set_inc(REG1,0x6430,0x2)(hi)
0x07122760,	//0x05f2		VoC_add16_rd(REG2,REG2,0x2747)(lo)	|	VoC_add16_rd(REG3,REG3,0x2760)(hi)
		//0x05f3		VoC_endloop1
0xD9092747,	//0x05f4		VoC_lw32_sd(REG23,0x0,DEFAULT)	|	VoC_add16_rd(REG2,REG2,0x2747)(hi)
0xD6146043,	//0x05f6		VoC_lw16_sd(REG4,0x0,IN_PARALLEL)	|	VoC_movreg16(REG3,REG2,DEFAULT)
0x272F07A4,	//0x05f8		VoC_sub16_rd(REG4,REG4,0x272f)
0x112A0A85,	//0x05fa		VoC_lw16i(REG5,0x112a)
0x06003204,	//0x05fc		VoC_bltz16_r(LABLE_MP3_CHANNEL_CON,REG4)
0x053E2B00,	//0x05fe		VoC_jump_lg(FOR_START1)
		//0x0600		LABLE_MP3_CHANNEL_CON
0xE0075F84,	//0x0600		VoC_lw16i_short(REG7,0x0,IN_PARALLEL)	|	VoC_pop16(REG4,DEFAULT)
0x07BFDF85,	//0x0602		VoC_sub16_rd(REG7,REG7,0x1114)(lo)	|	VoC_pop16(REG5,DEFAULT)
0x5F841114,	//0x0604		VoC_pop16(REG4,DEFAULT)	|	VoC_sub16_rd(REG7,REG7,0x1114)(hi)
0xDF82DF01,	//0x0606		VoC_pop16(REG2,DEFAULT)	|	VoC_pop32(REG23,IN_PARALLEL)
0x1507DFA9,	//0x0608		VoC_sw16_d(REG7,0x1114)(lo)	|	VoC_pop16(RA,DEFAULT)
0xE5801114,	//0x060a		VoC_return	|	VoC_sw16_d(REG7,0x1114)(hi)
		//0x060c		inner_loop
0x1404DFE9,	//0x060c		VoC_lw16_d(REG4,0x413a)(lo)	|	VoC_push16(RA,DEFAULT)
0x33C5413A,	//0x060e		VoC_bnltz32_r(LABEL_inner_loop,ACC1)(lo)	|	VoC_lw16_d(REG4,0x413a)(hi)
0x07A40613,	//0x0610		VoC_sub16_rd(REG4,REG4,0x272f)(lo)	|	VoC_bnltz32_r(LABEL_inner_loop,ACC1)(hi)
0xDFC4272F,	//0x0612		VoC_push16(REG4,DEFAULT)	|	VoC_sub16_rd(REG4,REG4,0x272f)(hi)
		//0x0613		LABEL_inner_loop
		//0x0614		LABEL_inner_loop_DO
0x272F0724,	//0x0614		VoC_add16_rd(REG4,REG4,0x272f)
0xD6535914,	//0x0616		VoC_lw16_sd(REG3,0x4,IN_PARALLEL)	|	VoC_lw32_sd(ACC0,0x1,DEFAULT)
0xF00B5A14,	//0x0618		VoC_lw16i_short(INC3,0x2,IN_PARALLEL)	|	VoC_sw16_sd(REG4,0x0,DEFAULT)
0x071E2B80,	//0x061a		VoC_jal(quantize)
0x639C5386,	//0x061c		VoC_bgt32_rd(LABEL_inner_loop_DO,RL6,0x639c)
0xF3FB5653,	//0x061e		VoC_lw16i_short(INC3,0xfffffffe,IN_PARALLEL)	|	VoC_lw16_sd(REG3,0x4,DEFAULT)
0x07DA2B80,	//0x0620		VoC_jal(calc_runlen)
0xF00A5652,	//0x0622		VoC_lw16i_short(INC2,0x2,IN_PARALLEL)	|	VoC_lw16_sd(REG2,0x4,DEFAULT)
0x08082B80,	//0x0624		VoC_jal(count1_bitcount)
0x2B80DF44,	//0x0626		VoC_jal(subdivide)(lo)	|	VoC_push32(ACC0,DEFAULT)
0xD6500862,	//0x0628		VoC_lw16_sd(REG0,0x4,DEFAULT)	|	VoC_jal(subdivide)(hi)
0x08AC2B80,	//0x062a		VoC_jal(bigv_tab_select)
0x2B80D651,	//0x062c		VoC_jal(bigv_bitcount)(lo)	|	VoC_lw16_sd(REG1,0x4,DEFAULT)
0xD90D09A2,	//0x062e		VoC_lw32_sd(ACC1,0x0,DEFAULT)	|	VoC_jal(bigv_bitcount)(hi)
0xDF05492C,	//0x0630		VoC_pop32(ACC1,IN_PARALLEL)	|	VoC_add32_rr(ACC0,ACC0,ACC1,DEFAULT)
0xD614590D,	//0x0632		VoC_lw16_sd(REG4,0x0,IN_PARALLEL)	|	VoC_lw32_sd(ACC1,0x0,DEFAULT)
0x06143625,	//0x0634		VoC_bgt32_rr(LABEL_inner_loop_DO,ACC0,ACC1)
0xEFF55F80,	//0x0636		VoC_lw16i_short(REG5,0xffffffff,IN_PARALLEL)	|	VoC_pop16(REG0,DEFAULT)
0xFF455FA9,	//0x0638		VoC_lw32z(ACC1,IN_PARALLEL)	|	VoC_pop16(RA,DEFAULT)
0x413A1582,	//0x063a		VoC_sw32_d(REG45,0x413a)
0xFFC06580,	//0x063c		VoC_NAD(IN_PARALLEL)	|	VoC_return
		//0x063e		outer_loop
0xDF445FE9,	//0x063e		VoC_push32(ACC0,IN_PARALLEL)	|	VoC_push16(RA,DEFAULT)
0xDFC05F45,	//0x0640		VoC_push16(REG0,IN_PARALLEL)	|	VoC_push32(ACC1,DEFAULT)
0x41161809,	//0x0642		VoC_lw16i_set_inc(REG1,0x4116,0x2)
0xD9C66A43,	//0x0644		VoC_lw32inc_p(RL6,REG0,IN_PARALLEL)	|	VoC_loop_i_short(0x12,DEFAULT)
0x5DCED9C7,	//0x0646		VoC_sw32inc_p(RL6,REG1,DEFAULT)	|	VoC_lw32inc_p(RL7,REG0,DEFAULT)
		//0x0647		VoC_endloop0
0xDD8FFF3E,	//0x0648		VoC_sw32_p(RL7,REG1,DEFAULT)	|	VoC_movreg32(RL6,RL7,IN_PARALLEL)
0x0A072B80,	//0x064a		VoC_jal(bin_search_StepSize)
0xD90DD914,	//0x064c		VoC_lw32_sd(ACC1,0x0,DEFAULT)	|	VoC_lw32_sd(ACC0,0x1,DEFAULT)
0x060C2B80,	//0x064e		VoC_jal(inner_loop)
0xE00D7050,	//0x0650		VoC_lw16i_short(RL6_HI,0x0,IN_PARALLEL)	|	VoC_lw16i_short(INC0,0x2,DEFAULT)
0x41161809,	//0x0652		VoC_lw16i_set_inc(REG1,0x4116,0x2)
0x41161584,	//0x0654		VoC_sw32_d(ACC0,0x4116)
0x41301585,	//0x0656		VoC_sw32_d(ACC1,0x4130)
0x413A1485,	//0x0658		VoC_lw32_d(ACC1,0x413a)
0x00D20A8C,	//0x065a		VoC_lw16i(RL6_LO,0xd2)
0xD610C975,	//0x065c		VoC_lw16_sd(REG0,0x0,DEFAULT)	|	VoC_add32_rr(ACC1,ACC1,RL6,DEFAULT)
0x411C1585,	//0x065e		VoC_sw32_d(ACC1,0x411c)
0xD9CE6A43,	//0x0660		VoC_lw32inc_p(RL6,REG1,IN_PARALLEL)	|	VoC_loop_i_short(0x12,DEFAULT)
0x5DC6D9CF,	//0x0662		VoC_sw32inc_p(RL6,REG0,DEFAULT)	|	VoC_lw32inc_p(RL7,REG1,DEFAULT)
		//0x0663		VoC_endloop0
0xDD87FF3E,	//0x0664		VoC_sw32_p(RL7,REG0,DEFAULT)	|	VoC_movreg32(RL6,RL7,IN_PARALLEL)
0xDF805F05,	//0x0666		VoC_pop16(REG0,IN_PARALLEL)	|	VoC_pop32(ACC1,DEFAULT)
0xDF05DFA9,	//0x0668		VoC_pop32(ACC1,DEFAULT)	|	VoC_pop16(RA,DEFAULT)
0xFFC06580,	//0x066a		VoC_NAD(IN_PARALLEL)	|	VoC_return
		//0x066c		L3_iteration_loop
0xDF435FE9,	//0x066c		VoC_push32(REG67,IN_PARALLEL)	|	VoC_push16(RA,DEFAULT)
0xE0055FC6,	//0x066e		VoC_lw16i_short(REG5,0x0,IN_PARALLEL)	|	VoC_push16(REG6,DEFAULT)
0x110E6C06,	//0x0670		VoC_bez16_d(LABEL_L3_iteration_loop_FIRSTCALL,0x110e)
0x110E1505,	//0x0672		VoC_sw16_d(REG5,0x110e)
0x40481505,	//0x0674		VoC_sw16_d(REG5,0x4048)
		//0x0676		LABEL_L3_iteration_loop_FIRSTCALL
0x403F1405,	//0x0676		VoC_lw16_d(REG5,0x403f)
0x2734082D,	//0x0678		VoC_mult16_rd(REG5,REG5,0x2734)
0x00250A83,	//0x067a		VoC_lw16i(REG3,0x25)
0x403D072D,	//0x067c		VoC_add16_rd(REG5,REG5,0x403d)
0x0A81C4EB,	//0x067e		VoC_lw16i(REG1,0x25e4)(lo)	|	VoC_mult16_rr(REG3,REG3,REG5,DEFAULT)
0xC05925E4,	//0x0680		VoC_add16_rr(REG1,REG1,REG3,DEFAULT)	|	VoC_lw16i(REG1,0x25e4)(hi)
0x112A1808,	//0x0682		VoC_lw16i_set_inc(REG0,0x112a,0x2)
0x11131501,	//0x0684		VoC_sw16_d(REG1,0x1113)
0x06B631C6,	//0x0686		VoC_bnez16_r(INTERATION_LOOP_NOIF,REG6)
0x53A01809,	//0x0688		VoC_lw16i_set_inc(REG1,0x53a0,0x2)
0x1483DA10,	//0x068a		VoC_lw32_d(REG67,0x2782)(lo)	|	VoC_sw16_sd(REG0,0x0,DEFAULT)
0x77792782,	//0x068c		VoC_lw16i_short(FORMAT32,0xfffffffb,DEFAULT)	|	VoC_lw32_d(REG67,0x2782)(hi)
0xFF01F4CA,	//0x068e		VoC_movreg32(REG23,REG01,DEFAULT)	|	VoC_lw16i_short(FORMATX,0x19,IN_PARALLEL)
0x06AC2C09,	//0x0690		VoC_loop_i(0x1,0x4)
0x06AB2CC8,	//0x0692		VoC_loop_i(0x0,0x64)
0xD9CF59C2,	//0x0694		VoC_lw32inc_p(RL7,REG1,IN_PARALLEL)	|	VoC_lw32inc_p(REG45,REG0,DEFAULT)
0xFA0F7A0A,	//0x0696		VoC_shr32_ri(RL7,0x1,IN_PARALLEL)	|	VoC_shr32_ri(REG45,0x1,DEFAULT)
0xCBD748BA,	//0x0698		VoC_sub32_rr(RL7,RL7,REG45,IN_PARALLEL)	|	VoC_add32_rr(REG45,REG45,RL7,DEFAULT)
0xCD7C790C,	//0x069a		VoC_multf32_rr(ACC0,REG5,REG7,IN_PARALLEL)	|	VoC_shru16_ri(REG4,0x1,DEFAULT)
0xF4514E66,	//0x069c		VoC_lw16i_short(FORMAT32,0xa,IN_PARALLEL)	|	VoC_macX_rr(REG4,REG6,DEFAULT)
0x4E2ECE27,	//0x069e		VoC_mac32_rr(REG5,REG6,DEFAULT)	|	VoC_mac32_rr(REG4,REG7,DEFAULT)
0xF779FF3A,	//0x06a0		VoC_lw16i_short(FORMAT32,0xfffffffb,DEFAULT)	|	VoC_movreg32(REG45,RL7,IN_PARALLEL)
0x4D7CF90C,	//0x06a2		VoC_multf32_rr(ACC0,REG5,REG7,DEFAULT)	|	VoC_shru16_ri(REG4,0x1,DEFAULT)
0x4E66DD94,	//0x06a4		VoC_macX_rr(REG4,REG6,DEFAULT)	|	VoC_sw32_p(ACC0,REG2,IN_PARALLEL)
0xCE27F451,	//0x06a6		VoC_mac32_rr(REG4,REG7,DEFAULT)	|	VoC_lw16i_short(FORMAT32,0xa,IN_PARALLEL)
0xF779CE2E,	//0x06a8		VoC_lw16i_short(FORMAT32,0xfffffffb,DEFAULT)	|	VoC_mac32_rr(REG5,REG6,DEFAULT)
0xDD9CFF01,	//0x06aa		VoC_sw32_p(ACC0,REG3,DEFAULT)	|	VoC_movreg32(REG23,REG01,DEFAULT)
		//0x06ab		VoC_endloop0
		//0x06ac		VoC_endloop1
0xFFC07F44,	//0x06ac		VoC_NAD(IN_PARALLEL)	|	VoC_lw32z(ACC0,DEFAULT)
0x06B02D60,	//0x06ae		VoC_loop_i(0x0,0xb0)
		//0x06b0		VoC_endloop0
0xDDCC5DC4,	//0x06b0		VoC_sw32inc_p(ACC0,REG1,IN_PARALLEL)	|	VoC_sw32inc_p(ACC0,REG0,DEFAULT)
0x402FD610,	//0x06b2		VoC_be16_rd(INTERATION_LOOP_XR,REG7,0x2783)(lo)	|	VoC_lw16_sd(REG0,0x0,DEFAULT)
0xFFC02783,	//0x06b4		VoC_NAD	|	VoC_be16_rd(INTERATION_LOOP_XR,REG7,0x2783)(hi)
		//0x06b6		INTERATION_LOOP_NOIF
0x53A01808,	//0x06b6		VoC_lw16i_set_inc(REG0,0x53a0,0x2)
		//0x06b8		INTERATION_LOOP_XR
0x7F44DF81,	//0x06b8		VoC_lw32z(ACC0,DEFAULT)	|	VoC_pop16(REG1,DEFAULT)
0x1809FF45,	//0x06ba		VoC_lw16i_set_inc(REG1,0x582c,0x2)(lo)	|	VoC_lw32z(ACC1,IN_PARALLEL)
0xD9C6582C,	//0x06bc		VoC_lw32inc_p(RL6,REG0,DEFAULT)	|	VoC_lw16i_set_inc(REG1,0x582c,0x2)(hi)
0x06CB2C09,	//0x06be		VoC_loop_i(0x1,0x4)
0x06CA2D20,	//0x06c0		VoC_loop_i(0x0,0x90)
0x06C633C6,	//0x06c2		VoC_bnltz32_r(INTERATION_LOOP_ABS,RL6)
0xFFC04B76,	//0x06c4		VoC_NAD(IN_PARALLEL)	|	VoC_sub32_rr(RL6,ACC1,RL6,DEFAULT)
		//0x06c6		INTERATION_LOOP_ABS
0x06C93626,	//0x06c6		VoC_bgt32_rr(INTERATION_LOOP_BIG,ACC0,RL6)
0xDDCEFF34,	//0x06c8		VoC_sw32inc_p(RL6,REG1,DEFAULT)	|	VoC_movreg32(ACC0,RL6,DEFAULT)
		//0x06c9		INTERATION_LOOP_BIG
		//0x06ca		VoC_endloop0
0xD90BD9C6,	//0x06ca		VoC_lw32_sd(REG67,0x0,DEFAULT)	|	VoC_lw32inc_p(RL6,REG0,DEFAULT)
		//0x06cb		VoC_endloop1
0x11101584,	//0x06cc		VoC_sw32_d(ACC0,0x1110)
0x405E1808,	//0x06ce		VoC_lw16i_set_inc(REG0,0x405e,0x2)
0x002E0A84,	//0x06d0		VoC_lw16i(REG4,0x2e)
0xF8FC45A1,	//0x06d2		VoC_shr16_ri(REG4,0xffffffff,IN_PARALLEL)	|	VoC_mult16_rr(REG1,REG6,REG4,DEFAULT)
0xC008C5E5,	//0x06d4		VoC_add16_rr(REG0,REG0,REG1,DEFAULT)	|	VoC_mult16_rr(REG5,REG7,REG4,DEFAULT)
0xDF03C028,	//0x06d6		VoC_pop32(REG67,DEFAULT)	|	VoC_add16_rr(REG0,REG0,REG5,DEFAULT)
0xDFC06862,	//0x06d8		VoC_push16(REG0,IN_PARALLEL)	|	VoC_loop_i_short(0x3,DEFAULT)
		//0x06da		VoC_endloop0
0xDE00DDC5,	//0x06da		VoC_inc_p(REG0,DEFAULT)	|	VoC_sw32inc_p(ACC1,REG0,DEFAULT)
0xE941DE00,	//0x06dc		VoC_loop_i_short(0xa,DEFAULT)	|	VoC_inc_p(REG0,DEFAULT)
		//0x06de		VoC_endloop0
0xD680DDC5,	//0x06de		VoC_lw16_sd(REG0,0x7,DEFAULT)	|	VoC_sw32inc_p(ACC1,REG0,DEFAULT)
0x277C0833,	//0x06e0		VoC_mult16_rd(REG3,REG6,0x277c)
0x11101484,	//0x06e2		VoC_lw32_d(ACC0,0x1110)
0xD674C018,	//0x06e4		VoC_lw16_sd(REG4,0x6,DEFAULT)	|	VoC_add16_rr(REG0,REG0,REG3,DEFAULT)
0xF80C5FC0,	//0x06e6		VoC_shr16_ri(REG4,0x1,IN_PARALLEL)	|	VoC_push16(REG0,DEFAULT)
0x643F3C24,	//0x06e8		VoC_bngt16_rd(RESVMAXBITS_4095,REG4,0x643f)
0x643F1404,	//0x06ea		VoC_lw16_d(REG4,0x643f)
		//0x06ec		RESVMAXBITS_4095
0xF68A700B,	//0x06ec		VoC_movreg16(ACC1_LO,REG4,IN_PARALLEL)	|	VoC_lw16i_short(ACC1_HI,0x0,DEFAULT)
0x06F43304,	//0x06ee		VoC_bez32_r(LABEL_L3_iteration_loop_XRMAX,ACC0)
0xFFC05620,	//0x06f0		VoC_NAD(IN_PARALLEL)	|	VoC_lw16_sd(REG0,0x1,DEFAULT)
0x063E2B80,	//0x06f2		VoC_jal(outer_loop)
		//0x06f4		LABEL_L3_iteration_loop_XRMAX
0xD6846105,	//0x06f4		VoC_lw16_sd(REG4,0x7,IN_PARALLEL)	|	VoC_movreg16(REG5,ACC0_LO,DEFAULT)
0x432EF80C,	//0x06f6		VoC_sub16_rr(REG6,REG4,REG5,DEFAULT)	|	VoC_shr16_ri(REG4,0x1,DEFAULT)
0x1604D684,	//0x06f8		VoC_and16_ri(REG4,0x1)(lo)	|	VoC_lw16_sd(REG4,0x7,IN_PARALLEL)
0x15060001,	//0x06fa		VoC_sw16_d(REG6,0x1112)(lo)	|	VoC_and16_ri(REG4,0x1)(hi)
0x41341112,	//0x06fc		VoC_add16_rr(REG4,REG4,REG6,DEFAULT)	|	VoC_sw16_d(REG6,0x1112)(hi)
0x1938E007,	//0x06fe		VoC_lw16i_set_inc(REG0,0x405e,0x2e)(lo)	|	VoC_lw16i_short(REG7,0x0,IN_PARALLEL)
0x3184405E,	//0x0700		VoC_bez16_r(RESVFRAMEEND_END,REG4)(lo)	|	VoC_lw16i_set_inc(REG0,0x405e,0x2e)(hi)
0x81020717,	//0x0702		VoC_add16_rp(REG2,REG4,REG0,DEFAULT)	|	VoC_bez16_r(RESVFRAMEEND_END,REG4)(hi)
0x643F4C22,	//0x0704		VoC_bnlt16_rd(RESVFRAMEEND_4095,REG2,0x643f)
0xE5D0DC02,	//0x0706		VoC_jump(RESVFRAMEEND_END)	|	VoC_sw16_p(REG2,REG0,DEFAULT)
		//0x0708		RESVFRAMEEND_4095
0xE003688C,	//0x0708		VoC_lw16i_short(REG3,0x0,IN_PARALLEL)	|	VoC_loop_i_short(0x4,DEFAULT)
0x07173184,	//0x070a		VoC_bez16_r(RESVFRAMEEND_END,REG4)
0x643F1402,	//0x070c		VoC_lw16_d(REG2,0x643f)
0x34228482,	//0x070e		VoC_bgt16_rr(RESVFRAMEEND_bitsThisGr,REG4,REG2)(lo)	|	VoC_sub16_rp(REG2,REG2,REG0,DEFAULT)
0xE0820712,	//0x0710		VoC_movreg16(REG2,REG4,DEFAULT)	|	VoC_bgt16_rr(RESVFRAMEEND_bitsThisGr,REG4,REG2)(hi)
		//0x0712		RESVFRAMEEND_bitsThisGr
0xC3149044,	//0x0712		VoC_sub16_rr(REG4,REG4,REG2,DEFAULT)	|	VoC_add32_rp(ACC0,REG23,REG0,DEFAULT)
		//0x0714		VoC_endloop0
0x1504DDC4,	//0x0714		VoC_sw16_d(REG4,0x404c)(lo)	|	VoC_sw32inc_p(ACC0,REG0,DEFAULT)
0xDF85404C,	//0x0716		VoC_pop16(REG5,DEFAULT)	|	VoC_sw16_d(REG4,0x404c)(hi)
		//0x0717		RESVFRAMEEND_END
0xDFA9DF85,	//0x0718		VoC_pop16(RA,DEFAULT)	|	VoC_pop16(REG5,DEFAULT)
0x11121507,	//0x071a		VoC_sw16_d(REG7,0x1112)
0xFFC06580,	//0x071c		VoC_NAD(IN_PARALLEL)	|	VoC_return
		//0x071e		quantize
0x62FE0A80,	//0x071e		VoC_lw16i(REG0,0x62fe)
0x00FE0A81,	//0x0720		VoC_lw16i(REG1,0xfe)
0xC00878FC,	//0x0722		VoC_add16_rr(REG0,REG0,REG1,IN_PARALLEL)	|	VoC_shr16_ri(REG4,0xffffffff,DEFAULT)
0xFF234020,	//0x0724		VoC_movreg32(REG67,ACC0,IN_PARALLEL)	|	VoC_add16_rr(REG0,REG0,REG4,DEFAULT)
0xF5FA77F9,	//0x0726		VoC_lw16i_short(FORMATX,0xffffffff,IN_PARALLEL)	|	VoC_lw16i_short(FORMAT32,0xffffffff,DEFAULT)
0xE00F5982,	//0x0728		VoC_lw16i_short(RL7_HI,0x0,IN_PARALLEL)	|	VoC_lw32_p(REG45,REG0,DEFAULT)
0xF90E790C,	//0x072a		VoC_shru16_ri(REG6,0x1,IN_PARALLEL)	|	VoC_shru16_ri(REG4,0x1,DEFAULT)
0xCD754D7C,	//0x072c		VoC_multf32_rr(ACC1,REG5,REG6,IN_PARALLEL)	|	VoC_multf32_rr(ACC0,REG5,REG7,DEFAULT)
0xCEA771D9,	//0x072e		VoC_macX_rr(REG4,REG7,IN_PARALLEL)	|	VoC_lw16i_short(FORMAT32,0xe,DEFAULT)
0xCE267F46,	//0x0730		VoC_mac32_rr(REG4,REG6,IN_PARALLEL)	|	VoC_lw32z(RL6,DEFAULT)
0x40000A8E,	//0x0732		VoC_lw16i(RL7_LO,0x4000)
0xF004497D,	//0x0734		VoC_lw16i_short(INC0,0x1,IN_PARALLEL)	|	VoC_add32_rr(ACC1,ACC1,RL7,DEFAULT)
0xC92CFA7D,	//0x0736		VoC_add32_rr(ACC0,ACC0,ACC1,DEFAULT)	|	VoC_shr32_ri(ACC1,0xf,DEFAULT)
0x27845434,	//0x0738		VoC_bngt32_rd(LABEL_quantize_ELSE,ACC0,0x2784)
0x40000A8C,	//0x073a		VoC_lw16i(RL6_LO,0x4000)
0xFFC06580,	//0x073c		VoC_NAD(IN_PARALLEL)	|	VoC_return
		//0x073e		LABEL_quantize_ELSE
0xE0107F46,	//0x073e		VoC_lw16i_short(REG0,0x1,IN_PARALLEL)	|	VoC_lw32z(RL6,DEFAULT)
0x582C180A,	//0x0740		VoC_lw16i_set_inc(REG2,0x582c,0x2)
		//0x0742		LABEL_quantize_LOOP576
0xDF425FC0,	//0x0742		VoC_push32(REG45,IN_PARALLEL)	|	VoC_push16(REG0,DEFAULT)
0xF5F959D3,	//0x0744		VoC_lw16i_short(FORMAT32,0xffffffff,IN_PARALLEL)	|	VoC_lw32inc_p(REG67,REG2,DEFAULT)
0xCD7C790E,	//0x0746		VoC_multf32_rr(ACC0,REG5,REG7,IN_PARALLEL)	|	VoC_shru16_ri(REG6,0x1,DEFAULT)
0xE00F4D75,	//0x0748		VoC_lw16i_short(RL7_HI,0x0,IN_PARALLEL)	|	VoC_multf32_rr(ACC1,REG5,REG6,DEFAULT)
0xCEA771D9,	//0x074a		VoC_macX_rr(REG4,REG7,IN_PARALLEL)	|	VoC_lw16i_short(FORMAT32,0xe,DEFAULT)
0x40000A8E,	//0x074c		VoC_lw16i(RL7_LO,0x4000)
0xCE26497D,	//0x074e		VoC_mac32_rr(REG4,REG6,IN_PARALLEL)	|	VoC_add32_rr(ACC1,ACC1,RL7,DEFAULT)
0x00C90A8E,	//0x0750		VoC_lw16i(RL7_LO,0xc9)
0xE0117A7D,	//0x0752		VoC_lw16i_short(REG1,0x1,IN_PARALLEL)	|	VoC_shr32_ri(ACC1,0xf,DEFAULT)
0xFF45492C,	//0x0754		VoC_lw32z(ACC1,IN_PARALLEL)	|	VoC_add32_rr(ACC0,ACC0,ACC1,DEFAULT)
0x075C3344,	//0x0756		VoC_bnez32_r(LABEL_quantize_ELSE_IF1,ACC0)
0x2B00FF44,	//0x0758		VoC_jump_lg(LABEL_quantize_ELSE_IX)(lo)	|	VoC_lw32z(ACC0,DEFAULT)
0xFFC007CB,	//0x075a		VoC_NAD	|	VoC_jump_lg(LABEL_quantize_ELSE_IX)(hi)
		//0x075c		LABEL_quantize_ELSE_IF1
0x272F5C34,	//0x075c		VoC_bne32_rd(LABEL_quantize_ELSE_IF2,ACC0,0x272f)
0x277E1484,	//0x075e		VoC_lw32_d(ACC0,0x277e)
0x07CB2B00,	//0x0760		VoC_jump_lg(LABEL_quantize_ELSE_IX)
		//0x0762		LABEL_quantize_ELSE_IF2
0xF7056100,	//0x0762		VoC_movreg16(REG5,ACC0_LO,IN_PARALLEL)	|	VoC_movreg16(REG0,ACC0_LO,DEFAULT)
0x07823627,	//0x0764		VoC_bgt32_rr(LABEL_quantize_ELSE_IF3,ACC0,RL7)
0xF808640D,	//0x0766		VoC_shr16_ri(REG0,0x1,IN_PARALLEL)	|	VoC_and16_rr(REG5,REG1,DEFAULT)
0x413B0A84,	//0x0768		VoC_lw16i(REG4,0x413b)
0x31C5C104,	//0x076a		VoC_bnez16_r(LABEL_quantize_HIGH,REG5)(lo)	|	VoC_add16_rr(REG4,REG4,REG0,DEFAULT)
0xD8400771,	//0x076c		VoC_lw16_p(REG0,REG4,DEFAULT)	|	VoC_bnez16_r(LABEL_quantize_HIGH,REG5)(hi)
0x00FF1600,	//0x076e		VoC_and16_ri(REG0,0xff)
0xD840E5C5,	//0x0770		VoC_lw16_p(REG0,REG4,DEFAULT)	|	VoC_jump(LABEL_quantize_rq_add)
		//0x0771		LABEL_quantize_HIGH
0x7F001640,	//0x0772		VoC_and16_ri(REG0,0xff00)
0xE008F940,	//0x0774		VoC_movreg16(ACC0_LO,REG0,DEFAULT)	|	VoC_shru16_ri(REG0,0x8,DEFAULT)
		//0x0775		LABEL_quantize_rq_add
0x07CB2B00,	//0x0776		VoC_jump_lg(LABEL_quantize_ELSE_IX)
0x07823625,	//0x0778		VoC_bgt32_rr(LABEL_quantize_ELSE_IF3,ACC0,ACC1)
0x413A0A80,	//0x077a		VoC_lw16i(REG0,0x413a)
0xFFC0C008,	//0x077c		VoC_NOP	|	VoC_add16_rr(REG0,REG0,REG1,DEFAULT)
0x2B00D808,	//0x077e		VoC_jump_lg(LABEL_quantize_ELSE_IX)(lo)	|	VoC_lw16_p(ACC0_LO,REG0,DEFAULT)
0xFFC007CB,	//0x0780		VoC_NAD	|	VoC_jump_lg(LABEL_quantize_ELSE_IX)(hi)
		//0x0782		LABEL_quantize_ELSE_IF3
0x27866024,	//0x0782		VoC_blt32_rd(LABLE_COMPILE_3,ACC0,0x2786)
0x07B02B00,	//0x0784		VoC_jump_lg(LABEL_quantize_ELSE_ELSE)
		//0x0786		LABLE_COMPILE_3
0xF46A77F9,	//0x0786		VoC_lw16i_short(FORMATX,0xd,IN_PARALLEL)	|	VoC_lw16i_short(FORMAT32,0xffffffff,DEFAULT)
0x1485E101,	//0x0788		VoC_lw32_d(ACC1,0x6314)(lo)	|	VoC_movreg16(REG1,ACC0_LO,DEFAULT)
0x7F436314,	//0x078a		VoC_lw32z(REG67,DEFAULT)	|	VoC_lw32_d(ACC1,0x6314)(hi)
0xFFC0E000,	//0x078c		VoC_NAD	|	VoC_lw16i_short(REG0,0x0,IN_PARALLEL)
0x07A92C05,	//0x078e		VoC_loop_i(0x1,0x2)
0xFF426BF0,	//0x0790		VoC_lw32z(REG45,IN_PARALLEL)	|	VoC_loop_i_short(0x1f,DEFAULT)
0xE0CFE52B,	//0x0792		VoC_movreg16(RL7_HI,REG6,DEFAULT)	|	VoC_or32_rr(REG67,ACC1,DEFAULT)
0xCDFC790E,	//0x0794		VoC_multf32_rr(ACC0,REG7,REG7,IN_PARALLEL)	|	VoC_shru16_ri(REG6,0x1,DEFAULT)
0xE1E6CE7E,	//0x0796		VoC_movreg16(REG6,RL7_HI,DEFAULT)	|	VoC_macX_rr(REG7,REG6,DEFAULT)
0xFA0D7BFC,	//0x0798		VoC_shr32_ri(ACC1,0x1,IN_PARALLEL)	|	VoC_shr32_ri(ACC0,0xffffffff,DEFAULT)
0x07A03620,	//0x079a		VoC_bgt32_rr(COMPUTE_RQ_TEMP1,ACC0,REG01)
0x37A0FF1A,	//0x079c		VoC_bne32_rr(COMPUTE_RQ_TEMP1,ACC0,REG01)(lo)	|	VoC_movreg32(REG45,REG67,DEFAULT)
0xE5C307A0,	//0x079e		VoC_jump(COMPUTE_RQ_BREAK1)	|	VoC_bne32_rr(COMPUTE_RQ_TEMP1,ACC0,REG01)(hi)
		//0x07a0		COMPUTE_RQ_TEMP1
		//0x07a0		VoC_endloop0
0xFFC07F13,	//0x07a0		VoC_NAD(IN_PARALLEL)	|	VoC_movreg32(REG67,REG45,DEFAULT)
		//0x07a2		COMPUTE_RQ_BREAK1
0xFF1771DA,	//0x07a2		VoC_movreg32(RL7,REG45,IN_PARALLEL)	|	VoC_lw16i_short(FORMATX,0xe,DEFAULT)
0xCC6C790C,	//0x07a4		VoC_multf32_rr(ACC0,REG1,REG5,IN_PARALLEL)	|	VoC_shru16_ri(REG4,0x1,DEFAULT)
0x1485CE61,	//0x07a6		VoC_lw32_d(ACC1,0x6314)(lo)	|	VoC_macX_rr(REG4,REG1,DEFAULT)
0x7F206314,	//0x07a8		VoC_movreg32(REG01,ACC0,DEFAULT)	|	VoC_lw32_d(ACC1,0x6314)(hi)
		//0x07a9		VoC_endloop1
0x093CF46A,	//0x07aa		VoC_add32_rd(ACC0,RL7,0x2788)(lo)	|	VoC_lw16i_short(FORMATX,0xd,IN_PARALLEL)
0xFA9C2788,	//0x07ac		VoC_shr32_ri(ACC0,0x13,DEFAULT)	|	VoC_add32_rd(ACC0,RL7,0x2788)(hi)
0xFFC065DD,	//0x07ae		VoC_NAD(IN_PARALLEL)	|	VoC_jump(LABEL_quantize_ELSE_IX)
		//0x07b0		LABEL_quantize_ELSE_ELSE
0xF00477E0,	//0x07b0		VoC_lw16i_short(INC0,0x1,IN_PARALLEL)	|	VoC_lw16i_short(REG0,0xffffffff,DEFAULT)
0xFFC07F25,	//0x07b2		VoC_NAD(IN_PARALLEL)	|	VoC_movreg32(ACC1,ACC0,DEFAULT)
		//0x07b4		LABLE_LOG2
0xDE007F2C,	//0x07b4		VoC_inc_p(REG0,IN_PARALLEL)	|	VoC_movreg32(ACC0,ACC1,DEFAULT)
0xE0D17E84,	//0x07b6		VoC_lw16i_short(REG1,0xd,IN_PARALLEL)	|	VoC_shr32_rr(ACC0,REG0,DEFAULT)
0x277E53A4,	//0x07b8		VoC_bgt32_rd(LABLE_LOG2,ACC0,0x277e)
0xC20C6019,	//0x07ba		VoC_sub16_rr(REG4,REG0,REG1,IN_PARALLEL)	|	VoC_movreg16(FORMAT32,REG0,DEFAULT)
0x63FE1808,	//0x07bc		VoC_lw16i_set_inc(REG0,0x63fe,0x2)
0xE02578F4,	//0x07be		VoC_lw16i_short(REG5,0x2,IN_PARALLEL)	|	VoC_shr16_ri(REG4,0xfffffffe,DEFAULT)
0xE0644020,	//0x07c0		VoC_lw16i_short(REG4,0x6,IN_PARALLEL)	|	VoC_add16_rr(REG0,REG0,REG4,DEFAULT)
0x9543C029,	//0x07c2		VoC_sub32_rp(REG67,ACC1,REG0,DEFAULT)	|	VoC_add16_rr(REG1,REG0,REG5,DEFAULT)
0xD98FC027,	//0x07c4		VoC_lw32_p(RL7,REG1,DEFAULT)	|	VoC_add16_rr(REG7,REG0,REG4,DEFAULT)
0xCD34BDFA,	//0x07c6		VoC_multf32_rr(ACC0,REG4,REG6,DEFAULT)	|	VoC_sub32_pr(REG45,REG7,RL7,DEFAULT)
0x9104FFC0,	//0x07c8		VoC_add32_rp(ACC0,ACC0,REG0,DEFAULT)	|	VoC_NOP
0xDDDCFFC0,	//0x07ca		VoC_sw32inc_p(ACC0,REG3,DEFAULT)	|	VoC_NOP
		//0x07cb		LABEL_quantize_ELSE_IX
0x07CF36A6,	//0x07cc		VoC_bngt32_rr(LABEL_quantize_ELSE_END_IF,ACC0,RL6)
0xDF80FF26,	//0x07ce		VoC_pop16(REG0,DEFAULT)	|	VoC_movreg32(RL6,ACC0,DEFAULT)
		//0x07cf		LABEL_quantize_ELSE_END_IF
0x5E00DF02,	//0x07d0		VoC_inc_p(REG0,DEFAULT)	|	VoC_pop32(REG45,DEFAULT)
0x3820F5FA,	//0x07d2		VoC_bgt16_rd(LABLE_COMPILE_4,REG0,0x25fa)(lo)	|	VoC_lw16i_short(FORMATX,0xffffffff,IN_PARALLEL)
0x2B0025FA,	//0x07d4		VoC_jump_lg(LABEL_quantize_LOOP576)(lo)	|	VoC_bgt16_rd(LABLE_COMPILE_4,REG0,0x25fa)(hi)
0xFFC00742,	//0x07d6		VoC_NOP	|	VoC_jump_lg(LABEL_quantize_LOOP576)(hi)
		//0x07d7		LABLE_COMPILE_4
0xFFC06580,	//0x07d8		VoC_NAD(IN_PARALLEL)	|	VoC_return
		//0x07da		calc_runlen
0x047E0A84,	//0x07da		VoC_lw16i(REG4,0x47e)
0xC0E3780C,	//0x07dc		VoC_add16_rr(REG3,REG3,REG4,IN_PARALLEL)	|	VoC_shr16_ri(REG4,0x1,DEFAULT)
0x07E92C21,	//0x07de		VoC_loop_i(0x1,0x10)
0xE0226A48,	//0x07e0		VoC_lw16i_short(REG2,0x2,IN_PARALLEL)	|	VoC_loop_i_short(0x12,DEFAULT)
0xD9DCD9DB,	//0x07e2		VoC_lw32inc_p(ACC0,REG3,DEFAULT)	|	VoC_lw32inc_p(REG67,REG3,DEFAULT)
0x07EC3343,	//0x07e4		VoC_bnez32_r(LABLE_calc_runlen_i,REG67)
0x07EC3344,	//0x07e6		VoC_bnez32_r(LABLE_calc_runlen_i,ACC0)
		//0x07e8		VoC_endloop0
0x7085C314,	//0x07e8		VoC_lw16i_short(REG5,0x4,DEFAULT)	|	VoC_sub16_rr(REG4,REG4,REG2,DEFAULT)
		//0x07e9		VoC_endloop1
0xFFC0E001,	//0x07ea		VoC_NAD	|	VoC_lw16i_short(REG1,0x0,IN_PARALLEL)
		//0x07ec		LABLE_calc_runlen_i
0xE01040EB,	//0x07ec		VoC_lw16i_short(REG0,0x1,IN_PARALLEL)	|	VoC_add16_rr(REG3,REG3,REG5,DEFAULT)
0x080034A2,	//0x07ee		VoC_bngt16_rr(LABLE_calc_runlen_end,REG4,REG2)
		//0x07f0		LABLE_calc_runlen_count
0x50BBD9DB,	//0x07f0		VoC_bgt32_rd(LABLE_calc_runlen_end,REG67,0x272f)(lo)	|	VoC_lw32inc_p(REG67,REG3,DEFAULT)
0xD9DB272F,	//0x07f2		VoC_lw32inc_p(REG67,REG3,DEFAULT)	|	VoC_bgt32_rd(LABLE_calc_runlen_end,REG67,0x272f)(hi)
0x272F50A3,	//0x07f4		VoC_bgt32_rd(LABLE_calc_runlen_end,REG67,0x272f)
0x508BD9DB,	//0x07f6		VoC_bgt32_rd(LABLE_calc_runlen_end,REG67,0x272f)(lo)	|	VoC_lw32inc_p(REG67,REG3,DEFAULT)
0xD9DB272F,	//0x07f8		VoC_lw32inc_p(REG67,REG3,DEFAULT)	|	VoC_bgt32_rd(LABLE_calc_runlen_end,REG67,0x272f)(hi)
0x272F5033,	//0x07fa		VoC_bgt32_rd(LABLE_calc_runlen_end,REG67,0x272f)
0xC32C4041,	//0x07fc		VoC_sub16_rr(REG4,REG4,REG5,IN_PARALLEL)	|	VoC_add16_rr(REG1,REG1,REG0,DEFAULT)
0x27333B14,	//0x07fe		VoC_bgt16_rd(LABLE_calc_runlen_count,REG4,0x2733)
		//0x0800		LABLE_calc_runlen_end
0xF80CC104,	//0x0800		VoC_shr16_ri(REG4,0x1,DEFAULT)	|	VoC_add16_rr(REG4,REG4,REG0,DEFAULT)
0x411A1501,	//0x0802		VoC_sw16_d(REG1,0x411a)
0x41181504,	//0x0804		VoC_sw16_d(REG4,0x4118)
0xFFC06580,	//0x0806		VoC_NAD(IN_PARALLEL)	|	VoC_return
		//0x0808		count1_bitcount
0x41181403,	//0x0808		VoC_lw16_d(REG3,0x4118)
0x411A1406,	//0x080a		VoC_lw16_d(REG6,0x411a)
0xFF457F44,	//0x080c		VoC_lw32z(ACC1,IN_PARALLEL)	|	VoC_lw32z(ACC0,DEFAULT)
0xE00078F3,	//0x080e		VoC_lw16i_short(REG0,0x0,IN_PARALLEL)	|	VoC_shr16_ri(REG3,0xfffffffe,DEFAULT)
0x08563186,	//0x0810		VoC_bez16_r(LABEL_COUNT1_BITCOUNT_0,REG6)
0x253A0A81,	//0x0812		VoC_lw16i(REG1,0x253a)
0x20AF070C,	//0x0814		VoC_add16_rd(REG4,REG1,0x20af)
0x273D0727,	//0x0816		VoC_add16_rd(REG7,REG4,0x273d)
0xF004409A,	//0x0818		VoC_lw16i_short(INC0,0x1,IN_PARALLEL)	|	VoC_add16_rr(REG2,REG2,REG3,DEFAULT)
0xD877D841,	//0x081a		VoC_lw16_p(REG7,REG7,DEFAULT)	|	VoC_lw16_p(REG1,REG4,DEFAULT)
0x2E30E0EE,	//0x081c		VoC_loop_r(0,REG6)(lo)	|	VoC_movreg16(RL7_LO,REG7,DEFAULT)
0xD8A40853,	//0x081e		VoC_lw16inc_p(REG4,REG2,DEFAULT)	|	VoC_loop_r(0,REG6)(hi)
0x58A6D8A5,	//0x0820		VoC_lw16inc_p(REG6,REG2,DEFAULT)	|	VoC_lw16inc_p(REG5,REG2,DEFAULT)
0x58A7F8FD,	//0x0822		VoC_lw16inc_p(REG7,REG2,DEFAULT)	|	VoC_shr16_ri(REG5,0xffffffff,IN_PARALLEL)
0x78EFF8F6,	//0x0824		VoC_shr16_ri(REG7,0xfffffffd,DEFAULT)	|	VoC_shr16_ri(REG6,0xfffffffe,IN_PARALLEL)
0xC0F3C12B,	//0x0826		VoC_add16_rr(REG3,REG3,REG6,DEFAULT)	|	VoC_add16_rr(REG3,REG4,REG5,IN_PARALLEL)
0x3184C0FB,	//0x0828		VoC_bez16_r(LABEL_COUNT1_BITCOUNT_SIGN1,REG4)(lo)	|	VoC_add16_rr(REG3,REG3,REG7,DEFAULT)
0xDE00082C,	//0x082a		VoC_inc_p(REG0,DEFAULT)	|	VoC_bez16_r(LABEL_COUNT1_BITCOUNT_SIGN1,REG4)(hi)
		//0x082c		LABEL_COUNT1_BITCOUNT_SIGN1
0x08303185,	//0x082c		VoC_bez16_r(LABEL_COUNT1_BITCOUNT_SIGN2,REG5)
0xFFC05E00,	//0x082e		VoC_NAD(IN_PARALLEL)	|	VoC_inc_p(REG0,DEFAULT)
		//0x0830		LABEL_COUNT1_BITCOUNT_SIGN2
0x08343186,	//0x0830		VoC_bez16_r(LABEL_COUNT1_BITCOUNT_SIGN3,REG6)
0xFFC05E00,	//0x0832		VoC_NAD(IN_PARALLEL)	|	VoC_inc_p(REG0,DEFAULT)
		//0x0834		LABEL_COUNT1_BITCOUNT_SIGN3
0x08383187,	//0x0834		VoC_bez16_r(LABEL_COUNT1_BITCOUNT_SIGN4,REG7)
0xFFC05E00,	//0x0836		VoC_NAD(IN_PARALLEL)	|	VoC_inc_p(REG0,DEFAULT)
		//0x0838		LABEL_COUNT1_BITCOUNT_SIGN4
0xF80B6067,	//0x0838		VoC_shr16_ri(REG3,0x1,IN_PARALLEL)	|	VoC_movreg16(REG7,REG3,DEFAULT)
0xF7C640CD,	//0x083a		VoC_movreg16(REG6,RL7_LO,IN_PARALLEL)	|	VoC_add16_rr(REG5,REG3,REG1,DEFAULT)
0xF704419E,	//0x083c		VoC_movreg16(REG4,ACC0_LO,IN_PARALLEL)	|	VoC_add16_rr(REG6,REG6,REG3,DEFAULT)
0xD866D855,	//0x083e		VoC_lw16_p(REG6,REG6,DEFAULT)	|	VoC_lw16_p(REG5,REG5,DEFAULT)
0x00011607,	//0x0840		VoC_and16_ri(REG7,0x1)
0x084A31C7,	//0x0842		VoC_bnez16_r(LABEL_HIGH,REG7)
0x00FF1605,	//0x0844		VoC_and16_ri(REG5,0xff)
0x00FF1606,	//0x0846		VoC_and16_ri(REG6,0xff)
0xFFC065C8,	//0x0848		VoC_NAD(IN_PARALLEL)	|	VoC_jump(LABEL_ADD_HT)
		//0x084a		LABEL_HIGH
0x7F001645,	//0x084a		VoC_and16_ri(REG5,0xff00)
0x7F001646,	//0x084c		VoC_and16_ri(REG6,0xff00)
0xF9467945,	//0x084e		VoC_shru16_ri(REG6,0x8,IN_PARALLEL)	|	VoC_shru16_ri(REG5,0x8,DEFAULT)
		//0x0850		LABEL_ADD_HT
0xC12C6147,	//0x0850		VoC_add16_rr(REG4,REG4,REG5,IN_PARALLEL)	|	VoC_movreg16(REG7,ACC1_LO,DEFAULT)
0x60EAC1F7,	//0x0852		VoC_movreg16(ACC1_LO,REG7,DEFAULT)	|	VoC_add16_rr(REG7,REG7,REG6,DEFAULT)
		//0x0853		VoC_endloop0
0xFFC0F688,	//0x0854		VoC_NAD	|	VoC_movreg16(ACC0_LO,REG4,IN_PARALLEL)
		//0x0856		LABEL_COUNT1_BITCOUNT_0
0xE0157001,	//0x0856		VoC_lw16i_short(REG5,0x1,IN_PARALLEL)	|	VoC_lw16i_short(REG1,0x0,DEFAULT)
0x085E362C,	//0x0858		VoC_bgt32_rr(LABEL_COUNT1_BITCOUNT_SUM0,ACC1,ACC0)
0x1505C944,	//0x085a		VoC_sw16_d(REG5,0x412e)(lo)	|	VoC_add32_rr(ACC0,ACC1,REG01,DEFAULT)
0xE580412E,	//0x085c		VoC_return	|	VoC_sw16_d(REG5,0x412e)(hi)
		//0x085e		LABEL_COUNT1_BITCOUNT_SUM0
0x1501C904,	//0x085e		VoC_sw16_d(REG1,0x412e)(lo)	|	VoC_add32_rr(ACC0,ACC0,REG01,DEFAULT)
0xE580412E,	//0x0860		VoC_return	|	VoC_sw16_d(REG1,0x412e)(hi)
		//0x0862		subdivide
0x1404FF44,	//0x0862		VoC_lw16_d(REG4,0x4118)(lo)	|	VoC_lw32z(ACC0,DEFAULT)
0x31C44118,	//0x0864		VoC_bnez16_r(LABEL_SUBDIV_ELSE,REG4)(lo)	|	VoC_lw16_d(REG4,0x4118)(hi)
0x1584086C,	//0x0866		VoC_sw32_d(ACC0,0x4126)(lo)	|	VoC_bnez16_r(LABEL_SUBDIV_ELSE,REG4)(hi)
0x15844126,	//0x0868		VoC_sw32_d(ACC0,0x4128)(lo)	|	VoC_sw32_d(ACC0,0x4126)(hi)
0xE5804128,	//0x086a		VoC_return	|	VoC_sw32_d(ACC0,0x4128)(hi)
		//0x086c		LABEL_SUBDIV_ELSE
0x26C20A80,	//0x086c		VoC_lw16i(REG0,0x26c2)
0x11132005,	//0x086e		VoC_lw16d_set_inc(REG1,0x1113,0x1)
0xEFF678FC,	//0x0870		VoC_lw16i_short(REG6,0xffffffff,IN_PARALLEL)	|	VoC_shr16_ri(REG4,0xffffffff,DEFAULT)
0xF6237027,	//0x0872		VoC_movreg16(REG3,REG1,IN_PARALLEL)	|	VoC_lw16i_short(REG7,0x1,DEFAULT)
		//0x0874		LABEL_SUBDIV_WHILE1
0xC1F65895,	//0x0874		VoC_add16_rr(REG6,REG7,REG6,IN_PARALLEL)	|	VoC_lw16inc_p(REG5,REG1,DEFAULT)
0x08743425,	//0x0876		VoC_bgt16_rr(LABEL_SUBDIV_WHILE1,REG4,REG5)
0xC0306061,	//0x0878		VoC_add16_rr(REG0,REG0,REG6,IN_PARALLEL)	|	VoC_movreg16(REG1,REG3,DEFAULT)
0xD805C07B,	//0x087a		VoC_lw16_p(REG5,REG0,DEFAULT)	|	VoC_add16_rr(REG3,REG1,REG7,DEFAULT)
0x00FF1605,	//0x087c		VoC_and16_ri(REG5,0xff)
0xFFC040EB,	//0x087e		VoC_NAD(IN_PARALLEL)	|	VoC_add16_rr(REG3,REG3,REG5,DEFAULT)
		//0x0880		LABEL_SUBDIV_WHILE2
0x08883185,	//0x0880		VoC_bez16_r(LABEL_SUBDIV_NEXT,REG5)
0x349CD833,	//0x0882		VoC_bngt16_rr(LABEL_SUBDIV_NEXT,REG3,REG4)(lo)	|	VoC_lw16_p(REG3,REG3,DEFAULT)
0xC37D0888,	//0x0884		VoC_sub16_rr(REG5,REG5,REG7,DEFAULT)	|	VoC_bngt16_rr(LABEL_SUBDIV_NEXT,REG3,REG4)(hi)
0xFFC065FA,	//0x0886		VoC_NAD(IN_PARALLEL)	|	VoC_jump(LABEL_SUBDIV_WHILE2)
		//0x0888		LABEL_SUBDIV_NEXT
0x41261505,	//0x0888		VoC_sw16_d(REG5,0x4126)
0xF6A05805,	//0x088a		VoC_movreg16(REG0,REG5,IN_PARALLEL)	|	VoC_lw16_p(REG5,REG0,DEFAULT)
0x7F001645,	//0x088c		VoC_and16_ri(REG5,0xff00)
0xC142F945,	//0x088e		VoC_add16_rr(REG2,REG5,REG0,DEFAULT)	|	VoC_shru16_ri(REG5,0x8,DEFAULT)
0x27330712,	//0x0890		VoC_add16_rd(REG2,REG2,0x2733)
0xFFC04053,	//0x0892		VoC_NAD(IN_PARALLEL)	|	VoC_add16_rr(REG3,REG1,REG2,DEFAULT)
		//0x0894		LABEL_SUBDIV_WHILE3
0x089C3185,	//0x0894		VoC_bez16_r(LABEL_SUBDIV_NEXT1,REG5)
0x349CD833,	//0x0896		VoC_bngt16_rr(LABEL_SUBDIV_NEXT1,REG3,REG4)(lo)	|	VoC_lw16_p(REG3,REG3,DEFAULT)
0x437D089C,	//0x0898		VoC_sub16_rr(REG5,REG5,REG7,DEFAULT)	|	VoC_bngt16_rr(LABEL_SUBDIV_NEXT1,REG3,REG4)(hi)
0xE5F9C2BA,	//0x089a		VoC_jump(LABEL_SUBDIV_WHILE3)	|	VoC_sub16_rr(REG2,REG2,REG7,IN_PARALLEL)
		//0x089c		LABEL_SUBDIV_NEXT1
0x41281505,	//0x089c		VoC_sw16_d(REG5,0x4128)
0xC17D403A,	//0x089e		VoC_add16_rr(REG5,REG5,REG7,IN_PARALLEL)	|	VoC_add16_rr(REG2,REG0,REG7,DEFAULT)
0x1504C056,	//0x08a0		VoC_sw16_d(REG4,0x4138)(lo)	|	VoC_add16_rr(REG6,REG1,REG2,DEFAULT)
0xC1A94138,	//0x08a2		VoC_add16_rr(REG1,REG6,REG5,DEFAULT)	|	VoC_sw16_d(REG4,0x4138)(hi)
0xD811D867,	//0x08a4		VoC_lw16_p(REG1,REG1,DEFAULT)	|	VoC_lw16_p(REG7,REG6,DEFAULT)
0x41341507,	//0x08a6		VoC_sw16_d(REG7,0x4134)
0x41361501,	//0x08a8		VoC_sw16_d(REG1,0x4136)
0xFFC06580,	//0x08aa		VoC_NAD(IN_PARALLEL)	|	VoC_return
		//0x08ac		bigv_tab_select
0xE0055FC0,	//0x08ac		VoC_lw16i_short(REG5,0x0,IN_PARALLEL)	|	VoC_push16(REG0,DEFAULT)
0x1406DFE9,	//0x08ae		VoC_lw16_d(REG6,0x4134)(lo)	|	VoC_push16(RA,DEFAULT)
0x15054134,	//0x08b0		VoC_sw16_d(REG5,0x4120)(lo)	|	VoC_lw16_d(REG6,0x4134)(hi)
0x15054120,	//0x08b2		VoC_sw16_d(REG5,0x4122)(lo)	|	VoC_sw16_d(REG5,0x4120)(hi)
0x15054122,	//0x08b4		VoC_sw16_d(REG5,0x4124)(lo)	|	VoC_sw16_d(REG5,0x4122)(hi)
0x31464124,	//0x08b6		VoC_bngtz16_r(LABLE_bigv_tab_select_IF1,REG6)(lo)	|	VoC_sw16_d(REG5,0x4124)(hi)
0xFFC008BE,	//0x08b8		VoC_NAD	|	VoC_bngtz16_r(LABLE_bigv_tab_select_IF1,REG6)(hi)
0x08DA2B80,	//0x08ba		VoC_jal(new_choose_table)
0x41201500,	//0x08bc		VoC_sw16_d(REG0,0x4120)
		//0x08be		LABLE_bigv_tab_select_IF1
0x41341405,	//0x08be		VoC_lw16_d(REG5,0x4134)
0x41361406,	//0x08c0		VoC_lw16_d(REG6,0x4136)
0x08CA34B5,	//0x08c2		VoC_bngt16_rr(LABLE_bigv_tab_select_IF2,REG6,REG5)
0xFFC05620,	//0x08c4		VoC_NAD(IN_PARALLEL)	|	VoC_lw16_sd(REG0,0x1,DEFAULT)
0x08DA2B80,	//0x08c6		VoC_jal(new_choose_table)
0x41221500,	//0x08c8		VoC_sw16_d(REG0,0x4122)
		//0x08ca		LABLE_bigv_tab_select_IF2
0x41361405,	//0x08ca		VoC_lw16_d(REG5,0x4136)
0x41181406,	//0x08cc		VoC_lw16_d(REG6,0x4118)
0xD62078FE,	//0x08ce		VoC_lw16_sd(REG0,0x1,IN_PARALLEL)	|	VoC_shr16_ri(REG6,0xffffffff,DEFAULT)
0x08D634B5,	//0x08d0		VoC_bngt16_rr(LABLE_bigv_tab_select_END,REG6,REG5)
0x08DA2B80,	//0x08d2		VoC_jal(new_choose_table)
0x41241500,	//0x08d4		VoC_sw16_d(REG0,0x4124)
		//0x08d6		LABLE_bigv_tab_select_END
0xDF80DFA9,	//0x08d6		VoC_pop16(REG0,DEFAULT)	|	VoC_pop16(RA,DEFAULT)
0xFFC06580,	//0x08d8		VoC_NAD(IN_PARALLEL)	|	VoC_return
		//0x08da		new_choose_table
0xF6A75FC0,	//0x08da		VoC_movreg16(REG7,REG5,IN_PARALLEL)	|	VoC_push16(REG0,DEFAULT)
0xDFE978FD,	//0x08dc		VoC_push16(RA,IN_PARALLEL)	|	VoC_shr16_ri(REG5,0xffffffff,DEFAULT)
0xC0287050,	//0x08de		VoC_add16_rr(REG0,REG0,REG5,IN_PARALLEL)	|	VoC_lw16i_short(INC0,0x2,DEFAULT)
0xFF4443BC,	//0x08e0		VoC_lw32z(ACC0,IN_PARALLEL)	|	VoC_sub16_rr(REG4,REG6,REG7,DEFAULT)
0xF80C59C5,	//0x08e2		VoC_shr16_ri(REG4,0x1,IN_PARALLEL)	|	VoC_lw32inc_p(ACC1,REG0,DEFAULT)
0x08ED2E20,	//0x08e4		VoC_loop_r(0,REG4)
0x08E936AC,	//0x08e6		VoC_bngt32_rr(LABEL_IMAX1,ACC1,ACC0)
0xD9C5FF2C,	//0x08e8		VoC_lw32inc_p(ACC1,REG0,DEFAULT)	|	VoC_movreg32(ACC0,ACC1,DEFAULT)
		//0x08e9		LABEL_IMAX1
0x08ED36AC,	//0x08ea		VoC_bngt32_rr(LABEL_IMAX2,ACC1,ACC0)
0xD9C5FF2C,	//0x08ec		VoC_lw32inc_p(ACC1,REG0,DEFAULT)	|	VoC_movreg32(ACC0,ACC1,DEFAULT)
		//0x08ed		LABEL_IMAX2
		//0x08ed		VoC_endloop0
0x3304FF40,	//0x08ee		VoC_bez32_r(LABEL_new_choose_table_ENDALL,ACC0)(lo)	|	VoC_lw32z(REG01,DEFAULT)
0x5F43099E,	//0x08f0		VoC_push32(REG67,DEFAULT)	|	VoC_bez32_r(LABEL_new_choose_table_ENDALL,ACC0)(hi)
0x1817F704,	//0x08f2		VoC_lw16i_set_inc(REG3,0x253a,0x5)(lo)	|	VoC_movreg16(REG4,ACC0_LO,IN_PARALLEL)
0x482C253A,	//0x08f4		VoC_blt16_rd(LABLE_COMPILE_6,REG4,0x2758)(lo)	|	VoC_lw16i_set_inc(REG3,0x253a,0x5)(hi)
0x2B002758,	//0x08f6		VoC_jump_lg(LABEL_new_choose_table_ELSE)(lo)	|	VoC_blt16_rd(LABLE_COMPILE_6,REG4,0x2758)(hi)
0xFFC0096D,	//0x08f8		VoC_NAD	|	VoC_jump_lg(LABEL_new_choose_table_ELSE)(hi)
		//0x08fa		LABLE_COMPILE_6
0x00FF1809,	//0x08fa		VoC_lw16i_set_inc(REG1,0xff,0x2)
0xE40AD8B2,	//0x08fc		VoC_and16_rr(REG2,REG1,DEFAULT)	|	VoC_lw16inc_p(REG2,REG3,DEFAULT)
0xE01569C6,	//0x08fe		VoC_lw16i_short(REG5,0x1,IN_PARALLEL)	|	VoC_loop_i_short(0xe,DEFAULT)
0x09033494,	//0x0900		VoC_bngt16_rr(LABEL_new_choose_table_COM1,REG2,REG4)
0xD8B2E5C4,	//0x0902		VoC_lw16inc_p(REG2,REG3,DEFAULT)	|	VoC_jump(LABEL_new_choose_table_BREAK1)
		//0x0903		LABEL_new_choose_table_COM1
		//0x0904		VoC_endloop0
0xC028640A,	//0x0904		VoC_add16_rr(REG0,REG0,REG5,IN_PARALLEL)	|	VoC_and16_rr(REG2,REG1,DEFAULT)
		//0x0906		LABEL_new_choose_table_BREAK1
0xDFC06004,	//0x0906		VoC_push16(REG0,IN_PARALLEL)	|	VoC_movreg16(REG4,REG0,DEFAULT)
0x2B80D631,	//0x0908		VoC_jal(count_bit)(lo)	|	VoC_lw16_sd(REG1,0x2,DEFAULT)
0xDFC209C6,	//0x090a		VoC_push16(REG2,DEFAULT)	|	VoC_jal(count_bit)(hi)
0xD90B5620,	//0x090c		VoC_lw32_sd(REG67,0x0,IN_PARALLEL)	|	VoC_lw16_sd(REG0,0x1,DEFAULT)
0x44A8E0E5,	//0x090e		VoC_bne16_rd(LABEL_new_choose_table_SWITCH5,REG0,0x2733)(lo)	|	VoC_movreg16(REG5,REG7,DEFAULT)
0x70642733,	//0x0910		VoC_lw16i_short(REG4,0x3,DEFAULT)	|	VoC_bne16_rd(LABEL_new_choose_table_SWITCH5,REG0,0x2733)(hi)
0x2B80D641,	//0x0912		VoC_jal(count_bit)(lo)	|	VoC_lw16_sd(REG1,0x3,IN_PARALLEL)
0xD62009C6,	//0x0914		VoC_lw16_sd(REG0,0x1,DEFAULT)	|	VoC_jal(count_bit)(hi)
0x3413D613,	//0x0916		VoC_bgt16_rr(LABEL_new_choose_table_SWITCH_END,REG2,REG3)(lo)	|	VoC_lw16_sd(REG3,0x0,DEFAULT)
0xF0600969,	//0x0918		VoC_lw16i_short(REG0,0x3,DEFAULT)	|	VoC_bgt16_rr(LABEL_new_choose_table_SWITCH_END,REG2,REG3)(hi)
0x09692B00,	//0x091a		VoC_jump_lg(LABEL_new_choose_table_SWITCH_END)
		//0x091c		LABEL_new_choose_table_SWITCH5
0x273D44B0,	//0x091c		VoC_bne16_rd(LABEL_new_choose_table_SWITCH7,REG0,0x273d)
0xD641F0C4,	//0x091e		VoC_lw16_sd(REG1,0x3,DEFAULT)	|	VoC_lw16i_short(REG4,0x6,DEFAULT)
0x09C62B80,	//0x0920		VoC_jal(count_bit)
0xD613D620,	//0x0922		VoC_lw16_sd(REG3,0x0,DEFAULT)	|	VoC_lw16_sd(REG0,0x1,DEFAULT)
0x09693413,	//0x0924		VoC_bgt16_rr(LABEL_new_choose_table_SWITCH_END,REG2,REG3)
0x2B00F0C0,	//0x0926		VoC_jump_lg(LABEL_new_choose_table_SWITCH_END)(lo)	|	VoC_lw16i_short(REG0,0x6,DEFAULT)
0xFFC00969,	//0x0928		VoC_NAD	|	VoC_jump_lg(LABEL_new_choose_table_SWITCH_END)(hi)
		//0x092a		LABEL_new_choose_table_SWITCH7
0x274A4590,	//0x092a		VoC_bne16_rd(LABEL_new_choose_table_SWITCH10,REG0,0x274a)
0xD6417104,	//0x092c		VoC_lw16_sd(REG1,0x3,IN_PARALLEL)	|	VoC_lw16i_short(REG4,0x8,DEFAULT)
0x09C62B80,	//0x092e		VoC_jal(count_bit)
0xD613D620,	//0x0930		VoC_lw16_sd(REG3,0x0,DEFAULT)	|	VoC_lw16_sd(REG0,0x1,DEFAULT)
0x09383413,	//0x0932		VoC_bgt16_rr(LABEL_new_choose_table_SWITCH7_IF1,REG2,REG3)
0xDA12F100,	//0x0934		VoC_sw16_sd(REG2,0x0,DEFAULT)	|	VoC_lw16i_short(REG0,0x8,DEFAULT)
0xFFC05A20,	//0x0936		VoC_NAD(IN_PARALLEL)	|	VoC_sw16_sd(REG0,0x1,DEFAULT)
		//0x0938		LABEL_new_choose_table_SWITCH7_IF1
0xE094590B,	//0x0938		VoC_lw16i_short(REG4,0x9,IN_PARALLEL)	|	VoC_lw32_sd(REG67,0x0,DEFAULT)
0x2B80D641,	//0x093a		VoC_jal(count_bit)(lo)	|	VoC_lw16_sd(REG1,0x3,DEFAULT)
0xD62009C6,	//0x093c		VoC_lw16_sd(REG0,0x1,DEFAULT)	|	VoC_jal(count_bit)(hi)
0x3413D613,	//0x093e		VoC_bgt16_rr(LABEL_new_choose_table_SWITCH_END,REG2,REG3)(lo)	|	VoC_lw16_sd(REG3,0x0,DEFAULT)
0xF1200969,	//0x0940		VoC_lw16i_short(REG0,0x9,DEFAULT)	|	VoC_bgt16_rr(LABEL_new_choose_table_SWITCH_END,REG2,REG3)(hi)
0x09692B00,	//0x0942		VoC_jump_lg(LABEL_new_choose_table_SWITCH_END)
		//0x0944		LABEL_new_choose_table_SWITCH10
0x27354590,	//0x0944		VoC_bne16_rd(LABEL_new_choose_table_SWITCH13,REG0,0x2735)
0xD6417164,	//0x0946		VoC_lw16_sd(REG1,0x3,IN_PARALLEL)	|	VoC_lw16i_short(REG4,0xb,DEFAULT)
0x09C62B80,	//0x0948		VoC_jal(count_bit)
0xD613D620,	//0x094a		VoC_lw16_sd(REG3,0x0,DEFAULT)	|	VoC_lw16_sd(REG0,0x1,DEFAULT)
0x09523413,	//0x094c		VoC_bgt16_rr(LABEL_new_choose_table_SWITCH10_IF1,REG2,REG3)
0xDA12F160,	//0x094e		VoC_sw16_sd(REG2,0x0,DEFAULT)	|	VoC_lw16i_short(REG0,0xb,DEFAULT)
0xFFC05A20,	//0x0950		VoC_NAD(IN_PARALLEL)	|	VoC_sw16_sd(REG0,0x1,DEFAULT)
		//0x0952		LABEL_new_choose_table_SWITCH10_IF1
0xE0C4590B,	//0x0952		VoC_lw16i_short(REG4,0xc,IN_PARALLEL)	|	VoC_lw32_sd(REG67,0x0,DEFAULT)
0x2B80D641,	//0x0954		VoC_jal(count_bit)(lo)	|	VoC_lw16_sd(REG1,0x3,DEFAULT)
0xD62009C6,	//0x0956		VoC_lw16_sd(REG0,0x1,DEFAULT)	|	VoC_jal(count_bit)(hi)
0x3413D613,	//0x0958		VoC_bgt16_rr(LABEL_new_choose_table_SWITCH_END,REG2,REG3)(lo)	|	VoC_lw16_sd(REG3,0x0,DEFAULT)
0xF1800969,	//0x095a		VoC_lw16i_short(REG0,0xc,DEFAULT)	|	VoC_bgt16_rr(LABEL_new_choose_table_SWITCH_END,REG2,REG3)(hi)
0xFFC065CD,	//0x095c		VoC_NAD(IN_PARALLEL)	|	VoC_jump(LABEL_new_choose_table_SWITCH_END)
		//0x095e		LABEL_new_choose_table_SWITCH13
0x27484498,	//0x095e		VoC_bne16_rd(LABEL_new_choose_table_SWITCH_END,REG0,0x2748)
0xD64171E4,	//0x0960		VoC_lw16_sd(REG1,0x3,IN_PARALLEL)	|	VoC_lw16i_short(REG4,0xf,DEFAULT)
0x09C62B80,	//0x0962		VoC_jal(count_bit)
0xD613D620,	//0x0964		VoC_lw16_sd(REG3,0x0,DEFAULT)	|	VoC_lw16_sd(REG0,0x1,DEFAULT)
0x09693413,	//0x0966		VoC_bgt16_rr(LABEL_new_choose_table_SWITCH_END,REG2,REG3)
0xDF82F1E0,	//0x0968		VoC_pop16(REG2,DEFAULT)	|	VoC_lw16i_short(REG0,0xf,DEFAULT)
		//0x0969		LABEL_new_choose_table_SWITCH_END
0x2B00DF82,	//0x096a		VoC_jump_lg(LABEL_new_choose_table_END)(lo)	|	VoC_pop16(REG2,DEFAULT)
0xF1E0099D,	//0x096c		VoC_lw16i_short(REG0,0xf,DEFAULT)	|	VoC_jump_lg(LABEL_new_choose_table_END)(hi)
		//0x096d		LABEL_new_choose_table_ELSE
0xE4D67027,	//0x096e		VoC_lw16i_short(REG6,0x4d,IN_PARALLEL)	|	VoC_lw16i_short(REG7,0x1,DEFAULT)
0xC304C0F3,	//0x0970		VoC_sub16_rr(REG4,REG4,REG0,DEFAULT)	|	VoC_add16_rr(REG3,REG3,REG6,DEFAULT)
0xD8B26926,	//0x0972		VoC_lw16inc_p(REG2,REG3,IN_PARALLEL)	|	VoC_loop_i_short(0x9,DEFAULT)
0x09783422,	//0x0974		VoC_bgt16_rr(LABEL_new_choose_table_ELSE_FOR1_IF,REG4,REG2)
0xFFC065C4,	//0x0976		VoC_NAD(IN_PARALLEL)	|	VoC_jump(LABEL_new_choose_table_ELSE_FOR2)
		//0x0978		LABEL_new_choose_table_ELSE_FOR1_IF
		//0x0978		VoC_endloop0
0xC03858B2,	//0x0978		VoC_add16_rr(REG0,REG0,REG7,IN_PARALLEL)	|	VoC_lw16inc_p(REG2,REG3,DEFAULT)
		//0x097a		LABEL_new_choose_table_ELSE_FOR2
0x253A1816,	//0x097a		VoC_lw16i_set_inc(REG2,0x253a,0x5)
0x217E0712,	//0x097c		VoC_add16_rd(REG2,REG2,0x217e)
0xFFC0F301,	//0x097e		VoC_NAD	|	VoC_lw16i_short(REG1,0x18,DEFAULT)
0xD8A36906,	//0x0980		VoC_lw16inc_p(REG3,REG2,IN_PARALLEL)	|	VoC_loop_i_short(0x8,DEFAULT)
0x09863423,	//0x0982		VoC_bgt16_rr(LABEL_new_choose_table_ELSE_FOR2_IF,REG4,REG3)
0xFFC065C4,	//0x0984		VoC_NAD(IN_PARALLEL)	|	VoC_jump(LABEL_new_choose_table_ELSE_FOR3)
		//0x0986		LABEL_new_choose_table_ELSE_FOR2_IF
		//0x0986		VoC_endloop0
0xC07958A3,	//0x0986		VoC_add16_rr(REG1,REG1,REG7,IN_PARALLEL)	|	VoC_lw16inc_p(REG3,REG2,DEFAULT)
		//0x0988		LABEL_new_choose_table_ELSE_FOR3
0xF6245FC0,	//0x0988		VoC_movreg16(REG4,REG1,IN_PARALLEL)	|	VoC_push16(REG0,DEFAULT)
0xD90B5631,	//0x098a		VoC_lw32_sd(REG67,0x0,IN_PARALLEL)	|	VoC_lw16_sd(REG1,0x2,DEFAULT)
0x2B80DFC4,	//0x098c		VoC_jal(count_bit)(lo)	|	VoC_push16(REG4,DEFAULT)
0xDFC209C6,	//0x098e		VoC_push16(REG2,DEFAULT)	|	VoC_jal(count_bit)(hi)
0x590BD634,	//0x0990		VoC_lw32_sd(REG67,0x0,DEFAULT)	|	VoC_lw16_sd(REG4,0x2,DEFAULT)
0x2B80D651,	//0x0992		VoC_jal(count_bit)(lo)	|	VoC_lw16_sd(REG1,0x4,IN_PARALLEL)
0xD61309C6,	//0x0994		VoC_lw16_sd(REG3,0x0,DEFAULT)	|	VoC_jal(count_bit)(hi)
0x3493D630,	//0x0996		VoC_bngt16_rr(LABEL_new_choose_table_ELSE_END,REG2,REG3)(lo)	|	VoC_lw16_sd(REG0,0x2,DEFAULT)
0xD620099A,	//0x0998		VoC_lw16_sd(REG0,0x1,DEFAULT)	|	VoC_bngt16_rr(LABEL_new_choose_table_ELSE_END,REG2,REG3)(hi)
		//0x099a		LABEL_new_choose_table_ELSE_END
0xDF84DF83,	//0x099a		VoC_pop16(REG4,DEFAULT)	|	VoC_pop16(REG3,DEFAULT)
0xDF03DF84,	//0x099c		VoC_pop32(REG67,DEFAULT)	|	VoC_pop16(REG4,DEFAULT)
		//0x099d		LABEL_new_choose_table_END
		//0x099e		LABEL_new_choose_table_ENDALL
0xDF81DFA9,	//0x099e		VoC_pop16(REG1,DEFAULT)	|	VoC_pop16(RA,DEFAULT)
0xFFC06580,	//0x09a0		VoC_NAD(IN_PARALLEL)	|	VoC_return
		//0x09a2		bigv_bitcount
0xFF445FE9,	//0x09a2		VoC_lw32z(ACC0,IN_PARALLEL)	|	VoC_push16(RA,DEFAULT)
0x41201808,	//0x09a4		VoC_lw16i_set_inc(REG0,0x4120,0x2)
0x4132180A,	//0x09a6		VoC_lw16i_set_inc(REG2,0x4132,0x2)
0xD8847F45,	//0x09a8		VoC_lw16inc_p(REG4,REG0,IN_PARALLEL)	|	VoC_lw32z(ACC1,DEFAULT)
0xE03A600C,	//0x09aa		VoC_lw16i_short(ACC1_LO,0x3,IN_PARALLEL)	|	VoC_movreg16(RL6_LO,REG0,DEFAULT)
0xFFC0602F,	//0x09ac		VoC_NAD(IN_PARALLEL)	|	VoC_movreg16(RL7_HI,REG1,DEFAULT)
		//0x09ae		LABEL_bigv_bitcount_FOR
0x09BA3184,	//0x09ae		VoC_bez16_r(LABEL_bigv_bitcount_IF,REG4)
0xD826D8A7,	//0x09b0		VoC_lw16_p(REG6,REG2,DEFAULT)	|	VoC_lw16inc_p(REG7,REG2,DEFAULT)
0xFFC061E1,	//0x09b2		VoC_NAD(IN_PARALLEL)	|	VoC_movreg16(REG1,RL7_HI,DEFAULT)
0x09C62B80,	//0x09b4		VoC_jal(count_bit)
0xF0087003,	//0x09b6		VoC_lw16i_short(INC0,0x2,IN_PARALLEL)	|	VoC_lw16i_short(REG3,0x0,DEFAULT)
0xF00A490C,	//0x09b8		VoC_lw16i_short(INC2,0x2,IN_PARALLEL)	|	VoC_add32_rr(ACC0,ACC0,REG23,DEFAULT)
		//0x09ba		LABEL_bigv_bitcount_IF
0x09ADE180,	//0x09ba		VoC_sub32_rd(ACC1,ACC1,0x272f)(lo)	|	VoC_movreg16(REG0,RL6_LO,DEFAULT)
0x0702272F,	//0x09bc		VoC_add16_rd(REG2,REG0,0x273a)(lo)	|	VoC_sub32_rd(ACC1,ACC1,0x272f)(hi)
0x5884273A,	//0x09be		VoC_lw16inc_p(REG4,REG0,DEFAULT)	|	VoC_add16_rd(REG2,REG0,0x273a)(hi)
0x3345F60C,	//0x09c0		VoC_bnez32_r(LABEL_bigv_bitcount_FOR,ACC1)(lo)	|	VoC_movreg16(RL6_LO,REG0,IN_PARALLEL)
0xDFA909AE,	//0x09c2		VoC_pop16(RA,DEFAULT)	|	VoC_bnez32_r(LABEL_bigv_bitcount_FOR,ACC1)(hi)
0xE580FFC0,	//0x09c4		VoC_return	|	VoC_NOP
		//0x09c6		count_bit
0xE0557002,	//0x09c6		VoC_lw16i_short(REG5,0x5,IN_PARALLEL)	|	VoC_lw16i_short(REG2,0x0,DEFAULT)
0x0A063184,	//0x09c8		VoC_bez16_r(LABEL_COUNT_BIT_END,REG4)
0xC3BE452C,	//0x09ca		VoC_sub16_rr(REG6,REG6,REG7,IN_PARALLEL)	|	VoC_mult16_rr(REG4,REG4,REG5,DEFAULT)
0x253A1804,	//0x09cc		VoC_lw16i_set_inc(REG0,0x253a,0x1)
0xF80E4020,	//0x09ce		VoC_shr16_ri(REG6,0x1,IN_PARALLEL)	|	VoC_add16_rr(REG0,REG0,REG4,DEFAULT)
0x7F000AC3,	//0x09d0		VoC_lw16i(REG3,0xff00)
0xDE005804,	//0x09d2		VoC_inc_p(REG0,IN_PARALLEL)	|	VoC_lw16_p(REG4,REG0,DEFAULT)
0xF8FF641C,	//0x09d4		VoC_shr16_ri(REG7,0xffffffff,IN_PARALLEL)	|	VoC_and16_rr(REG4,REG3,DEFAULT)
0xF9445803,	//0x09d6		VoC_shru16_ri(REG4,0x8,IN_PARALLEL)	|	VoC_lw16_p(REG3,REG0,DEFAULT)
0x27340700,	//0x09d8		VoC_add16_rd(REG0,REG0,0x2734)
0xF0064079,	//0x09da		VoC_lw16i_short(INC2,0x1,IN_PARALLEL)	|	VoC_add16_rr(REG1,REG1,REG7,DEFAULT)
0xF0095800,	//0x09dc		VoC_lw16i_short(INC1,0x2,IN_PARALLEL)	|	VoC_lw16_p(REG0,REG0,DEFAULT)
0xFFC0600E,	//0x09de		VoC_NAD(IN_PARALLEL)	|	VoC_movreg16(RL7_LO,REG0,DEFAULT)
0x0A052E31,	//0x09e0		VoC_loop_r(1,REG6)
0xE0056852,	//0x09e2		VoC_lw16i_short(REG5,0x0,IN_PARALLEL)	|	VoC_loop_i_short(0x2,DEFAULT)
0x3186D896,	//0x09e4		VoC_bez16_r(LABEL_COUNT_BIT_IF1,REG6)(lo)	|	VoC_lw16inc_p(REG6,REG1,DEFAULT)
0xDE1009E8,	//0x09e6		VoC_inc_p(REG2,DEFAULT)	|	VoC_bez16_r(LABEL_COUNT_BIT_IF1,REG6)(hi)
		//0x09e8		LABEL_COUNT_BIT_IF1
0x274B3C36,	//0x09e8		VoC_bngt16_rd(LABEL_COUNT_BIT_IF2,REG6,0x274b)
0x27583C24,	//0x09ea		VoC_bngt16_rd(LABEL_COUNT_BIT_IF2,REG4,0x2758)
0xE0F6409A,	//0x09ec		VoC_lw16i_short(REG6,0xf,IN_PARALLEL)	|	VoC_add16_rr(REG2,REG2,REG3,DEFAULT)
		//0x09ee		LABEL_COUNT_BIT_IF2
0x09F231C5,	//0x09ee		VoC_bnez16_r(LABEL_COUNT_BIT_IF3,REG5)
0xE5C3C5A0,	//0x09f0		VoC_jump(LABEL_COUNT_BIT_IF31)	|	VoC_mult16_rr(REG0,REG6,REG4,DEFAULT)
		//0x09f2		LABEL_COUNT_BIT_IF3
0xFFC04030,	//0x09f2		VoC_NAD(IN_PARALLEL)	|	VoC_add16_rr(REG0,REG0,REG6,DEFAULT)
		//0x09f4		LABEL_COUNT_BIT_IF31
		//0x09f4		VoC_endloop0
0xE0177025,	//0x09f4		VoC_lw16i_short(REG7,0x1,IN_PARALLEL)	|	VoC_lw16i_short(REG5,0x1,DEFAULT)
0xF8086006,	//0x09f6		VoC_shr16_ri(REG0,0x1,IN_PARALLEL)	|	VoC_movreg16(REG6,REG0,DEFAULT)
0xF7C56437,	//0x09f8		VoC_movreg16(REG5,RL7_LO,IN_PARALLEL)	|	VoC_and16_rr(REG7,REG6,DEFAULT)
0x3187C146,	//0x09fa		VoC_bez16_r(LABEL_ADD_HT1,REG7)(lo)	|	VoC_add16_rr(REG6,REG5,REG0,DEFAULT)
0xD8660A02,	//0x09fc		VoC_lw16_p(REG6,REG6,DEFAULT)	|	VoC_bez16_r(LABEL_ADD_HT1,REG7)(hi)
0x7F001646,	//0x09fe		VoC_and16_ri(REG6,0xff00)
0xE5C4F946,	//0x0a00		VoC_jump(LABEL_HIGHI11)	|	VoC_shru16_ri(REG6,0x8,DEFAULT)
		//0x0a02		LABEL_ADD_HT1
0x1606D866,	//0x0a02		VoC_and16_ri(REG6,0xff)(lo)	|	VoC_lw16_p(REG6,REG6,DEFAULT)
0xC0B200FF,	//0x0a04		VoC_add16_rr(REG2,REG2,REG6,DEFAULT)	|	VoC_and16_ri(REG6,0xff)(hi)
		//0x0a05		LABEL_HIGHI11
		//0x0a05		VoC_endloop1
		//0x0a06		LABEL_COUNT_BIT_END
0xDFE9E580,	//0x0a06		VoC_push16(RA,DEFAULT)	|	VoC_return
		//0x0a07		bin_search_StepSize
0xE8807001,	//0x0a08		VoC_lw16i_short(REG0,0xffffff88,IN_PARALLEL)	|	VoC_lw16i_short(REG1,0x0,DEFAULT)
0xE0046003,	//0x0a0a		VoC_lw16i_short(REG4,0x0,IN_PARALLEL)	|	VoC_movreg16(REG3,REG0,DEFAULT)
0x5FC3DFC2,	//0x0a0c		VoC_push16(REG3,DEFAULT)	|	VoC_push16(REG2,DEFAULT)
0x5FC4DF45,	//0x0a0e		VoC_push16(REG4,DEFAULT)	|	VoC_push32(ACC1,IN_PARALLEL)
0xDD08DF40,	//0x0a10		VoC_sw32_sd(REG01,0x0,DEFAULT)	|	VoC_push32(REG01,IN_PARALLEL)
		//0x0a11		LABEL_bin_search_StepSize_DO
0xC00B5A33,	//0x0a12		VoC_add16_rr(REG3,REG0,REG1,IN_PARALLEL)	|	VoC_sw16_sd(REG3,0x2,DEFAULT)
0xD924F80B,	//0x0a14		VoC_lw32_sd(ACC0,0x3,DEFAULT)	|	VoC_shr16_ri(REG3,0x1,DEFAULT)
0xDA236064,	//0x0a16		VoC_sw16_sd(REG3,0x1,IN_PARALLEL)	|	VoC_movreg16(REG4,REG3,DEFAULT)
0xF00B5673,	//0x0a18		VoC_lw16i_short(INC3,0x2,IN_PARALLEL)	|	VoC_lw16_sd(REG3,0x6,DEFAULT)
0x071E2B80,	//0x0a1a		VoC_jal(quantize)
0x639C5136,	//0x0a1c		VoC_bgt32_rd(LABEL_bin_search_StepSize_ELSE,RL6,0x639c)
0xF3FB5673,	//0x0a1e		VoC_lw16i_short(INC3,0xfffffffe,IN_PARALLEL)	|	VoC_lw16_sd(REG3,0x6,DEFAULT)
0x07DA2B80,	//0x0a20		VoC_jal(calc_runlen)
0xF00A5672,	//0x0a22		VoC_lw16i_short(INC2,0x2,IN_PARALLEL)	|	VoC_lw16_sd(REG2,0x6,DEFAULT)
0x08082B80,	//0x0a24		VoC_jal(count1_bitcount)
0x2B80DF44,	//0x0a26		VoC_jal(subdivide)(lo)	|	VoC_push32(ACC0,DEFAULT)
0xD6700862,	//0x0a28		VoC_lw16_sd(REG0,0x6,DEFAULT)	|	VoC_jal(subdivide)(hi)
0x08AC2B80,	//0x0a2a		VoC_jal(bigv_tab_select)
0x2B80D671,	//0x0a2c		VoC_jal(bigv_bitcount)(lo)	|	VoC_lw16_sd(REG1,0x6,DEFAULT)
0xDF0509A2,	//0x0a2e		VoC_pop32(ACC1,DEFAULT)	|	VoC_jal(bigv_bitcount)(hi)
0xE5C3C92C,	//0x0a30		VoC_jump(LABEL_bin_search_StepSize_IFEND)	|	VoC_add32_rr(ACC0,ACC0,ACC1,DEFAULT)
		//0x0a32		LABEL_bin_search_StepSize_ELSE
0x278A1484,	//0x0a32		VoC_lw32_d(ACC0,0x278a)
		//0x0a34		LABEL_bin_search_StepSize_IFEND
0xD908D915,	//0x0a34		VoC_lw32_sd(REG01,0x0,DEFAULT)	|	VoC_lw32_sd(ACC1,0x1,DEFAULT)
0x0A3A36A5,	//0x0a36		VoC_bngt32_rr(LABEL_bin_search_StepSize_IFEND11,ACC0,ACC1)
0xE5C2D620,	//0x0a38		VoC_jump(LABEL_bin_search_StepSize_IFEND11_NEXT)	|	VoC_lw16_sd(REG0,0x1,DEFAULT)
		//0x0a3a		LABEL_bin_search_StepSize_IFEND11
0xD614D621,	//0x0a3a		VoC_lw16_sd(REG4,0x0,DEFAULT)	|	VoC_lw16_sd(REG1,0x1,DEFAULT)
		//0x0a3b		LABEL_bin_search_StepSize_IFEND11_NEXT
0x272F0724,	//0x0a3c		VoC_add16_rd(REG4,REG4,0x272f)
0x27303C1C,	//0x0a3e		VoC_bngt16_rd(LABEL_bin_search_StepSize_IFEND2,REG4,0x2730)
0xDA14E5D0,	//0x0a40		VoC_sw16_sd(REG4,0x0,DEFAULT)	|	VoC_jump(LABEL_bin_search_StepSize_BREAK)
		//0x0a41		LABEL_bin_search_StepSize_IFEND2
0x372CD623,	//0x0a42		VoC_be32_rr(LABEL_bin_search_StepSize_BREAK,ACC1,ACC0)(lo)	|	VoC_lw16_sd(REG3,0x1,DEFAULT)
0xD6320A50,	//0x0a44		VoC_lw16_sd(REG2,0x2,DEFAULT)	|	VoC_be32_rr(LABEL_bin_search_StepSize_BREAK,ACC1,ACC0)(hi)
0x3C2DC29D,	//0x0a46		VoC_bngt16_rd(LABLE_COMPILE_8,REG5,0x272f)(lo)	|	VoC_sub16_rr(REG5,REG2,REG3,DEFAULT)
0x2B00272F,	//0x0a48		VoC_jump_lg(LABEL_bin_search_StepSize_DO)(lo)	|	VoC_bngt16_rd(LABLE_COMPILE_8,REG5,0x272f)(hi)
0xFFC00A11,	//0x0a4a		VoC_NAD	|	VoC_jump_lg(LABEL_bin_search_StepSize_DO)(hi)
		//0x0a4c		LABLE_COMPILE_8
0x27804C25,	//0x0a4c		VoC_bnlt16_rd(LABEL_bin_search_StepSize_BREAK,REG5,0x2780)
0x0A112B00,	//0x0a4e		VoC_jump_lg(LABEL_bin_search_StepSize_DO)
		//0x0a50		LABEL_bin_search_StepSize_BREAK
0xDF005F84,	//0x0a50		VoC_pop32(REG01,IN_PARALLEL)	|	VoC_pop16(REG4,DEFAULT)
0xDF055F83,	//0x0a52		VoC_pop32(ACC1,IN_PARALLEL)	|	VoC_pop16(REG3,DEFAULT)
0xDFA9DF82,	//0x0a54		VoC_pop16(RA,DEFAULT)	|	VoC_pop16(REG2,DEFAULT)
0x413A1503,	//0x0a56		VoC_sw16_d(REG3,0x413a)
0xDFE9E580,	//0x0a58		VoC_push16(RA,DEFAULT)	|	VoC_return
		//0x0a59		CS_L3_format_bitstream
0x11006E24,	//0x0a5a		VoC_bnez16_d(L3_format_bitstream_Initial_done,0x1100)
0x111A1808,	//0x0a5c		VoC_lw16i_set_inc(REG0,0x111a,0x2)
0xE901FF44,	//0x0a5e		VoC_loop_i_short(0x8,DEFAULT)	|	VoC_lw32z(ACC0,DEFAULT)
		//0x0a60		VoC_endloop0
0x1808DDC4,	//0x0a60		VoC_lw16i_set_inc(REG0,0x111b,0x2)(lo)	|	VoC_sw32inc_p(ACC0,REG0,DEFAULT)
0x0A82111B,	//0x0a62		VoC_lw16i(REG2,0x53a0)(lo)	|	VoC_lw16i_set_inc(REG0,0x111b,0x2)(hi)
0x0A8353A0,	//0x0a64		VoC_lw16i(REG3,0x53be)(lo)	|	VoC_lw16i(REG2,0x53a0)(hi)
0xDC8253BE,	//0x0a66		VoC_sw16inc_p(REG2,REG0,DEFAULT)	|	VoC_lw16i(REG3,0x53be)(hi)
0x0A82DC83,	//0x0a68		VoC_lw16i(REG2,0x53c4)(lo)	|	VoC_sw16inc_p(REG3,REG0,DEFAULT)
0x0A8353C4,	//0x0a6a		VoC_lw16i(REG3,0x53cc)(lo)	|	VoC_lw16i(REG2,0x53c4)(hi)
0xDC8253CC,	//0x0a6c		VoC_sw16inc_p(REG2,REG0,DEFAULT)	|	VoC_lw16i(REG3,0x53cc)(hi)
0x0A82DC83,	//0x0a6e		VoC_lw16i(REG2,0x53d4)(lo)	|	VoC_sw16inc_p(REG3,REG0,DEFAULT)
0x0A8353D4,	//0x0a70		VoC_lw16i(REG3,0x53ee)(lo)	|	VoC_lw16i(REG2,0x53d4)(hi)
0xDC8253EE,	//0x0a72		VoC_sw16inc_p(REG2,REG0,DEFAULT)	|	VoC_lw16i(REG3,0x53ee)(hi)
0x0A82DC83,	//0x0a74		VoC_lw16i(REG2,0x5408)(lo)	|	VoC_sw16inc_p(REG3,REG0,DEFAULT)
0x0A835408,	//0x0a76		VoC_lw16i(REG3,0x5422)(lo)	|	VoC_lw16i(REG2,0x5408)(hi)
0xDC825422,	//0x0a78		VoC_sw16inc_p(REG2,REG0,DEFAULT)	|	VoC_lw16i(REG3,0x5422)(hi)
0xDC83F022,	//0x0a7a		VoC_sw16inc_p(REG3,REG0,DEFAULT)	|	VoC_lw16i_short(REG2,0x1,DEFAULT)
0x11001502,	//0x0a7c		VoC_sw16_d(REG2,0x1100)
		//0x0a7e		L3_format_bitstream_Initial_done
0x0AB22B80,	//0x0a7e		VoC_jal(CS_encodeSideInfo)
0x0A862B80,	//0x0a80		VoC_jal(CS_encodeMainData)
0xFFC0DFA9,	//0x0a82		VoC_NOP	|	VoC_pop16(RA,DEFAULT)
0xFFC06580,	//0x0a84		VoC_NAD(IN_PARALLEL)	|	VoC_return
		//0x0a86		CS_encodeMainData
0xE0065FE9,	//0x0a86		VoC_lw16i_short(REG6,0x0,IN_PARALLEL)	|	VoC_push16(RA,DEFAULT)
0x15B6180A,	//0x0a88		VoC_lw16i_set_inc(REG2,0x15b6,0x2)
0x405E1809,	//0x0a8a		VoC_lw16i_set_inc(REG1,0x405e,0x2)
		//0x0a8c		encodeMainData_gr_loop_begin
0xDFC6F006,	//0x0a8c		VoC_push16(REG6,DEFAULT)	|	VoC_lw16i_short(REG6,0x0,DEFAULT)
		//0x0a8e		encodeMainData_ch_loop_begin
0xDFC2DFC6,	//0x0a8e		VoC_push16(REG2,DEFAULT)	|	VoC_push16(REG6,DEFAULT)
0xF00B5FC1,	//0x0a90		VoC_lw16i_short(INC3,0x2,IN_PARALLEL)	|	VoC_push16(REG1,DEFAULT)
0x54401808,	//0x0a92		VoC_lw16i_set_inc(REG0,0x5440,0x2)
0x0B3E2B80,	//0x0a94		VoC_jal(CS_Huffmancodebits)
0x180BE062,	//0x0a96		VoC_lw16i_set_inc(REG3,0x5440,0x2)(lo)	|	VoC_movreg16(REG2,REG3,DEFAULT)
0xF0535440,	//0x0a98		VoC_lw16i_short(INC3,0x2,DEFAULT)	|	VoC_lw16i_set_inc(REG3,0x5440,0x2)(hi)
0x0CE52B80,	//0x0a9a		VoC_jal(CS_BF_BitstreamFrame)
0xDF82DF81,	//0x0a9c		VoC_pop16(REG2,DEFAULT)	|	VoC_pop16(REG1,DEFAULT)
0x277C0712,	//0x0a9e		VoC_add16_rd(REG2,REG2,0x277c)
0x27650709,	//0x0aa0		VoC_add16_rd(REG1,REG1,0x2765)
0x0736DF86,	//0x0aa2		VoC_add16_rd(REG6,REG6,0x272f)(lo)	|	VoC_pop16(REG6,DEFAULT)
0x4A8E272F,	//0x0aa4		VoC_blt16_rd(encodeMainData_ch_loop_begin,REG6,0x2733)(lo)	|	VoC_add16_rd(REG6,REG6,0x272f)(hi)
0xDF862733,	//0x0aa6		VoC_pop16(REG6,DEFAULT)	|	VoC_blt16_rd(encodeMainData_ch_loop_begin,REG6,0x2733)(hi)
0x272F0736,	//0x0aa8		VoC_add16_rd(REG6,REG6,0x272f)
0x0800180A,	//0x0aaa		VoC_lw16i_set_inc(REG2,0x800,0x2)
0x27334A06,	//0x0aac		VoC_blt16_rd(encodeMainData_gr_loop_begin,REG6,0x2733)
0xFFC0DFA9,	//0x0aae		VoC_NOP	|	VoC_pop16(RA,DEFAULT)
0xFFC06580,	//0x0ab0		VoC_NAD(IN_PARALLEL)	|	VoC_return
		//0x0ab2		CS_encodeSideInfo
0x111A1480,	//0x0ab2		VoC_lw32_d(REG01,0x111a)
0xF0097000,	//0x0ab4		VoC_lw16i_short(INC1,0x2,IN_PARALLEL)	|	VoC_lw16i_short(REG0,0x0,DEFAULT)
0x0FFF0A86,	//0x0ab6		VoC_lw16i(REG6,0xfff)
0xFF07F187,	//0x0ab8		VoC_movreg32(RL7,REG01,DEFAULT)	|	VoC_lw16i_short(REG7,0xc,DEFAULT)
0x1406DDCB,	//0x0aba		VoC_lw16_d(REG6,0x403f)(lo)	|	VoC_sw32inc_p(REG67,REG1,DEFAULT)
0xF027403F,	//0x0abc		VoC_lw16i_short(REG7,0x1,DEFAULT)	|	VoC_lw16_d(REG6,0x403f)(hi)
0xE0257024,	//0x0abe		VoC_lw16i_short(REG5,0x2,IN_PARALLEL)	|	VoC_lw16i_short(REG4,0x1,DEFAULT)
0x1406DDCB,	//0x0ac0		VoC_lw16_d(REG6,0x4040)(lo)	|	VoC_sw32inc_p(REG67,REG1,DEFAULT)
0xDDCA4040,	//0x0ac2		VoC_sw32inc_p(REG45,REG1,DEFAULT)	|	VoC_lw16_d(REG6,0x4040)(hi)
0xF027E386,	//0x0ac4		VoC_lw16i_short(REG7,0x1,DEFAULT)	|	VoC_not16_r(REG6,DEFAULT)
0x403C1404,	//0x0ac6		VoC_lw16_d(REG4,0x403c)
0xE0455DCB,	//0x0ac8		VoC_lw16i_short(REG5,0x4,IN_PARALLEL)	|	VoC_sw32inc_p(REG67,REG1,DEFAULT)
0x403D1406,	//0x0aca		VoC_lw16_d(REG6,0x403d)
0xE0275DCA,	//0x0acc		VoC_lw16i_short(REG7,0x2,IN_PARALLEL)	|	VoC_sw32inc_p(REG45,REG1,DEFAULT)
0x403E1404,	//0x0ace		VoC_lw16_d(REG4,0x403e)
0xE0155DCB,	//0x0ad0		VoC_lw16i_short(REG5,0x1,IN_PARALLEL)	|	VoC_sw32inc_p(REG67,REG1,DEFAULT)
0x40431406,	//0x0ad2		VoC_lw16_d(REG6,0x4043)
0xE0175DCA,	//0x0ad4		VoC_lw16i_short(REG7,0x1,IN_PARALLEL)	|	VoC_sw32inc_p(REG45,REG1,DEFAULT)
0x40411404,	//0x0ad6		VoC_lw16_d(REG4,0x4041)
0xE0255DCB,	//0x0ad8		VoC_lw16i_short(REG5,0x2,IN_PARALLEL)	|	VoC_sw32inc_p(REG67,REG1,DEFAULT)
0x40441406,	//0x0ada		VoC_lw16_d(REG6,0x4044)
0xE0275DCA,	//0x0adc		VoC_lw16i_short(REG7,0x2,IN_PARALLEL)	|	VoC_sw32inc_p(REG45,REG1,DEFAULT)
0x40451404,	//0x0ade		VoC_lw16_d(REG4,0x4045)
0xE0155DCB,	//0x0ae0		VoC_lw16i_short(REG5,0x1,IN_PARALLEL)	|	VoC_sw32inc_p(REG67,REG1,DEFAULT)
0x40461406,	//0x0ae2		VoC_lw16_d(REG6,0x4046)
0xE0175DCA,	//0x0ae4		VoC_lw16i_short(REG7,0x1,IN_PARALLEL)	|	VoC_sw32inc_p(REG45,REG1,DEFAULT)
0x40421404,	//0x0ae6		VoC_lw16_d(REG4,0x4042)
0xE0255DCB,	//0x0ae8		VoC_lw16i_short(REG5,0x2,IN_PARALLEL)	|	VoC_sw32inc_p(REG67,REG1,DEFAULT)
0xDDCAF1AE,	//0x0aea		VoC_sw32inc_p(REG45,REG1,DEFAULT)	|	VoC_lw16i_short(RL7_LO,0xd,DEFAULT)
0x111A1587,	//0x0aec		VoC_sw32_d(RL7,0x111a)
0x1808F001,	//0x0aee		VoC_lw16i_set_inc(REG0,0x111c,0x2)(lo)	|	VoC_lw16i_short(REG1,0x0,DEFAULT)
0xE8E1111C,	//0x0af0		VoC_loop_i_short(0x7,DEFAULT)	|	VoC_lw16i_set_inc(REG0,0x111c,0x2)(hi)
		//0x0af2		VoC_endloop0
0x180ADC81,	//0x0af2		VoC_lw16i_set_inc(REG2,0x4048,0x2)(lo)	|	VoC_sw16inc_p(REG1,REG0,DEFAULT)
0x14804048,	//0x0af4		VoC_lw32_d(REG01,0x111c)(lo)	|	VoC_lw16i_set_inc(REG2,0x4048,0x2)(hi)
0xD9D3111C,	//0x0af6		VoC_lw32inc_p(REG67,REG2,DEFAULT)	|	VoC_lw32_d(REG01,0x111c)(hi)
0xF045F127,	//0x0af8		VoC_lw16i_short(REG5,0x2,DEFAULT)	|	VoC_lw16i_short(REG7,0x9,DEFAULT)
0xD9D3DDCB,	//0x0afa		VoC_lw32inc_p(REG67,REG2,DEFAULT)	|	VoC_sw32inc_p(REG67,REG1,DEFAULT)
0xF044F067,	//0x0afc		VoC_lw16i_short(REG4,0x2,DEFAULT)	|	VoC_lw16i_short(REG7,0x3,DEFAULT)
0x1504DDCB,	//0x0afe		VoC_sw16_d(REG4,0x111c)(lo)	|	VoC_sw32inc_p(REG67,REG1,DEFAULT)
0x1808111C,	//0x0b00		VoC_lw16i_set_inc(REG0,0x111e,0x2)(lo)	|	VoC_sw16_d(REG4,0x111c)(hi)
0x59D3111E,	//0x0b02		VoC_lw32inc_p(REG67,REG2,DEFAULT)	|	VoC_lw16i_set_inc(REG0,0x111e,0x2)(hi)
0xD986E003,	//0x0b04		VoC_lw32_p(RL6,REG0,DEFAULT)	|	VoC_lw16i_short(REG3,0x0,IN_PARALLEL)
0x2E29E1A1,	//0x0b06		VoC_loop_r(1,REG5)(lo)	|	VoC_movreg16(REG1,RL6_HI,DEFAULT)
0xE8840B11,	//0x0b08		VoC_loop_i_short(0x4,DEFAULT)	|	VoC_loop_r(1,REG5)(hi)
0xE01758A6,	//0x0b0a		VoC_lw16i_short(REG7,0x1,IN_PARALLEL)	|	VoC_lw16inc_p(REG6,REG2,DEFAULT)
0xDDCBC0FB,	//0x0b0c		VoC_sw32inc_p(REG67,REG1,DEFAULT)	|	VoC_add16_rr(REG3,REG3,REG7,DEFAULT)
		//0x0b0d		VoC_endloop0
0x5986DC83,	//0x0b0e		VoC_lw32_p(RL6,REG0,DEFAULT)	|	VoC_sw16inc_p(REG3,REG0,DEFAULT)
0xE1A1E003,	//0x0b10		VoC_movreg16(REG1,RL6_HI,DEFAULT)	|	VoC_lw16i_short(REG3,0x0,IN_PARALLEL)
		//0x0b11		VoC_endloop1
0x11221808,	//0x0b12		VoC_lw16i_set_inc(REG0,0x1122,0x2)
0xFFC07044,	//0x0b14		VoC_NAD(IN_PARALLEL)	|	VoC_lw16i_short(REG4,0x2,DEFAULT)
		//0x0b16		encodeSideInfo_gr_loop
0x0B352E29,	//0x0b16		VoC_loop_r(1,REG5)
0x1807D987,	//0x0b18		VoC_lw16i_set_inc(REG3,0x2722,0x1)(lo)	|	VoC_lw32_p(RL7,REG0,DEFAULT)
0xFFC02722,	//0x0b1a		VoC_NAD	|	VoC_lw16i_set_inc(REG3,0x2722,0x1)(hi)
0xF7E16845,	//0x0b1c		VoC_movreg16(REG1,RL7_HI,IN_PARALLEL)	|	VoC_loop_i_short(0x2,DEFAULT)
0xD8B758A6,	//0x0b1e		VoC_lw16inc_p(REG7,REG3,IN_PARALLEL)	|	VoC_lw16inc_p(REG6,REG2,DEFAULT)
0xDDCBFFC0,	//0x0b20		VoC_sw32inc_p(REG67,REG1,DEFAULT)	|	VoC_NOP
		//0x0b21		VoC_endloop0
0xE844D9D3,	//0x0b22		VoC_loop_i_short(0x2,DEFAULT)	|	VoC_lw32inc_p(REG67,REG2,DEFAULT)
0xD8B758A6,	//0x0b24		VoC_lw16inc_p(REG7,REG3,IN_PARALLEL)	|	VoC_lw16inc_p(REG6,REG2,DEFAULT)
0xDDCBFFC0,	//0x0b26		VoC_sw32inc_p(REG67,REG1,DEFAULT)	|	VoC_NOP
		//0x0b27		VoC_endloop0
0xE0177006,	//0x0b28		VoC_lw16i_short(REG7,0x1,IN_PARALLEL)	|	VoC_lw16i_short(REG6,0x0,DEFAULT)
0xDDCBFFC0,	//0x0b2a		VoC_sw32inc_p(REG67,REG1,DEFAULT)	|	VoC_NOP
0xE904FFC0,	//0x0b2c		VoC_loop_i_short(0x8,DEFAULT)	|	VoC_NAD
0xD8B758A6,	//0x0b2e		VoC_lw16inc_p(REG7,REG3,IN_PARALLEL)	|	VoC_lw16inc_p(REG6,REG2,DEFAULT)
0xDDCBFFC0,	//0x0b30		VoC_sw32inc_p(REG67,REG1,DEFAULT)	|	VoC_NOP
		//0x0b31		VoC_endloop0
0x0712F1A7,	//0x0b32		VoC_add16_rd(REG2,REG2,0x2747)(lo)	|	VoC_lw16i_short(REG7,0xd,DEFAULT)
0xDC872747,	//0x0b34		VoC_sw16inc_p(REG7,REG0,DEFAULT)	|	VoC_add16_rd(REG2,REG2,0x2747)(hi)
		//0x0b35		VoC_endloop1
0x40BA180A,	//0x0b36		VoC_lw16i_set_inc(REG2,0x40ba,0x2)
0x272F07A4,	//0x0b38		VoC_sub16_rd(REG4,REG4,0x272f)
0x0B1631C4,	//0x0b3a		VoC_bnez16_r(encodeSideInfo_gr_loop,REG4)
0xFFC06580,	//0x0b3c		VoC_NAD(IN_PARALLEL)	|	VoC_return
		//0x0b3e		CS_Huffmancodebits
0xFF455FE9,	//0x0b3e		VoC_lw32z(ACC1,IN_PARALLEL)	|	VoC_push16(RA,DEFAULT)
0x403F1406,	//0x0b40		VoC_lw16_d(REG6,0x403f)
0x27340836,	//0x0b42		VoC_mult16_rd(REG6,REG6,0x2734)
0x2731070B,	//0x0b44		VoC_add16_rd(REG3,REG1,0x2731)
0x403D0736,	//0x0b46		VoC_add16_rd(REG6,REG6,0x403d)
0x275B0836,	//0x0b48		VoC_mult16_rd(REG6,REG6,0x275b)
0x25E40A84,	//0x0b4a		VoC_lw16i(REG4,0x25e4)
0xD9DAC1A6,	//0x0b4c		VoC_lw32inc_p(REG45,REG3,DEFAULT)	|	VoC_add16_rr(REG6,REG6,REG4,DEFAULT)
0x272F0727,	//0x0b4e		VoC_add16_rd(REG7,REG4,0x272f)
0x0724D9DA,	//0x0b50		VoC_add16_rd(REG4,REG4,0x272f)(lo)	|	VoC_lw32inc_p(REG45,REG3,DEFAULT)
0xC13C272F,	//0x0b52		VoC_add16_rr(REG4,REG4,REG7,DEFAULT)	|	VoC_add16_rd(REG4,REG4,0x272f)(hi)
0xC1A5C1BF,	//0x0b54		VoC_add16_rr(REG5,REG6,REG4,DEFAULT)	|	VoC_add16_rr(REG7,REG6,REG7,DEFAULT)
0x070FD874,	//0x0b56		VoC_add16_rd(REG7,REG1,0x2733)(lo)	|	VoC_lw16_p(REG4,REG7,DEFAULT)
0xD8552733,	//0x0b58		VoC_lw16_p(REG5,REG5,DEFAULT)	|	VoC_add16_rd(REG7,REG1,0x2733)(hi)
0xF9FFD877,	//0x0b5a		VoC_shru16_ri(REG7,0xffffffff,DEFAULT)	|	VoC_lw16_p(REG7,REG7,DEFAULT)
0xFF457006,	//0x0b5c		VoC_lw32z(ACC1,IN_PARALLEL)	|	VoC_lw16i_short(REG6,0x0,DEFAULT)
0x0B923187,	//0x0b5e		VoC_bez16_r(Huffmancodebits_part2,REG7)
		//0x0b60		Huffmancodebits_bigvalues_loop_start
0x2735070B,	//0x0b60		VoC_add16_rd(REG3,REG1,0x2735)
0x3426DF43,	//0x0b62		VoC_bgt16_rr(Huffmancodebits_bigvalues_loop_100,REG4,REG6)(lo)	|	VoC_push32(REG67,DEFAULT)
0x070B0B6B,	//0x0b64		VoC_add16_rd(REG3,REG1,0x273e)(lo)	|	VoC_bgt16_rr(Huffmancodebits_bigvalues_loop_100,REG4,REG6)(hi)
0x342E273E,	//0x0b66		VoC_bgt16_rr(Huffmancodebits_bigvalues_loop_100,REG5,REG6)(lo)	|	VoC_add16_rd(REG3,REG1,0x273e)(hi)
0x070B0B6B,	//0x0b68		VoC_add16_rd(REG3,REG1,0x274b)(lo)	|	VoC_bgt16_rr(Huffmancodebits_bigvalues_loop_100,REG5,REG6)(hi)
0xD9D6274B,	//0x0b6a		VoC_lw32inc_p(RL6,REG2,DEFAULT)	|	VoC_add16_rd(REG3,REG1,0x274b)(hi)
		//0x0b6b		Huffmancodebits_bigvalues_loop_100
0xD833D9D7,	//0x0b6c		VoC_lw16_p(REG3,REG3,DEFAULT)	|	VoC_lw32inc_p(RL7,REG2,DEFAULT)
0xDFC25F42,	//0x0b6e		VoC_push16(REG2,IN_PARALLEL)	|	VoC_push32(REG45,DEFAULT)
0x0B8A3183,	//0x0b70		VoC_bez16_r(Huffmancodebits_bigvalues_loop_200,REG3)
0xDF45DF40,	//0x0b72		VoC_push32(ACC1,DEFAULT)	|	VoC_push32(REG01,DEFAULT)
0x0C262B80,	//0x0b74		VoC_jal(CS_HuffmanCode)
0xF6286006,	//0x0b76		VoC_movreg16(ACC0_LO,REG1,IN_PARALLEL)	|	VoC_movreg16(REG6,REG0,DEFAULT)
0xE0075F02,	//0x0b78		VoC_lw16i_short(REG7,0x0,IN_PARALLEL)	|	VoC_pop32(REG45,DEFAULT)
0xC15D5F00,	//0x0b7a		VoC_add16_rr(REG5,REG5,REG3,IN_PARALLEL)	|	VoC_pop32(REG01,DEFAULT)
0x272F0724,	//0x0b7c		VoC_add16_rd(REG4,REG4,0x272f)
0x5DC3F009,	//0x0b7e		VoC_sw32inc_p(REG67,REG0,DEFAULT)	|	VoC_lw16i_short(ACC0_HI,0x0,DEFAULT)
0x5DC4F646,	//0x0b80		VoC_sw32inc_p(ACC0,REG0,DEFAULT)	|	VoC_movreg16(REG6,REG2,IN_PARALLEL)
0x3303F00A,	//0x0b82		VoC_bez32_r(Huffmancodebits_1010,REG67)(lo)	|	VoC_lw16i_short(INC2,0x2,IN_PARALLEL)
0xDDC60B89,	//0x0b84		VoC_sw32inc_p(RL6,REG0,DEFAULT)	|	VoC_bez32_r(Huffmancodebits_1010,REG67)(hi)
0x0724DDC3,	//0x0b86		VoC_add16_rd(REG4,REG4,0x272f)(lo)	|	VoC_sw32inc_p(REG67,REG0,DEFAULT)
0xFF15272F,	//0x0b88		VoC_movreg32(ACC1,REG45,DEFAULT)	|	VoC_add16_rd(REG4,REG4,0x272f)(hi)
		//0x0b89		Huffmancodebits_1010
		//0x0b8a		Huffmancodebits_bigvalues_loop_200
0xDF825F02,	//0x0b8a		VoC_pop16(REG2,IN_PARALLEL)	|	VoC_pop32(REG45,DEFAULT)
0x0736DF03,	//0x0b8c		VoC_add16_rd(REG6,REG6,0x2733)(lo)	|	VoC_pop32(REG67,DEFAULT)
0x343E2733,	//0x0b8e		VoC_bgt16_rr(Huffmancodebits_bigvalues_loop_start,REG7,REG6)(lo)	|	VoC_add16_rd(REG6,REG6,0x2733)(hi)
0xFFC00B60,	//0x0b90		VoC_NAD	|	VoC_bgt16_rr(Huffmancodebits_bigvalues_loop_start,REG7,REG6)(hi)
		//0x0b92		Huffmancodebits_part2
0x273C070C,	//0x0b92		VoC_add16_rd(REG4,REG1,0x273c)
0x2737070D,	//0x0b94		VoC_add16_rd(REG5,REG1,0x2737)
0xD855D844,	//0x0b96		VoC_lw16_p(REG5,REG5,DEFAULT)	|	VoC_lw16_p(REG4,REG4,DEFAULT)
0x2738072D,	//0x0b98		VoC_add16_rd(REG5,REG5,0x2738)
0x273D082D,	//0x0b9a		VoC_mult16_rd(REG5,REG5,0x273d)
0x253A1807,	//0x0b9c		VoC_lw16i_set_inc(REG3,0x253a,0x1)
0xDFC140EB,	//0x0b9e		VoC_push16(REG1,IN_PARALLEL)	|	VoC_add16_rr(REG3,REG3,REG5,DEFAULT)
0x2734071B,	//0x0ba0		VoC_add16_rd(REG3,REG3,0x2734)
0x0BAE3184,	//0x0ba2		VoC_bez16_r(Huffmancodebits_101010,REG4)
0xD9D26709,	//0x0ba4		VoC_lw32inc_p(REG45,REG2,IN_PARALLEL)	|	VoC_loop_r_short(REG4,DEFAULT)
0x59D3D9D6,	//0x0ba6		VoC_lw32inc_p(REG67,REG2,DEFAULT)	|	VoC_lw32inc_p(RL6,REG2,DEFAULT)
0xD9D6F785,	//0x0ba8		VoC_lw32inc_p(RL6,REG2,DEFAULT)	|	VoC_movreg16(REG5,RL6_LO,IN_PARALLEL)
0x2B80E187,	//0x0baa		VoC_jal(CS_L3_huffman_coder_count1)(lo)	|	VoC_movreg16(REG7,RL6_LO,DEFAULT)
0xD9D20BD0,	//0x0bac		VoC_lw32inc_p(REG45,REG2,DEFAULT)	|	VoC_jal(CS_L3_huffman_coder_count1)(hi)
		//0x0bad		VoC_endloop0
		//0x0bae		Huffmancodebits_101010
0x070BDF81,	//0x0bae		VoC_add16_rd(REG3,REG1,0x2740)(lo)	|	VoC_pop16(REG1,DEFAULT)
0x58142740,	//0x0bb0		VoC_lw16_p(REG4,REG1,DEFAULT)	|	VoC_add16_rd(REG3,REG1,0x2740)(hi)
0x851CF765,	//0x0bb2		VoC_sub16_rp(REG4,REG4,REG3,DEFAULT)	|	VoC_movreg16(REG5,ACC1_HI,IN_PARALLEL)
0xF743432C,	//0x0bb4		VoC_movreg16(REG3,ACC1_LO,IN_PARALLEL)	|	VoC_sub16_rr(REG4,REG4,REG5,DEFAULT)
0x0BCC3184,	//0x0bb6		VoC_bez16_r(Huffmancodebits_end,REG4)
0xF92C6085,	//0x0bb8		VoC_shru16_ri(REG4,0x5,IN_PARALLEL)	|	VoC_movreg16(REG5,REG4,DEFAULT)
0x001F1605,	//0x0bba		VoC_and16_ri(REG5,0x1f)
0xEFF677E7,	//0x0bbc		VoC_lw16i_short(REG6,0xffffffff,IN_PARALLEL)	|	VoC_lw16i_short(REG7,0xffffffff,DEFAULT)
0x0BC63184,	//0x0bbe		VoC_bez16_r(Huffmancodebits_300,REG4)
0xE2086703,	//0x0bc0		VoC_lw16i_short(ACC0_LO,0x20,IN_PARALLEL)	|	VoC_loop_r_short(REG4,DEFAULT)
0x5DC4DDC3,	//0x0bc2		VoC_sw32inc_p(ACC0,REG0,DEFAULT)	|	VoC_sw32inc_p(REG67,REG0,DEFAULT)
		//0x0bc3		VoC_endloop0
0xFFC0DE18,	//0x0bc4		VoC_NAD	|	VoC_inc_p(REG3,IN_PARALLEL)
		//0x0bc6		Huffmancodebits_300
0x0BCC3185,	//0x0bc6		VoC_bez16_r(Huffmancodebits_end,REG5)
0xDDC3E0A8,	//0x0bc8		VoC_sw32inc_p(REG67,REG0,DEFAULT)	|	VoC_movreg16(ACC0_LO,REG5,DEFAULT)
0xDE185DC4,	//0x0bca		VoC_inc_p(REG3,IN_PARALLEL)	|	VoC_sw32inc_p(ACC0,REG0,DEFAULT)
		//0x0bcc		Huffmancodebits_end
0xFFC0DFA9,	//0x0bcc		VoC_NOP	|	VoC_pop16(RA,DEFAULT)
0xFFC06580,	//0x0bce		VoC_NAD(IN_PARALLEL)	|	VoC_return
		//0x0bd0		CS_L3_huffman_coder_count1
0xDF417001,	//0x0bd0		VoC_push32(REG23,IN_PARALLEL)	|	VoC_lw16i_short(REG1,0x0,DEFAULT)
0xFF477F46,	//0x0bd2		VoC_lw32z(RL7,IN_PARALLEL)	|	VoC_lw32z(RL6,DEFAULT)
0x0BD83104,	//0x0bd4		VoC_bgtz16_r(L3_huffman_coder_count1_abs_and_sign_v,REG4)
0xE01C4264,	//0x0bd6		VoC_lw16i_short(RL6_LO,0x1,IN_PARALLEL)	|	VoC_sub16_rr(REG4,REG1,REG4,DEFAULT)
		//0x0bd8		L3_huffman_coder_count1_abs_and_sign_v
0x0BDC3105,	//0x0bd8		VoC_bgtz16_r(L3_huffman_coder_count1_abs_and_sign_w,REG5)
0xE01D426D,	//0x0bda		VoC_lw16i_short(RL6_HI,0x1,IN_PARALLEL)	|	VoC_sub16_rr(REG5,REG1,REG5,DEFAULT)
		//0x0bdc		L3_huffman_coder_count1_abs_and_sign_w
0x0BE03106,	//0x0bdc		VoC_bgtz16_r(L3_huffman_coder_count1_abs_and_sign_x,REG6)
0xE01E4276,	//0x0bde		VoC_lw16i_short(RL7_LO,0x1,IN_PARALLEL)	|	VoC_sub16_rr(REG6,REG1,REG6,DEFAULT)
		//0x0be0		L3_huffman_coder_count1_abs_and_sign_x
0x0BE43107,	//0x0be0		VoC_bgtz16_r(L3_huffman_coder_count1_abs_and_sign_y,REG7)
0xE01F427F,	//0x0be2		VoC_lw16i_short(RL7_HI,0x1,IN_PARALLEL)	|	VoC_sub16_rr(REG7,REG1,REG7,DEFAULT)
		//0x0be4		L3_huffman_coder_count1_abs_and_sign_y
0x78EFD8B2,	//0x0be4		VoC_shr16_ri(REG7,0xfffffffd,DEFAULT)	|	VoC_lw16inc_p(REG2,REG3,DEFAULT)
0x78FDDF43,	//0x0be6		VoC_shr16_ri(REG5,0xffffffff,DEFAULT)	|	VoC_push32(REG67,IN_PARALLEL)
0x78F6DF42,	//0x0be8		VoC_shr16_ri(REG6,0xfffffffe,DEFAULT)	|	VoC_push32(REG45,IN_PARALLEL)
0xC1F7C1E7,	//0x0bea		VoC_add16_rr(REG7,REG7,REG6,DEFAULT)	|	VoC_add16_rr(REG7,REG7,REG4,IN_PARALLEL)
0xD8B341EF,	//0x0bec		VoC_lw16inc_p(REG3,REG3,IN_PARALLEL)	|	VoC_add16_rr(REG7,REG7,REG5,DEFAULT)
0xF80F60E6,	//0x0bee		VoC_shr16_ri(REG7,0x1,IN_PARALLEL)	|	VoC_movreg16(REG6,REG7,DEFAULT)
0xC0FB40BA,	//0x0bf0		VoC_add16_rr(REG3,REG3,REG7,IN_PARALLEL)	|	VoC_add16_rr(REG2,REG2,REG7,DEFAULT)
0x00011606,	//0x0bf2		VoC_and16_ri(REG6,0x1)
0xFF445822,	//0x0bf4		VoC_lw32z(ACC0,IN_PARALLEL)	|	VoC_lw16_p(REG2,REG2,DEFAULT)
0x3186D833,	//0x0bf6		VoC_bez16_r(L3_huffman_coder_count1_even,REG6)(lo)	|	VoC_lw16_p(REG3,REG3,DEFAULT)
0x79420BFC,	//0x0bf8		VoC_shru16_ri(REG2,0x8,DEFAULT)	|	VoC_bez16_r(L3_huffman_coder_count1_even,REG6)(hi)
0xE5C5F943,	//0x0bfa		VoC_jump(L3_huffman_coder_count1_even_end)	|	VoC_shru16_ri(REG3,0x8,IN_PARALLEL)
		//0x0bfc		L3_huffman_coder_count1_even
0x00FF1602,	//0x0bfc		VoC_and16_ri(REG2,0xff)
0x00FF1603,	//0x0bfe		VoC_and16_ri(REG3,0xff)
		//0x0c00		L3_huffman_coder_count1_even_end
0xE0126048,	//0x0c00		VoC_lw16i_short(REG2,0x1,IN_PARALLEL)	|	VoC_movreg16(ACC0_LO,REG2,DEFAULT)
0xFF435F02,	//0x0c02		VoC_lw32z(REG67,IN_PARALLEL)	|	VoC_pop32(REG45,DEFAULT)
0xF6685DC4,	//0x0c04		VoC_movreg16(ACC0_LO,REG3,IN_PARALLEL)	|	VoC_sw32inc_p(ACC0,REG0,DEFAULT)
0xF7867028,	//0x0c06		VoC_movreg16(REG6,RL6_LO,IN_PARALLEL)	|	VoC_lw16i_short(ACC0_LO,0x1,DEFAULT)
0xC94D5DC4,	//0x0c08		VoC_add32_rr(ACC1,ACC1,REG23,IN_PARALLEL)	|	VoC_sw32inc_p(ACC0,REG0,DEFAULT)
0x3184F023,	//0x0c0a		VoC_bez16_r(L3_huffman_coder_count1_v,REG4)(lo)	|	VoC_lw16i_short(REG3,0x1,DEFAULT)
0xDDC30C10,	//0x0c0c		VoC_sw32inc_p(REG67,REG0,DEFAULT)	|	VoC_bez16_r(L3_huffman_coder_count1_v,REG4)(hi)
0xC94D5DC4,	//0x0c0e		VoC_add32_rr(ACC1,ACC1,REG23,IN_PARALLEL)	|	VoC_sw32inc_p(ACC0,REG0,DEFAULT)
		//0x0c10		L3_huffman_coder_count1_v
0x3185E1A6,	//0x0c10		VoC_bez16_r(L3_huffman_coder_count1_w,REG5)(lo)	|	VoC_movreg16(REG6,RL6_HI,DEFAULT)
0xDDC30C16,	//0x0c12		VoC_sw32inc_p(REG67,REG0,DEFAULT)	|	VoC_bez16_r(L3_huffman_coder_count1_w,REG5)(hi)
0xC94D5DC4,	//0x0c14		VoC_add32_rr(ACC1,ACC1,REG23,IN_PARALLEL)	|	VoC_sw32inc_p(ACC0,REG0,DEFAULT)
		//0x0c16		L3_huffman_coder_count1_w
0xDF0261C6,	//0x0c16		VoC_pop32(REG45,IN_PARALLEL)	|	VoC_movreg16(REG6,RL7_LO,DEFAULT)
0x0C1D3184,	//0x0c18		VoC_bez16_r(L3_huffman_coder_count1_x,REG4)
0x5DC4DDC3,	//0x0c1a		VoC_sw32inc_p(ACC0,REG0,DEFAULT)	|	VoC_sw32inc_p(REG67,REG0,DEFAULT)
0xE1E6C94D,	//0x0c1c		VoC_movreg16(REG6,RL7_HI,DEFAULT)	|	VoC_add32_rr(ACC1,ACC1,REG23,IN_PARALLEL)
		//0x0c1d		L3_huffman_coder_count1_x
0x0C233185,	//0x0c1e		VoC_bez16_r(L3_huffman_coder_count1_y,REG5)
0x5DC4DDC3,	//0x0c20		VoC_sw32inc_p(ACC0,REG0,DEFAULT)	|	VoC_sw32inc_p(REG67,REG0,DEFAULT)
0xDF01C94D,	//0x0c22		VoC_pop32(REG23,DEFAULT)	|	VoC_add32_rr(ACC1,ACC1,REG23,IN_PARALLEL)
		//0x0c23		L3_huffman_coder_count1_y
0xFFC06580,	//0x0c24		VoC_NAD(IN_PARALLEL)	|	VoC_return
		//0x0c26		CS_HuffmanCode
0x0C2E31C3,	//0x0c26		VoC_bnez16_r(HuffmanCode_go,REG3)
0xFF417F40,	//0x0c28		VoC_lw32z(REG23,IN_PARALLEL)	|	VoC_lw32z(REG01,DEFAULT)
0x2B00FF46,	//0x0c2a		VoC_jump_lg(HuffmanCode_end)(lo)	|	VoC_lw32z(RL6,DEFAULT)
0xFFC00CBD,	//0x0c2c		VoC_NAD	|	VoC_jump_lg(HuffmanCode_end)(hi)
		//0x0c2e		HuffmanCode_go
0x273D081C,	//0x0c2e		VoC_mult16_rd(REG4,REG3,0x273d)
0x253A1806,	//0x0c30		VoC_lw16i_set_inc(REG2,0x253a,0x1)
0x7F45C0A2,	//0x0c32		VoC_lw32z(ACC1,DEFAULT)	|	VoC_add16_rr(REG2,REG2,REG4,DEFAULT)
0x3286FF44,	//0x0c34		VoC_bgtz32_r(HuffmanCode_abs_and_sign_100,RL6)(lo)	|	VoC_lw32z(ACC0,IN_PARALLEL)
0x702A0C3A,	//0x0c36		VoC_lw16i_short(ACC1_LO,0x1,DEFAULT)	|	VoC_bgtz32_r(HuffmanCode_abs_and_sign_100,RL6)(hi)
0xFFC0CB36,	//0x0c38		VoC_NAD	|	VoC_sub32_rr(RL6,ACC0,RL6,IN_PARALLEL)
		//0x0c3a		HuffmanCode_abs_and_sign_100
0x0C3E3287,	//0x0c3a		VoC_bgtz32_r(HuffmanCode_abs_and_sign_200,RL7)
0xCB3F702B,	//0x0c3c		VoC_sub32_rr(RL7,ACC0,RL7,IN_PARALLEL)	|	VoC_lw16i_short(ACC1_HI,0x1,DEFAULT)
		//0x0c3e		HuffmanCode_abs_and_sign_200
0xF78658A4,	//0x0c3e		VoC_movreg16(REG6,RL6_LO,IN_PARALLEL)	|	VoC_lw16inc_p(REG4,REG2,DEFAULT)
0xF7C758A5,	//0x0c40		VoC_movreg16(REG7,RL7_LO,IN_PARALLEL)	|	VoC_lw16inc_p(REG5,REG2,DEFAULT)
0xF9445E10,	//0x0c42		VoC_shru16_ri(REG4,0x8,IN_PARALLEL)	|	VoC_inc_p(REG2,DEFAULT)
0x27583823,	//0x0c44		VoC_bgt16_rd(LBALE_COMPILE_9,REG3,0x2758)
0x0C962B00,	//0x0c46		VoC_jump_lg(HuffmanCode_table_select_lt15)
		//0x0c48		LBALE_COMPILE_9
0xE00171E0,	//0x0c48		VoC_lw16i_short(REG1,0x0,IN_PARALLEL)	|	VoC_lw16i_short(REG0,0xf,DEFAULT)
0xFF445F45,	//0x0c4a		VoC_lw32z(ACC0,IN_PARALLEL)	|	VoC_push32(ACC1,DEFAULT)
0x3606FF45,	//0x0c4c		VoC_bgt32_rr(HuffmanCode_table_select_xgt14,REG01,RL6)(lo)	|	VoC_lw32z(ACC1,DEFAULT)
0x4B840C52,	//0x0c4e		VoC_sub32_rr(ACC0,RL6,REG01,DEFAULT)	|	VoC_bgt32_rr(HuffmanCode_table_select_xgt14,REG01,RL6)(hi)
0xFFC0E0F6,	//0x0c50		VoC_NAD	|	VoC_lw16i_short(REG6,0xf,IN_PARALLEL)
		//0x0c52		HuffmanCode_table_select_xgt14
0x0C563607,	//0x0c52		VoC_bgt32_rr(HuffmanCode_table_select_ygt14,REG01,RL7)
0xE0F74BC5,	//0x0c54		VoC_lw16i_short(REG7,0xf,IN_PARALLEL)	|	VoC_sub32_rr(ACC1,RL7,REG01,DEFAULT)
		//0x0c56		HuffmanCode_table_select_ygt14
0xD8A1C534,	//0x0c56		VoC_lw16inc_p(REG1,REG2,DEFAULT)	|	VoC_mult16_rr(REG4,REG4,REG6,DEFAULT)
0xE080C13C,	//0x0c58		VoC_movreg16(REG0,REG4,DEFAULT)	|	VoC_add16_rr(REG4,REG4,REG7,DEFAULT)
0xD8A27808,	//0x0c5a		VoC_lw16inc_p(REG2,REG2,IN_PARALLEL)	|	VoC_shr16_ri(REG0,0x1,DEFAULT)
0xC0404082,	//0x0c5c		VoC_add16_rr(REG0,REG1,REG0,IN_PARALLEL)	|	VoC_add16_rr(REG2,REG2,REG0,DEFAULT)
0x27633823,	//0x0c5e		VoC_bgt16_rd(HuffmanCode_table_select_32,REG3,0x2763)
0xFFC04060,	//0x0c60		VoC_NAD(IN_PARALLEL)	|	VoC_add16_rr(REG0,REG1,REG4,DEFAULT)
		//0x0c62		HuffmanCode_table_select_32
0x00011604,	//0x0c62		VoC_and16_ri(REG4,0x1)
0xD800D821,	//0x0c64		VoC_lw16_p(REG0,REG0,DEFAULT)	|	VoC_lw16_p(REG1,REG2,DEFAULT)
0x3184E002,	//0x0c66		VoC_bez16_r(HuffmanCode_table_select_odd,REG4)(lo)	|	VoC_movreg16(REG2,REG0,DEFAULT)
0x78400C6C,	//0x0c68		VoC_shr16_ri(REG0,0x8,DEFAULT)	|	VoC_bez16_r(HuffmanCode_table_select_odd,REG4)(hi)
0xE5C5F841,	//0x0c6a		VoC_jump(HuffmanCode_table_select_odd_end)	|	VoC_shr16_ri(REG1,0x8,IN_PARALLEL)
		//0x0c6c		HuffmanCode_table_select_odd
0x00FF1600,	//0x0c6c		VoC_and16_ri(REG0,0xff)
0x00FF1601,	//0x0c6e		VoC_and16_ri(REG1,0xff)
		//0x0c70		HuffmanCode_table_select_odd_end
0x27633823,	//0x0c70		VoC_bgt16_rd(HuffmanCode_table_select_32_2,REG3,0x2763)
0xFFC06040,	//0x0c72		VoC_NAD(IN_PARALLEL)	|	VoC_movreg16(REG0,REG2,DEFAULT)
		//0x0c74		HuffmanCode_table_select_32_2
0xFF465F07,	//0x0c74		VoC_lw32z(RL6,IN_PARALLEL)	|	VoC_pop32(RL7,DEFAULT)
0x3C2EF002,	//0x0c76		VoC_bngt16_rd(HuffmanCode_100,REG6,0x274b)(lo)	|	VoC_lw16i_short(REG2,0x0,DEFAULT)
0x6526274B,	//0x0c78		VoC_or32_rr(RL6,ACC0,DEFAULT)	|	VoC_bngt16_rd(HuffmanCode_100,REG6,0x274b)(hi)
0xFFC0C0AA,	//0x0c7a		VoC_NAD	|	VoC_add16_rr(REG2,REG2,REG5,IN_PARALLEL)
		//0x0c7c		HuffmanCode_100
0x0C843186,	//0x0c7c		VoC_bez16_r(HuffmanCode_101,REG6)
0xFF447DFE,	//0x0c7e		VoC_lw32z(ACC0,IN_PARALLEL)	|	VoC_shru32_ri(RL6,0xffffffff,DEFAULT)
0xE526E1C8,	//0x0c80		VoC_or32_rr(RL6,ACC0,DEFAULT)	|	VoC_movreg16(ACC0_LO,RL7_LO,DEFAULT)
0x272F0712,	//0x0c82		VoC_add16_rd(REG2,REG2,0x272f)
		//0x0c84		HuffmanCode_101
0x274B3C87,	//0x0c84		VoC_bngt16_rd(HuffmanCode_200,REG7,0x274b)
0x253A0B2E,	//0x0c86		VoC_sub16_dr(REG6,0x253a,REG5)
0x652EFEF6,	//0x0c88		VoC_or32_rr(RL6,ACC1,DEFAULT)	|	VoC_shru32_rr(RL6,REG6,DEFAULT)
0xFFC0C0AA,	//0x0c8a		VoC_NAD	|	VoC_add16_rr(REG2,REG2,REG5,IN_PARALLEL)
		//0x0c8c		HuffmanCode_200
0x0C943187,	//0x0c8c		VoC_bez16_r(HuffmanCode_201,REG7)
0xFF447DFE,	//0x0c8e		VoC_lw32z(ACC0,IN_PARALLEL)	|	VoC_shru32_ri(RL6,0xffffffff,DEFAULT)
0xE526E1E8,	//0x0c90		VoC_or32_rr(RL6,ACC0,DEFAULT)	|	VoC_movreg16(ACC0_LO,RL7_HI,DEFAULT)
0x272F0712,	//0x0c92		VoC_add16_rd(REG2,REG2,0x272f)
		//0x0c94		HuffmanCode_201
0x0CBD2B00,	//0x0c94		VoC_jump_lg(HuffmanCode_end)
		//0x0c96		HuffmanCode_table_select_lt15
0xD8A1C534,	//0x0c96		VoC_lw16inc_p(REG1,REG2,DEFAULT)	|	VoC_mult16_rr(REG4,REG4,REG6,DEFAULT)
0x6080C13C,	//0x0c98		VoC_movreg16(REG0,REG4,DEFAULT)	|	VoC_add16_rr(REG4,REG4,REG7,DEFAULT)
0xF808D8A2,	//0x0c9a		VoC_shr16_ri(REG0,0x1,DEFAULT)	|	VoC_lw16inc_p(REG2,REG2,IN_PARALLEL)
0xC0404082,	//0x0c9c		VoC_add16_rr(REG0,REG1,REG0,IN_PARALLEL)	|	VoC_add16_rr(REG2,REG2,REG0,DEFAULT)
0x00011604,	//0x0c9e		VoC_and16_ri(REG4,0x1)
0x5800D821,	//0x0ca0		VoC_lw16_p(REG0,REG0,DEFAULT)	|	VoC_lw16_p(REG1,REG2,DEFAULT)
0xF002FF46,	//0x0ca2		VoC_lw16i_short(REG2,0x0,DEFAULT)	|	VoC_lw32z(RL6,IN_PARALLEL)
0x0CAA3184,	//0x0ca4		VoC_bez16_r(HuffmanCode_table_select_odd_2,REG4)
0xF8417840,	//0x0ca6		VoC_shr16_ri(REG1,0x8,IN_PARALLEL)	|	VoC_shr16_ri(REG0,0x8,DEFAULT)
0xFFC065C6,	//0x0ca8		VoC_NAD(IN_PARALLEL)	|	VoC_jump(HuffmanCode_table_select_odd_2_end)
		//0x0caa		HuffmanCode_table_select_odd_2
0x00FF1600,	//0x0caa		VoC_and16_ri(REG0,0xff)
0x00FF1601,	//0x0cac		VoC_and16_ri(REG1,0xff)
		//0x0cae		HuffmanCode_table_select_odd_2_end
0x0CB63186,	//0x0cae		VoC_bez16_r(HuffmanCode_t100x,REG6)
0xF74679F8,	//0x0cb0		VoC_movreg16(REG6,ACC1_LO,IN_PARALLEL)	|	VoC_shru16_ri(REG0,0xffffffff,DEFAULT)
0x0709E470,	//0x0cb2		VoC_add16_rd(REG1,REG1,0x272f)(lo)	|	VoC_or16_rr(REG0,REG6,DEFAULT)
0xFFC0272F,	//0x0cb4		VoC_NAD	|	VoC_add16_rd(REG1,REG1,0x272f)(hi)
		//0x0cb6		HuffmanCode_t100x
0x0CBD3187,	//0x0cb6		VoC_bez16_r(HuffmanCode_end,REG7)
0xF76679F8,	//0x0cb8		VoC_movreg16(REG6,ACC1_HI,IN_PARALLEL)	|	VoC_shru16_ri(REG0,0xffffffff,DEFAULT)
0x0709E470,	//0x0cba		VoC_add16_rd(REG1,REG1,0x272f)(lo)	|	VoC_or16_rr(REG0,REG6,DEFAULT)
0xC053272F,	//0x0cbc		VoC_add16_rr(REG3,REG1,REG2,DEFAULT)	|	VoC_add16_rd(REG1,REG1,0x272f)(hi)
		//0x0cbd		HuffmanCode_end
0xFFC06580,	//0x0cbe		VoC_NAD(IN_PARALLEL)	|	VoC_return
		//0x0cc0		CS_putbits
0xFF475F41,	//0x0cc0		VoC_lw32z(RL7,IN_PARALLEL)	|	VoC_push32(REG23,DEFAULT)
		//0x0cc2		CS_putbits_start
0x0CE23144,	//0x0cc2		VoC_bngtz16_r(CS_putbits_exit,REG4)
0x64161806,	//0x0cc4		VoC_lw16i_set_inc(REG2,0x6416,0x1)
0xFF256085,	//0x0cc6		VoC_movreg32(ACC1,ACC0,IN_PARALLEL)	|	VoC_movreg16(REG5,REG4,DEFAULT)
0x0CCC343C,	//0x0cc8		VoC_bgt16_rr(CS_putbits_min,REG7,REG4)
0xFFC060E5,	//0x0cca		VoC_NAD(IN_PARALLEL)	|	VoC_movreg16(REG5,REG7,DEFAULT)
		//0x0ccc		CS_putbits_min
0xC0AA432B,	//0x0ccc		VoC_add16_rr(REG2,REG2,REG5,IN_PARALLEL)	|	VoC_sub16_rr(REG3,REG4,REG5,DEFAULT)
0xC37B7EDD,	//0x0cce		VoC_sub16_rr(REG3,REG5,REG7,IN_PARALLEL)	|	VoC_shru32_rr(ACC1,REG3,DEFAULT)
0xE4FDD82E,	//0x0cd0		VoC_and32_rr(ACC1,RL7,DEFAULT)	|	VoC_lw16_p(RL7_LO,REG2,DEFAULT)
0xFEF5FEDD,	//0x0cd2		VoC_shru32_rr(ACC1,REG6,DEFAULT)	|	VoC_shru32_rr(ACC1,REG3,DEFAULT)
0xC3EF652E,	//0x0cd4		VoC_sub16_rr(REG7,REG7,REG5,IN_PARALLEL)	|	VoC_or32_rr(RL6,ACC1,DEFAULT)
0x0CDF31C7,	//0x0cd6		VoC_bnez16_r(CS_putbits_100,REG7)
0xC3BEF107,	//0x0cd8		VoC_sub16_rr(REG6,REG6,REG7,DEFAULT)	|	VoC_lw16i_short(REG7,0x8,DEFAULT)
0x2781382E,	//0x0cda		VoC_bgt16_rd(CS_putbits_100,REG6,0x2781)
0xFF465DC6,	//0x0cdc		VoC_lw32z(RL6,IN_PARALLEL)	|	VoC_sw32inc_p(RL6,REG0,DEFAULT)
0xC32CF006,	//0x0cde		VoC_sub16_rr(REG4,REG4,REG5,DEFAULT)	|	VoC_lw16i_short(REG6,0x0,DEFAULT)
		//0x0cdf		CS_putbits_100
0xFFC065E2,	//0x0ce0		VoC_NAD(IN_PARALLEL)	|	VoC_jump(CS_putbits_start)
		//0x0ce2		CS_putbits_exit
0xF00A5F01,	//0x0ce2		VoC_lw16i_short(INC2,0x2,IN_PARALLEL)	|	VoC_pop32(REG23,DEFAULT)
0xDFE9E580,	//0x0ce4		VoC_push16(RA,DEFAULT)	|	VoC_return
		//0x0ce5		CS_BF_BitstreamFrame
0x11022008,	//0x0ce6		VoC_lw16d_set_inc(REG0,0x1102,0x2)
0x11041486,	//0x0ce8		VoC_lw32_d(RL6,0x1104)
0x11011407,	//0x0cea		VoC_lw16_d(REG7,0x1101)
0x11031406,	//0x0cec		VoC_lw16_d(REG6,0x1103)
0x0CFA2B80,	//0x0cee		VoC_jal(CS_writePartMainData)
0x11041586,	//0x0cf0		VoC_sw32_d(RL6,0x1104)
0x11011507,	//0x0cf2		VoC_sw16_d(REG7,0x1101)
0x11031506,	//0x0cf4		VoC_sw16_d(REG6,0x1103)
0x1500DFA9,	//0x0cf6		VoC_sw16_d(REG0,0x1102)(lo)	|	VoC_pop16(RA,DEFAULT)
0xE5801102,	//0x0cf8		VoC_return	|	VoC_sw16_d(REG0,0x1102)(hi)
		//0x0cfa		CS_writePartMainData
0xFFC05FE9,	//0x0cfa		VoC_NAD(IN_PARALLEL)	|	VoC_push16(RA,DEFAULT)
		//0x0cfc		writePartMainData_nrEntries_loop
0x0D053182,	//0x0cfc		VoC_bez16_r(writePartMainData_nrEntries_loop_end,REG2)
0x2B80DFC2,	//0x0cfe		VoC_jal(CS_WriteMainDataBits)(lo)	|	VoC_push16(REG2,DEFAULT)
0xDF820D1E,	//0x0d00		VoC_pop16(REG2,DEFAULT)	|	VoC_jal(CS_WriteMainDataBits)(hi)
0x272F0792,	//0x0d02		VoC_sub16_rd(REG2,REG2,0x272f)
0xDFA9E5F8,	//0x0d04		VoC_pop16(RA,DEFAULT)	|	VoC_jump(writePartMainData_nrEntries_loop)
		//0x0d05		writePartMainData_nrEntries_loop_end
0xE580FFC0,	//0x0d06		VoC_return	|	VoC_NOP
		//0x0d08		CS_writePartSideInfo
0xDFC27F44,	//0x0d08		VoC_push16(REG2,IN_PARALLEL)	|	VoC_lw32z(ACC0,DEFAULT)
0xF0075991,	//0x0d0a		VoC_lw16i_short(INC3,0x1,IN_PARALLEL)	|	VoC_lw32_p(REG23,REG2,DEFAULT)
0xFF455FE9,	//0x0d0c		VoC_lw32z(ACC1,IN_PARALLEL)	|	VoC_push16(RA,DEFAULT)
		//0x0d0e		CS_writePartSideInfo_nrEntries_loop
0x0D1A3182,	//0x0d0e		VoC_bez16_r(CS_writePartSideInfo_nrEntries_loop_end,REG2)
0xD8B4D8B8,	//0x0d10		VoC_lw16inc_p(REG4,REG3,DEFAULT)	|	VoC_lw16inc_p(ACC0_LO,REG3,DEFAULT)
0xFFC04061,	//0x0d12		VoC_NAD(IN_PARALLEL)	|	VoC_add16_rr(REG1,REG1,REG4,DEFAULT)
0x0CC02B80,	//0x0d14		VoC_jal(CS_putbits)
0x272F0792,	//0x0d16		VoC_sub16_rd(REG2,REG2,0x272f)
0x0D0E3102,	//0x0d18		VoC_bgtz16_r(CS_writePartSideInfo_nrEntries_loop,REG2)
		//0x0d1a		CS_writePartSideInfo_nrEntries_loop_end
0xDF82DFA9,	//0x0d1a		VoC_pop16(REG2,DEFAULT)	|	VoC_pop16(RA,DEFAULT)
0xFFC06580,	//0x0d1c		VoC_NAD(IN_PARALLEL)	|	VoC_return
		//0x0d1e		CS_WriteMainDataBits
0xF00B5FE9,	//0x0d1e		VoC_lw16i_short(INC3,0x2,IN_PARALLEL)	|	VoC_push16(RA,DEFAULT)
0x11061487,	//0x0d20		VoC_lw32_d(RL7,0x1106)
0x11085D07,	//0x0d22		VoC_bne32_rd(CS_WriteMainDataBits_100,RL7,0x1108)
0xFFC05FC3,	//0x0d24		VoC_NAD(IN_PARALLEL)	|	VoC_push16(REG3,DEFAULT)
0x0D5C2B80,	//0x0d26		VoC_jal(CS_write_side_info)
0xFF475F83,	//0x0d28		VoC_lw32z(RL7,IN_PARALLEL)	|	VoC_pop16(REG3,DEFAULT)
0xF00B602E,	//0x0d2a		VoC_lw16i_short(INC3,0x2,IN_PARALLEL)	|	VoC_movreg16(RL7_LO,REG1,DEFAULT)
0x11080BBC,	//0x0d2c		VoC_sub32_dr(ACC0,0x1108,RL7)
0x11061587,	//0x0d2e		VoC_sw32_d(RL7,0x1106)
0x110A1584,	//0x0d30		VoC_sw32_d(ACC0,0x110a)
		//0x0d32		CS_WriteMainDataBits_100
0xD9DAD9DC,	//0x0d32		VoC_lw32inc_p(REG45,REG3,DEFAULT)	|	VoC_lw32inc_p(ACC0,REG3,DEFAULT)
0x3184F005,	//0x0d34		VoC_bez16_r(CS_WriteMainDataBits_exit,REG4)(lo)	|	VoC_lw16i_short(REG5,0x0,DEFAULT)
0x553A0D58,	//0x0d36		VoC_bngt32_rd(CS_WriteMainDataBits_200,REG45,0x110a)(lo)	|	VoC_bez16_r(CS_WriteMainDataBits_exit,REG4)(hi)
0x0992110A,	//0x0d38		VoC_sub32_rd(REG45,REG45,0x110a)(lo)	|	VoC_bngt32_rd(CS_WriteMainDataBits_200,REG45,0x110a)(hi)
0x7EE4110A,	//0x0d3a		VoC_shru32_rr(ACC0,REG4,DEFAULT)	|	VoC_sub32_rd(REG45,REG45,0x110a)(hi)
0xDF42DF44,	//0x0d3c		VoC_push32(REG45,DEFAULT)	|	VoC_push32(ACC0,IN_PARALLEL)
0x110A1404,	//0x0d3e		VoC_lw16_d(REG4,0x110a)
0x0CC02B80,	//0x0d40		VoC_jal(CS_putbits)
0x0D5C2B80,	//0x0d42		VoC_jal(CS_write_side_info)
0xE02EFF47,	//0x0d44		VoC_movreg16(RL7_LO,REG1,DEFAULT)	|	VoC_lw32z(RL7,DEFAULT)
0x11080BBC,	//0x0d46		VoC_sub32_dr(ACC0,0x1108,RL7)
0x11061587,	//0x0d48		VoC_sw32_d(RL7,0x1106)
0x110A1584,	//0x0d4a		VoC_sw32_d(ACC0,0x110a)
0xDF04DF02,	//0x0d4c		VoC_pop32(ACC0,DEFAULT)	|	VoC_pop32(REG45,DEFAULT)
		//0x0d4e		CS_WriteMainDataBits_200
0x11060915,	//0x0d4e		VoC_add32_rd(ACC1,REG45,0x1106)
0x110A0B97,	//0x0d50		VoC_sub32_dr(RL7,0x110a,REG45)
0x11061585,	//0x0d52		VoC_sw32_d(ACC1,0x1106)
0x110A1587,	//0x0d54		VoC_sw32_d(RL7,0x110a)
0x0CC02B80,	//0x0d56		VoC_jal(CS_putbits)
		//0x0d58		CS_WriteMainDataBits_exit
0xFFC0DFA9,	//0x0d58		VoC_NOP	|	VoC_pop16(RA,DEFAULT)
0xFFC06580,	//0x0d5a		VoC_NAD(IN_PARALLEL)	|	VoC_return
		//0x0d5c		CS_write_side_info
0x11161484,	//0x0d5c		VoC_lw32_d(ACC0,0x1116)
0xE0015FE9,	//0x0d5e		VoC_lw16i_short(REG1,0x0,IN_PARALLEL)	|	VoC_push16(RA,DEFAULT)
0x11081584,	//0x0d60		VoC_sw32_d(ACC0,0x1108)
0x111A180A,	//0x0d62		VoC_lw16i_set_inc(REG2,0x111a,0x2)
0x0D082B80,	//0x0d64		VoC_jal(CS_writePartSideInfo)
0x111C180A,	//0x0d66		VoC_lw16i_set_inc(REG2,0x111c,0x2)
0x0D082B80,	//0x0d68		VoC_jal(CS_writePartSideInfo)
0x111E180A,	//0x0d6a		VoC_lw16i_set_inc(REG2,0x111e,0x2)
0xE843FFC0,	//0x0d6c		VoC_loop_i_short(0x2,DEFAULT)	|	VoC_NAD
0x0D082B80,	//0x0d6e		VoC_jal(CS_writePartSideInfo)
		//0x0d70		VoC_endloop0
0x1120180A,	//0x0d70		VoC_lw16i_set_inc(REG2,0x1120,0x2)
0x11151404,	//0x0d72		VoC_lw16_d(REG4,0x1115)
0x1122180A,	//0x0d74		VoC_lw16i_set_inc(REG2,0x1122,0x2)
0x0D7E2E21,	//0x0d76		VoC_loop_r(1,REG4)
0xE843FFC0,	//0x0d78		VoC_loop_i_short(0x2,DEFAULT)	|	VoC_NAD
0x0D082B80,	//0x0d7a		VoC_jal(CS_writePartSideInfo)
		//0x0d7c		VoC_endloop0
0x27330712,	//0x0d7c		VoC_add16_rd(REG2,REG2,0x2733)
		//0x0d7e		VoC_endloop1
0x1126180A,	//0x0d7e		VoC_lw16i_set_inc(REG2,0x1126,0x2)
0xFFC0DFA9,	//0x0d80		VoC_NOP	|	VoC_pop16(RA,DEFAULT)
0xFFC0E580,	//0x0d82		VoC_NAD	|	VoC_return
