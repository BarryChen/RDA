<?xml version="1.0" encoding="UTF-8"?>
<archive asm="no">
    <comment>
        @defgroup map HAL Map Driver
        <br/>
        This file contains the functions controlling the MAP engine of HAL.
        This engine allows any module to describe its memory map in XMD
        format so that CoolWatcher (or any CoolXml tool) can access it.
        <br/>
        @{
    </comment>

    <include load="no" file="hal_error.h"/>

    <!-- Type used to define the version of a software module. -->
    <typedef name="HAL_MAP_VERSION_T">
        <comment>
            Type used to define the version of a software module.
        </comment>
        <uint32          name="revision"/>
        <uint32          name="number"/>
        <uint32          name="date"/>
        <ptr type="int8" name="string"/>
    </typedef>

    <!-- Type used to access the version and the memory map of a soft module. -->
    <typedef name="HAL_MAP_MODULE_T">
        <comment>
            Type used to access the version and the memory map of a soft module.
        </comment>
        <ptr type="HAL_MAP_VERSION_T" name="version"/>
        <ptr type="void"              name="access"/>
    </typedef>

    <!-- Software modules identifiers. -->
    <enum name="HAL_MAP_ID_T">
        <comment>
            Software modules identifiers.
            Caution, these values are also used in the file "csw_ver.h".
            Must be compatible with the type MAP_TABLE_T of "chipstd_soft_root.xmd".
        </comment>
        <entry name="HAL_MAP_ID_HAL"/>
        <entry name="HAL_MAP_ID_PAL"/>
        <entry name="HAL_MAP_ID_SPAL"/>
        <entry name="HAL_MAP_ID_SPP"/>
        <entry name="HAL_MAP_ID_SPC"/>
        <entry name="HAL_MAP_ID_RFD"/>
        <entry name="HAL_MAP_ID_FREE1"/>
        <entry name="HAL_MAP_ID_FREE2"/>
        <entry name="HAL_MAP_ID_MEMD"/>
        <entry name="HAL_MAP_ID_PMD"/>
        <entry name="HAL_MAP_ID_STACK"/>
        <entry name="HAL_MAP_ID_VPP"/>
        <entry name="HAL_MAP_ID_SX"/>
        <entry name="HAL_MAP_ID_STD"/>
        <entry name="HAL_MAP_ID_LCDD"/>
        <entry name="HAL_MAP_ID_ARS"/>
        <entry name="HAL_MAP_ID_FREE3"/>
        <entry name="HAL_MAP_ID_VOIS"/>
        <entry name="HAL_MAP_ID_CALIB"/>
        <entry name="HAL_MAP_ID_GTES"/>
        <entry name="HAL_MAP_ID_FLASH_PROG"/>
        <entry name="HAL_MAP_ID_CSW"/>
        <entry name="HAL_MAP_ID_MMI"/>
        <entry name="HAL_MAP_ID_AUD"/>
        <entry name="HAL_MAP_ID_MDI"/>
        <entry name="HAL_MAP_ID_BTD"/>
        <!-- SVC src is from Total_BJ and UCTLS has no map info
        <entry name="HAL_MAP_ID_UCTLS"/>
        -->
        <entry name="HAL_MAP_ID_COUNT"/>
    </enum>

    <!-- Type used to access the version and the memory map of a soft module. -->
    <typedef name="HAL_MAP_TABLE_T">
        <comment>
            Type used to access the version and the memory map of a soft module.
        </comment>
        <instance name="modules" type="HAL_MAP_MODULE_T" count="HAL_MAP_ID_COUNT"/>
    </typedef>
    
    <cjoker>
// =============================================================================
//  FUNCTIONS
// =============================================================================



// =============================================================================
// hal_MapEngineOpen
// -----------------------------------------------------------------------------
/// Initialize the map engine so that the remote tools can access the map
/// structures of the software modules.
// =============================================================================
PUBLIC VOID hal_MapEngineOpen(VOID);



// =============================================================================
// hal_MapEngineRegisterModule
// -----------------------------------------------------------------------------
/// Configure the map access field for the specified module in the table
/// located at the address pointer by the fixed pointer.
/// @param id Id of the module for which the version and the access
/// pointer will be specified.
/// @param version Pointer to a structure giving the version information for
/// the module 'id'. This structure must be instantiated by the module 'id'.
/// @param access Pointer to a structure containing the informations that will
/// be accessible from the remote PC (e.g. through CoolWatcher). This strucutre
/// must be instantiated by the module 'id'.
/// @return HAL_ERR_NO if no error or HAL_ERR_BAD_PARAMETER if the module 'id'
/// cannot be found.
// =============================================================================
PUBLIC HAL_ERR_T hal_MapEngineRegisterModule(HAL_MAP_ID_T id, HAL_MAP_VERSION_T *version, VOID* access);


// =============================================================================
// hal_MapEnginePrintModuleVersion
// -----------------------------------------------------------------------------
/// Print a module version's string on the Trace, if the module has been
/// registered.
/// @param id Number of the Module whose version is to be put
/// on the Trace.
// =============================================================================
PUBLIC VOID hal_MapEnginePrintModuleVersion(HAL_MAP_ID_T id);


// =============================================================================
// hal_MapEnginePrintAllModulesVersion
// -----------------------------------------------------------------------------
/// Print all module version's string on the Trace.
// =============================================================================
PUBLIC VOID hal_MapEnginePrintAllModulesVersion(VOID);


// =============================================================================
// hal_MapEngineGetVersion
// -----------------------------------------------------------------------------
/// Get the pointer to the version structure of a given module.
///
/// @param id Number of the Module whose version is to be got.
/// @return Pointer to the version structure of said module.
// =============================================================================
PUBLIC HAL_MAP_VERSION_T* hal_MapEngineGetVersion(HAL_MAP_ID_T id);


/// @} // --> End of the group.
    </cjoker>
    
</archive>
