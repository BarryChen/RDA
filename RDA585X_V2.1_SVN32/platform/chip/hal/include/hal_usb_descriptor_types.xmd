<archive asm="no">

  <external name="HAL_USB_CALLBACK"       size="4" />
  <external name="HAL_USB_CS_CONSTRUCTOR" size="4" />

  <enum name="HAL_USB_CONFIG_ATTRIB">
    <comment>All attributes of config descriptor</comment>

    <entry name="HAL_USB_CONFIG_ATTRIB_SELF_POWER" value="0x00000040">
      <comment>Device use is self power</comment>
    </entry>
  </enum>

  <enum name="HAL_USB_EP_TYPE">
    <comment>EndPoint type</comment>

    <entry name="HAL_USB_EP_TYPE_CONTROL"   value="0"></entry>
    <entry name="HAL_USB_EP_TYPE_ISO"       value="1"></entry>
    <entry name="HAL_USB_EP_TYPE_BULK"      value="2"></entry>
    <entry name="HAL_USB_EP_TYPE_INTERRUPT" value="3"></entry>
  </enum>

  <typedef name="HAL_USB_EP_DESCRIPTOR">
    <comment>This struct use to define an EndPoint descriptor</comment>

    <uint8 name="ep">
      <comment>EndPoint index</comment>
    </uint8>
    <instance name="type" type="HAL_USB_EP_TYPE">
      <comment>Define the transfert type (ISO, Bulk, Cmd, Int)</comment>
    </instance>
    <uint16 name="interval">
      <comment>Polling interval for interrupt</comment>
    </uint16>
    <instance name="callback" type="HAL_USB_CALLBACK">
      <comment>EndPoint callback. See #HAL_USB_CALLBACK_T</comment>
    </instance>
  </typedef>

  <alias name="HAL_USB_EP_LIST_DESCRIPTOR">
    <ptr name="unused" type="HAL_USB_EP_DESCRIPTOR">
      <comment>List of EP</comment>
    </ptr>
  </alias>

  <typedef name="HAL_USB_INTERFACE_DESCRIPTOR">
    <comment>This struct use to define an Interface descriptor</comment>

    <uint8 name="usbClass">
      <comment>USB class defined by usb.org</comment>
    </uint8>
    <uint8 name="usbSubClass">
      <comment>USB subclass defined by usb.org</comment>
    </uint8>
    <uint8 name="usbProto">
      <comment>USB protocol</comment>
    </uint8>
    <ptr name="epList" type="HAL_USB_EP_LIST_DESCRIPTOR">
      <comment>List of endpoints linked with the interface</comment>
    </ptr>
    <ptr name="description" type="uint8">
      <comment>Description of interface</comment>
    </ptr>
    <instance name="callback" type="HAL_USB_CALLBACK">
      <comment>Interface callback. See #HAL_USB_CALLBACK_INTERFACE_CMD_T</comment>
    </instance>
    <uint8 name="interfaceIdx">
      <comment>Interface index. If 0 the interface index is generate</comment>
    </uint8>
  </typedef>

  <typedef name="HAL_USB_CS_INTERFACE_DESCRIPTOR">
    <comment>This struct use to define an class specific Interface descriptor</comment>
    <uint32 name="reserved" count="2" />
    <instance name="constructor" type="HAL_USB_CS_CONSTRUCTOR">
      <comment>Call this function for write the constructor</comment>
    </instance>
    <instance name="callback"   type="HAL_USB_CALLBACK">
      <comment>Interface callback. See #HAL_USB_CALLBACK_INTERFACE_CMD_T</comment>
    </instance>
    <uint8 name="interfaceIdx">
      <comment>Interface index. Must be 0xFF for CS_INTERFACE</comment>
    </uint8>
  </typedef>

  <typedef name="HAL_USB_INTERFACE_ASSOCIATION_DESCRIPTOR_REAL_T">
    <uint8 name="bLength">
    </uint8>
    <uint8 name="bDescriptorType">
    </uint8>
    <uint8 name="bFirstInterface">
    </uint8>
    <uint8 name="bInterfaceCount">
    </uint8>
    <uint8 name="bFunctionClass">
    </uint8>
    <uint8 name="bFunctionSubClass">
    </uint8>
    <uint8 name="bFunctionProtocol">
    </uint8>
    <uint8 name="iFunction">
    </uint8>
  </typedef>

  <alias name="HAL_USB_INTERFACE_LIST_DESCRIPTOR">
    <ptr name="unused" type="HAL_USB_INTERFACE_DESCRIPTOR">
      <comment>List of interfaces</comment>
    </ptr>
  </alias>

  <typedef name="HAL_USB_CONFIG_DESCRIPTOR">
    <comment>This struct use to define a Configuration descriptor</comment>

    <uint8 name="attrib">
      <comment>Config attribues. Describe on #HAL_USB_CONFIG_ATTRIB_T</comment>
    </uint8>
    <uint8 name="maxPower">
      <comment>Power use in this configuration 1 unit = 2mA</comment>
    </uint8>
    <ptr name="iad" type="HAL_USB_INTERFACE_ASSOCIATION_DESCRIPTOR_REAL_T" ckeywords="CONST">
      <comment>Interface association descriptor</comment>
    </ptr>
    <ptr name="interfaceList" type="HAL_USB_INTERFACE_LIST_DESCRIPTOR">
      <comment>All interface including in this configuration</comment>
    </ptr>
    <ptr name="description" type="uint8">
      <comment>Description of configuration</comment>
    </ptr>
    <uint8 name="configIdx">
      <comment>Config index</comment>
    </uint8>
  </typedef>

  <alias name="HAL_USB_CONFIG_LIST_DESCRIPTOR">
    <ptr name="unused" type="HAL_USB_CONFIG_DESCRIPTOR">
      <comment>List of configs</comment>
    </ptr>
  </alias>

  <typedef name="HAL_USB_DEVICE_DESCRIPTOR">
    <comment>This struct use to define a Device descriptor</comment>

    <uint8 name="usbClass">
      <comment>Device class defined by usb.org</comment>
    </uint8>
    <uint8 name="usbSubClass">
      <comment>Device subclass defined by usb.org</comment>
    </uint8>
    <uint8 name="usbProto">
      <comment>Protocol</comment>
    </uint8>
    <uint16 name="vendor">
      <comment>Vendor id defined by usb.org</comment>
    </uint16>
    <uint16 name="product">
      <comment>Product id</comment>
    </uint16>
    <uint16 name="version">
      <comment>Version (format BCD)</comment>
    </uint16>
    <ptr name="configList" type="HAL_USB_CONFIG_LIST_DESCRIPTOR">
      <comment>List of all configuration</comment>
    </ptr>
    <ptr name="description" type="uint8">
      <comment>Description of device</comment>
    </ptr>
    <ptr name="serialNumber" type="uint8">
      <comment>Serial Number</comment>
    </ptr>
    <uint8 name="usbMode">
      <comment>Usb mode use to generate product id</comment>
    </uint8>
  </typedef>
</archive>
