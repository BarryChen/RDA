<archive asm='no'>
    <comment>
        That file contains speech buffer structures and related functions.
        <br/>
        <br/>
        @defgroup speech HAL Speech FIFO
        <br/>
        @par Operation
        A speech FIFO is used to convey audio data from the Baseband side to
        acoustic world. PAL accesses this FIFO through #hal_SpeechPushRxPopTx,
        which puts received audio data in the Fifo and takes out audio data
        to send.
        <br/>
        @par
        On the other side, #hal_SpeechPopRxPushTx is aimed to be used by the
        VOIS service. It takes received data from the Fifo (to decode them and
        play them) and puts in it audio data to send (recorded from a mic and
        encoded),
        <br/>
        @par
        Thus, we see that the speech FIFO and its related mechanisms only manipulate
        encoded data.
        <br/>
        @{
    </comment>

<include load="no" file="cs_types.h"/>

<var name='HAL_SPEECH_FIFO_DEPTH' value='4'>
    <comment>FIFO depth.  </comment>
</var>

<enum name='HAL_SPEECH_MODE'>
    <comment>HAL Speech modes</comment>

    <entry name='HAL_AMR475_DEC' value='0x00f0'></entry>
    <entry name='HAL_AMR475_ENC' value='0x000f'></entry>
    <entry name='HAL_AMR515_DEC' value='0x00f1'></entry>
    <entry name='HAL_AMR515_ENC' value='0x001f'></entry>
    <entry name='HAL_AMR59_DEC' value='0x00f2'></entry>
    <entry name='HAL_AMR59_ENC' value='0x002f'></entry>
    <entry name='HAL_AMR67_DEC' value='0x00f3'></entry>
    <entry name='HAL_AMR67_ENC' value='0x003f'></entry>
    <entry name='HAL_AMR74_DEC' value='0x00f4'></entry>
    <entry name='HAL_AMR74_ENC' value='0x004f'></entry>
    <entry name='HAL_AMR795_DEC' value='0x00f5'></entry>
    <entry name='HAL_AMR795_ENC' value='0x005f'></entry>
    <entry name='HAL_AMR102_DEC' value='0x00f6'></entry>
    <entry name='HAL_AMR102_ENC' value='0x006f'></entry>
    <entry name='HAL_AMR122_DEC' value='0x00f7'></entry>
    <entry name='HAL_AMR122_ENC' value='0x007f'></entry>
    <entry name='HAL_EFR' value='0x0177'></entry>
    <entry name='HAL_FR' value='0x1fff'></entry>
    <entry name='HAL_HR' value='0x2fff'></entry>
    <entry name='HAL_INVALID' value='0xffff'></entry>
</enum>

<enum name='HAL_SPEECH_FRAME_SIZE'>
    <comment>Size of the frame in bytes, for the various supported codecs.  </comment>

    <entry name='HAL_SPEECH_FRAME_SIZE_AMR475' value='12'></entry>
    <entry name='HAL_SPEECH_FRAME_SIZE_AMR515' value='16'></entry>
    <entry name='HAL_SPEECH_FRAME_SIZE_AMR59' value='16'></entry>
    <entry name='HAL_SPEECH_FRAME_SIZE_AMR67' value='20'></entry>
    <entry name='HAL_SPEECH_FRAME_SIZE_AMR74' value='20'></entry>
    <entry name='HAL_SPEECH_FRAME_SIZE_AMR795' value='20'></entry>
    <entry name='HAL_SPEECH_FRAME_SIZE_AMR102' value='28'></entry>
    <entry name='HAL_SPEECH_FRAME_SIZE_AMR122' value='32'></entry>
    <entry name='HAL_SPEECH_FRAME_SIZE_AMR_RING' value='32'></entry>
    <entry name='HAL_SPEECH_FRAME_SIZE_EFR' value='32'></entry>
    <entry name='HAL_SPEECH_FRAME_SIZE_FR' value='36'></entry>
    <entry name='HAL_SPEECH_FRAME_SIZE_HR' value='16'></entry>
    <entry name='HAL_SPEECH_FRAME_SIZE_COD_BUF' value='36'></entry>
    <entry name='HAL_SPEECH_FRAME_SIZE_PCM_BUF' value='320'></entry>
</enum>

<typedef name='HAL_SPEECH_ENC_OUT'>
    <comment>Structure used to configure VOC frame encode</comment>

    <uint16 name='encMode'>
        <comment>Mode of the voice coded output frame</comment>
    </uint16>
    <uint16 name='encFrameType'>
        <comment>Type of the coded output frame (AMR only)</comment>
    </uint16>
    <uint16 name='echoSkipEncFrame'>
        <comment>Flag for skipping the encoded frame, only valid when the ES is activated (replaces the unused VAD flag)</comment>
    </uint16>
    <uint16 name='sp'>
        <comment>Speech flag (all except AMR)</comment>
    </uint16>
    <uint16 name='encOutBuf' count='HAL_SPEECH_FRAME_SIZE_COD_BUF/2'>
        <comment>Encoder output buffer (coded frame in enc_mode)</comment>
    </uint16>
</typedef>

<typedef name='HAL_SPEECH_DEC_IN'>
    <comment>Structure used to configure VOC frame decode</comment>

    <uint16 name='dtxOn'>
        <comment>DTX allowed by the network, active->G1</comment>
    </uint16>
    <uint16 name='codecMode'>
        <comment>mode of the voice coded input frame and of the next encoder speech frame output</comment>
    </uint16>
    <uint16 name='decFrameType'>
        <comment>Type of the coded input frame (AMR only)</comment>
    </uint16>
    <uint16 name='bfi'>
        <comment>BFI flag (all vocoders except AMR)</comment>
    </uint16>
    <uint16 name='sid'>
        <comment>SID flag (all vocoders except AMR)</comment>
    </uint16>
    <uint16 name='taf'>
        <comment>TAF flag (all vocoders except AMR)</comment>
    </uint16>
    <uint16 name='ufi'>
        <comment>UFI flag (HR only)</comment>
    </uint16>
    <uint16 name='reserved'>
        <comment>Reserved</comment>
    </uint16>
    <uint16 name='decInBuf' count='HAL_SPEECH_FRAME_SIZE_COD_BUF/2'>
        <comment>Decoder input buffer (coded frame in dec_mode)</comment>
    </uint16>
</typedef>


<enum name='HAL_RX_FRAME_TYPE'>
    <comment>AMR enum</comment>

    <entry name='HAL_RX_SPEECH_GOOD'></entry>
    <entry name='HAL_RX_SPEECH_DEGRADED'></entry>
    <entry name='HAL_RX_ONSET'></entry>
    <entry name='HAL_RX_SPEECH_BAD'></entry>
    <entry name='HAL_RX_SID_FIRST'></entry>
    <entry name='HAL_RX_SID_UPDATE'></entry>
    <entry name='HAL_RX_SID_BAD'></entry>
    <entry name='HAL_RX_NO_DATA'></entry>
</enum>

<enum name='HAL_TX_FRAME_TYPE'>
    <entry name='HAL_TX_SPEECH'></entry>
    <entry name='HAL_TX_SID_FIRST'></entry>
    <entry name='HAL_TX_SID_UPDATE'></entry>
    <entry name='HAL_TX_NO_DATA'></entry>
</enum>





<alias name='HAL_SPEECH_PCM_HALF_BUF'>
    <uint16 name='unused' count='HAL_SPEECH_FRAME_SIZE_PCM_BUF/2'>
        <comment>PCM Half buffer type. Two of them are packed to become a ping-pong buffer.</comment>
    </uint16>
</alias>

<typedef name='HAL_SPEECH_PCM_BUF'>
    <comment>Structure defining the Speech PCM swap buffers used in Speech encoding and decoding</comment>

    <instance name='pcmBuf' type='HAL_SPEECH_PCM_HALF_BUF' count='2'>
        <comment>A couple of Speech PCM swap buffers</comment>
    </instance>
</typedef>

<typedef name='HAL_SPEECH_FIFO_ELM_T'>
    <comment>
        This types describes a Fifo section. Rx and Tx are joined together because
        the we always read and write one Rx and a Tx (or inversly) at the same time.
    </comment>
    <instance name="rx" type="HAL_SPEECH_DEC_IN">
        <comment>
            Received encoded frame
        </comment>
    </instance>
    <instance name="tx" type="HAL_SPEECH_ENC_OUT">
        <comment>
            Encoded Frame to transmit
        </comment>
    </instance>
</typedef>

<typedef name="HAL_SPEECH_FIFO_T">
    <instance   name='fifo' type='HAL_SPEECH_FIFO_ELM_T' count='HAL_SPEECH_FIFO_DEPTH'/>
    <bool       name='rxOverflowTxUnderflow'>
        <comment>
            That boolean is set to TRUE when the Speech Fifo Rx has overflowed, 
            which also corresponds to a Tx underflow.
            The reset is manual through coolwatcher.
        </comment>
    </bool>
    <bool       name='txOverflowRxUnderflow' >
        <comment>
            That boolean is set to TRUE when the Speech Fifo Tx has overflowed, 
            which also corresponds to a Rx underflow.
            This is normally expected in case of handover, for example.
            The reset is manual through coolwatcher.
        </comment>
    </bool>
</typedef>

<cjoker>
// =============================================================================
// FUNCTIONS
// =============================================================================

// =============================================================================
// hal_SpeechFifoReset
// -----------------------------------------------------------------------------
/// Initializes the speech related mechanisms in HAL (Speech Fifo, ...)
// =============================================================================
PUBLIC VOID hal_SpeechFifoReset(VOID);

// =============================================================================
// hal_SpeechPushRxPopTx
// -----------------------------------------------------------------------------
/// PAL side of the FIFO accessor.
///
/// @param pushedRx Pointer to the received trame to push in the FIFO
/// @param popedTx Pointer to the buffer where the trame to send will
/// be copied.
// =============================================================================
PUBLIC VOID hal_SpeechPushRxPopTx(CONST HAL_SPEECH_DEC_IN_T* pushedRx,
HAL_SPEECH_ENC_OUT_T* popedTx);

// =============================================================================
// hal_SpeechPopRxPushTx
// -----------------------------------------------------------------------------
/// Vois side of the FIFO accessor.
///
/// @param popedRx Pointer where to copy the received trame.
/// @param pushedTx Pointer to the trame to send to push in the FIFO.
// =============================================================================
PUBLIC VOID hal_SpeechPopRxPushTx(HAL_SPEECH_DEC_IN_T* popedRx,
CONST HAL_SPEECH_ENC_OUT_T* pushedTx);

/// @} // --> End of the Speech group.

</cjoker>
</archive>
