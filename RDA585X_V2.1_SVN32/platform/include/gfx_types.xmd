<?xml version="1.0" encoding="UTF-8"?>
<archive asm="no">
    
    <comment>
        This file contains the types used for graphical operations.
    </comment>

    <enum name="GFX_WIDESCREEN_ASPECT">
      <comment>
        Describe the display aspect
      </comment>
      <entry name="GFX_WIDESCREEN_ASPECT_FULLSCREEN"></entry>
      <entry name="GFX_WIDESCREEN_ASPECT_LETTERBOX"></entry>
      <entry name="GFX_WIDESCREEN_ASPECT_PANSCAN"></entry>
    </enum>

	<enum name="GFX_COLOR_FORMAT">
        <comment>
            This type describes how the color are encoded within a frame buffer.
        </comment>
		<entry name="GFX_COLOR_FORMAT_INVALID"><comment>to track not initialized structures.</comment></entry>
        <entry name="GFX_COLOR_FORMAT_RGB_565"><comment>Regular RGB 565 format.</comment></entry>
        <entry name="GFX_COLOR_FORMAT_RGB_565_PIXELSWAP"><comment>RGB565 format with swapped pixels (for Greenstone Camera module).</comment></entry>
        <entry name="GFX_COLOR_FORMAT_RGBA"><comment>RVG Alpha 888 8 format.</comment></entry>
        <entry name="GFX_COLOR_FORMAT_UYVY"><comment>YUV 4:2:2 pixel packed (UYVY).</comment></entry>
        <entry name="GFX_COLOR_FORMAT_YUYV"><comment>YUV 4:2:2 pixel packed (YUYV).</comment></entry>
        <entry name="GFX_COLOR_FORMAT_IYUV"><comment>YUV 4:2:0 planar (IYUV).</comment></entry>

        <entry name="GFX_COLOR_FORMAT_QTY"/>
	</enum>

	<enum name="GFX_ROTATION">
        <comment>
            This type describes the rotations.
        </comment>
		<entry name="GFX_ROTATION_NONE" value="0"  ><comment>No Rotation.</comment></entry>
		<entry name="GFX_ROTATION_90"   value="90" ><comment>Rotation of 90 degrees Counter Clockwise.</comment></entry>
		<entry name="GFX_ROTATION_180"  value="180"><comment>Rotation of 180 degrees Counter Clockwise.</comment></entry>
		<entry name="GFX_ROTATION_270"  value="270"><comment>Rotation of 270 degrees Counter Clockwise.</comment></entry>
	</enum>

	<typedef name="GFX_POINT">
        <comment>
            This type describes a graphical point.
        </comment>
        <int16 name="x"><comment>x coordinate of the point.</comment></int16>
        <int16 name="y"><comment>y coordinate of the point.</comment></int16>
	</typedef>

	<typedef name="GFX_RECT">
        <comment>
            This type describes a graphical rectangular region described by its corner points.
        </comment>
        <int16 name="left"><comment>x coordinate of the top left corner of the region.</comment></int16>
        <int16 name="top"><comment>y coordinate of the top left corner of the region.</comment></int16>
        <int16 name="right"><comment>x coordinate of the bottom right corner of the region.</comment></int16>
        <int16 name="bottom"><comment>y coordinate of the bottom right corner of the region.</comment></int16>
	</typedef>

	<typedef name="GFX_ROI">
        <comment>
            Region Of Interest: This type describes a graphical rectangular region described by its start point and size.
        </comment>
        <instance name="start" type="GFX_POINT"><comment>starting point of the region.</comment></instance>

        <uint16 name="width"><comment>width of the region.</comment></uint16>
        <uint16 name="height"><comment>height of the region.</comment></uint16>
	</typedef>

	<typedef name="GFX_FB">
        <comment>
            Frame Buffer: This type describes a frame buffer through its dimensions and a
            pointer to the data of the buffer. It is mandatory for the buffer to
            be able to hold the data describing all the pixels at the color format
            chosen. <br/>
            (ie sizeof(buffer) = width*height*NbOfBytesPerPixelAtTheFormat(format))
        </comment>
		<ptr type="uint16" name="buffer"/>

        <uint16 name="width"><comment>width of the buffer.</comment></uint16>
        <uint16 name="height"><comment>height of the buffer.</comment></uint16>
        <instance name="colorFormat" type="GFX_COLOR_FORMAT"><comment>Color encoding of the buffer.</comment></instance>
	</typedef>

	<typedef name="GFX_FBW">
        <comment>
            Frame Buffer Window: This type describes a window in a frame buffer as
            a region of interest within this frame buffer. When the region of 
            interest starts at (0,0) and has the same dimensions as the frame
            buffer, the window is in fact the whole frame buffer.
        </comment>
        <instance name="fb" type="GFX_FB"><comment>Frame buffer.</comment></instance>
        <instance name="roi" type="GFX_ROI"><comment>Region of interest.</comment></instance>
	</typedef>

    <cjoker>
// ============================================================================
// GFX_FB_T IYUV buffer accessors
// -----------------------------------------------------------------------------
// The macros are assuming that the width is a multiple of 4.
// ============================================================================
/// Access macros for IYUV format to access the Y buffer
#define GFX_FB_IYUV_Y(fb) ((UINT8)((fb).buffer))
/// Access macros for IYUV format to access the U buffer
#define GFX_FB_IYUV_U(fb) ((UINT8)((fb).buffer)+((fb).width*(fb).height))
/// Access macros for IYUV format to access the V buffer
#define GFX_FB_IYUV_V(fb) ((UINT8)((fb).buffer)+(((fb).width*(fb).height*5)>>2))
    </cjoker>

</archive>
